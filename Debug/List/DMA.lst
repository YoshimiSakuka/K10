###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     13/Mar/2015  12:44:27 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\3.11换结构BLOCK nd        #
#                    black\common\DMA.c                                       #
#    Command line =  "C:\Users\Administrator\Desktop\3.11换结构BLOCK nd       #
#                    black\common\DMA.c" -D DEBUG -lCN                        #
#                    "C:\Users\Administrator\Desktop\3.11换结构BLOCK nd       #
#                    black\Debug\List\" -lB "C:\Users\Administrator\Desktop\3 #
#                    .11换结构BLOCK nd  black\Debug\List\" -o                 #
#                    "C:\Users\Administrator\Desktop\3.11换结构BLOCK nd       #
#                    black\Debug\Obj\" --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol --use_c++_inline                              #
#    List file    =  C:\Users\Administrator\Desktop\3.11换结构BLOCK nd        #
#                    black\Debug\List\DMA.lst                                 #
#    Object file  =  C:\Users\Administrator\Desktop\3.11换结构BLOCK nd        #
#                    black\Debug\Obj\DMA.o                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\3.11换结构BLOCK nd  black\common\DMA.c
      1          #include "DMA.h"
      2          
      3          
      4          
      5          
      6          //u8 counttempaddr;
      7          #define COUNTSADDR   0x4004000C  //(&counttempaddr)
      8          #define COUNTDADDR   0x4004000C  //(&counttempaddr)
      9          

   \                                 In section .bss, align 4
     10          u32 count_init[16];         //用来保存16个通道的初始化计数值
   \                     count_init:
   \   00000000                      DS8 64
     11          
     12          
     13          
     14          /*************************************************************************
     15          *                             野火嵌入式开发工作室
     16          *
     17          *  函数名称：DMA_PORTx2BUFF_Init
     18          *  功能说明：DMA初始化，读取端口数据到内存
     19          *  参数说明：DMA_CHn              通道号（DMA_CH0 ~ DMA_CH15）
     20          *            SADDR                源地址( (void * )&PTx_BYTEn_IN 或 (void * )&PTx_WORDn_IN   )
     21          *            DADDR                目的地址
     22          *            PTxn                 触发端口
     23          *            DMA_BYTEn            每次DMA传输字节数
     24          *            count                一个主循环传输字节数
     25          *            DMA_PORTx2BUFF_cfg   DMA传输配置
     26          *  函数返回：无
     27          *  修改时间：2012-2-20
     28          *  备    注：
     29          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     30          void DMA_PORTx2BUFF_Init(DMA_CHn CHn, void *SADDR, void *DADDR, U32 ptxn, DMA_BYTEn byten, u32 count, DMA_PORTx2BUFF_cfg cfg)
     31          {
   \                     DMA_PORTx2BUFF_Init:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x9B06             LDR      R3,[SP, #+24]
   \   00000004   0x9D07             LDR      R5,[SP, #+28]
   \   00000006   0x9C08             LDR      R4,[SP, #+32]
     32              u8 n, i;
     33          //    u8 tmp;
     34          //
     35          //    ASSERT(                                             //用断言检测 源地址和每次传输字节数是否正确
     36          //        (   (byten == DMA_BYTE1)                    //传输一个字节
     37          //            && ( (SADDR >= &PTA_BYTE0_IN) && (SADDR <= ( &PTE_BYTE3_IN )))
     38          //        )
     39          //
     40          //        || (   (byten == DMA_BYTE2)                   //传输两个字节(注意，不能跨端口)
     41          //               && ( (SADDR >= &PTA_BYTE0_IN)
     42          //                    && (SADDR <= ( &PTE_WORD1_IN ))
     43          //                    && (((u32)SADDR & 0x03) != 0x03) )         //保证不跨端口
     44          //           )
     45          //
     46          //        || (   (byten == DMA_BYTE4)                   //传输四个字节
     47          //               && ((SADDR >= &PTA_BYTE0_IN) && (SADDR <= ( &PTE_BYTE0_IN )))
     48          //               && (((u32)SADDR & 0x03) == 0x00)           //保证不跨端口
     49          //           )
     50          //    );
     51          
     52              u8 BYTEs = (byten == DMA_BYTE1 ? 1 : (byten == DMA_BYTE2 ? 2 : (byten == DMA_BYTE4 ? 4 : 16 ) ) ); //计算传输字节数
   \   00000008   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000000A   0x2B00             CMP      R3,#+0
   \   0000000C   0xD101             BNE.N    ??DMA_PORTx2BUFF_Init_0
   \   0000000E   0x2601             MOVS     R6,#+1
   \   00000010   0xE00A             B.N      ??DMA_PORTx2BUFF_Init_1
   \                     ??DMA_PORTx2BUFF_Init_0:
   \   00000012   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000014   0x2B01             CMP      R3,#+1
   \   00000016   0xD101             BNE.N    ??DMA_PORTx2BUFF_Init_2
   \   00000018   0x2602             MOVS     R6,#+2
   \   0000001A   0xE005             B.N      ??DMA_PORTx2BUFF_Init_3
   \                     ??DMA_PORTx2BUFF_Init_2:
   \   0000001C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000001E   0x2B02             CMP      R3,#+2
   \   00000020   0xD101             BNE.N    ??DMA_PORTx2BUFF_Init_4
   \   00000022   0x2604             MOVS     R6,#+4
   \   00000024   0xE000             B.N      ??DMA_PORTx2BUFF_Init_5
   \                     ??DMA_PORTx2BUFF_Init_4:
   \   00000026   0x2610             MOVS     R6,#+16
     53          
     54              /* 开启时钟 */
     55              SIM_SCGC7 |= SIM_SCGC7_DMA_MASK;                        //打开DMA模块时钟
   \                     ??DMA_PORTx2BUFF_Init_5:
   \                     ??DMA_PORTx2BUFF_Init_3:
   \                     ??DMA_PORTx2BUFF_Init_1:
   \   00000028   0x....             LDR.N    R7,??DataTable3  ;; 0x40048040
   \   0000002A   0x683F             LDR      R7,[R7, #+0]
   \   0000002C   0xF057 0x0702      ORRS     R7,R7,#0x2
   \   00000030   0x.... 0x....      LDR.W    R12,??DataTable3  ;; 0x40048040
   \   00000034   0xF8CC 0x7000      STR      R7,[R12, #+0]
     56              SIM_SCGC6 |= SIM_SCGC6_DMAMUX_MASK;                     //打开DMA多路复用器时钟
   \   00000038   0x....             LDR.N    R7,??DataTable3_1  ;; 0x4004803c
   \   0000003A   0x683F             LDR      R7,[R7, #+0]
   \   0000003C   0xF057 0x0702      ORRS     R7,R7,#0x2
   \   00000040   0x.... 0x....      LDR.W    R12,??DataTable3_1  ;; 0x4004803c
   \   00000044   0xF8CC 0x7000      STR      R7,[R12, #+0]
     57          
     58              /* 配置 DMA 通道 的 传输控制块 TCD ( Transfer Control Descriptor ) */
     59              DMA_SADDR(CHn) =    (u32)SADDR;                         // 设置  源地址
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0x0147             LSLS     R7,R0,#+5
   \   0000004C   0x.... 0x....      LDR.W    R12,??DataTable3_2  ;; 0x40009000
   \   00000050   0xF847 0x100C      STR      R1,[R7, R12]
     60              DMA_DADDR(CHn) =    (u32)DADDR;                         // 设置目的地址
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x0147             LSLS     R7,R0,#+5
   \   00000058   0xF107 0x4780      ADD      R7,R7,#+1073741824
   \   0000005C   0xF517 0x4710      ADDS     R7,R7,#+36864
   \   00000060   0x613A             STR      R2,[R7, #+16]
     61              DMA_SOFF(CHn)  =    0x00u;                              // 设置源地址偏移 = 0x0, 即不变
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x0142             LSLS     R2,R0,#+5
   \   00000066   0xF102 0x4280      ADD      R2,R2,#+1073741824
   \   0000006A   0xF512 0x4210      ADDS     R2,R2,#+36864
   \   0000006E   0x2700             MOVS     R7,#+0
   \   00000070   0x8097             STRH     R7,[R2, #+4]
     62              DMA_DOFF(CHn)  =    BYTEs;                              // 每次传输后，目的地址加 BYTEs
   \   00000072   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000074   0x0142             LSLS     R2,R0,#+5
   \   00000076   0xF102 0x4280      ADD      R2,R2,#+1073741824
   \   0000007A   0xF512 0x4210      ADDS     R2,R2,#+36864
   \   0000007E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000080   0x8296             STRH     R6,[R2, #+20]
     63          
     64              DMA_ATTR(CHn)  =    (0
     65                                   | DMA_ATTR_SMOD(0x0)                // 源地址模数禁止  Source address modulo feature is disabled
     66                                   | DMA_ATTR_SSIZE(byten)             // 源数据位宽 ：DMA_BYTEn  。    SSIZE = 0 -> 8-bit ，SSIZE = 1 -> 16-bit ，SSIZE = 2 -> 32-bit ，SSIZE = 4 -> 16-byte
     67                                   | DMA_ATTR_DMOD(0x0)                // 目标地址模数禁止
     68                                   | DMA_ATTR_DSIZE(byten)             // 目标数据位宽 ：DMA_BYTEn  。  设置参考  SSIZE
     69                                  );
   \   00000082   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000084   0x021A             LSLS     R2,R3,#+8
   \   00000086   0xF412 0x62E0      ANDS     R2,R2,#0x700
   \   0000008A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000008C   0xF013 0x0707      ANDS     R7,R3,#0x7
   \   00000090   0x433A             ORRS     R2,R7,R2
   \   00000092   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000094   0x0147             LSLS     R7,R0,#+5
   \   00000096   0xF107 0x4780      ADD      R7,R7,#+1073741824
   \   0000009A   0xF517 0x4710      ADDS     R7,R7,#+36864
   \   0000009E   0x80FA             STRH     R2,[R7, #+6]
     70          
     71              DMA_CITER_ELINKNO(CHn)  = DMA_CITER_ELINKNO_CITER(count); //当前主循环次数
   \   000000A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A2   0x0142             LSLS     R2,R0,#+5
   \   000000A4   0xF102 0x4280      ADD      R2,R2,#+1073741824
   \   000000A8   0xF512 0x4210      ADDS     R2,R2,#+36864
   \   000000AC   0x002F             MOVS     R7,R5
   \   000000AE   0x047F             LSLS     R7,R7,#+17       ;; ZeroExtS R7,R7,#+17,#+17
   \   000000B0   0x0C7F             LSRS     R7,R7,#+17
   \   000000B2   0x82D7             STRH     R7,[R2, #+22]
     72              DMA_BITER_ELINKNO(CHn)  = DMA_BITER_ELINKYES_BITER(count);//起始主循环次数
   \   000000B4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B6   0x0142             LSLS     R2,R0,#+5
   \   000000B8   0xF102 0x4280      ADD      R2,R2,#+1073741824
   \   000000BC   0xF512 0x4210      ADDS     R2,R2,#+36864
   \   000000C0   0x002F             MOVS     R7,R5
   \   000000C2   0x05FF             LSLS     R7,R7,#+23       ;; ZeroExtS R7,R7,#+23,#+23
   \   000000C4   0x0DFF             LSRS     R7,R7,#+23
   \   000000C6   0x83D7             STRH     R7,[R2, #+30]
     73          
     74          
     75              DMA_CR &= ~DMA_CR_EMLM_MASK;                            // CR[EMLM] = 0
   \   000000C8   0x....             LDR.N    R2,??DataTable3_3  ;; 0x40008000
   \   000000CA   0x6812             LDR      R2,[R2, #+0]
   \   000000CC   0xF032 0x0280      BICS     R2,R2,#0x80
   \   000000D0   0x....             LDR.N    R7,??DataTable3_3  ;; 0x40008000
   \   000000D2   0x603A             STR      R2,[R7, #+0]
     76          
     77              //当CR[EMLM] = 0 时:
     78              DMA_NBYTES_MLNO(CHn) =   DMA_NBYTES_MLNO_NBYTES(BYTEs); // 通道每次传输字节数，这里设置为BYTEs个字节。注：值为0表示传输4GB */
   \   000000D4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D6   0x0142             LSLS     R2,R0,#+5
   \   000000D8   0xF102 0x4280      ADD      R2,R2,#+1073741824
   \   000000DC   0xF512 0x4210      ADDS     R2,R2,#+36864
   \   000000E0   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000E2   0x6096             STR      R6,[R2, #+8]
     79          
     80          
     81              /* 配置 DMA 传输结束后的操作 */
     82              DMA_SLAST(CHn)      =   0;                              //调整  源地址的附加值,主循环结束后恢复  源地址
   \   000000E4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E6   0x0142             LSLS     R2,R0,#+5
   \   000000E8   0xF102 0x4280      ADD      R2,R2,#+1073741824
   \   000000EC   0xF512 0x4210      ADDS     R2,R2,#+36864
   \   000000F0   0x2600             MOVS     R6,#+0
   \   000000F2   0x60D6             STR      R6,[R2, #+12]
     83              DMA_DLAST_SGA(CHn)  =   (u32)( (cfg & 0x20) == 0 ? (-count)  : 0 ); //调整目的地址的附加值,主循环结束后恢复目的地址或者保持地址
   \   000000F4   0x06A2             LSLS     R2,R4,#+26
   \   000000F6   0xD401             BMI.N    ??DMA_PORTx2BUFF_Init_6
   \   000000F8   0x426A             RSBS     R2,R5,#+0
   \   000000FA   0xE000             B.N      ??DMA_PORTx2BUFF_Init_7
   \                     ??DMA_PORTx2BUFF_Init_6:
   \   000000FC   0x2200             MOVS     R2,#+0
   \                     ??DMA_PORTx2BUFF_Init_7:
   \   000000FE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000100   0x0144             LSLS     R4,R0,#+5
   \   00000102   0xF104 0x4480      ADD      R4,R4,#+1073741824
   \   00000106   0xF514 0x4410      ADDS     R4,R4,#+36864
   \   0000010A   0x61A2             STR      R2,[R4, #+24]
     84              DMA_CSR(CHn)        =   (0
     85                                       | DMA_CSR_DREQ_MASK            //主循环结束后停止硬件请求
     86                                       | DMA_CSR_INTMAJOR_MASK        //主循环结束后产生中断
     87                                      );
   \   0000010C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000010E   0x0142             LSLS     R2,R0,#+5
   \   00000110   0xF102 0x4280      ADD      R2,R2,#+1073741824
   \   00000114   0xF512 0x4210      ADDS     R2,R2,#+36864
   \   00000118   0x240A             MOVS     R4,#+10
   \   0000011A   0x8394             STRH     R4,[R2, #+28]
     88          
     89              /* 配置 DMA 触发源 */
     90          //    DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR, CHn) = (0
     91          //            | DMAMUX_CHCFG_ENBL_MASK                        /* Enable routing of DMA request */
     92          //            //| DMAMUX_CHCFG_TRIG_MASK                        /* Trigger Mode: Periodic   PIT周期触发传输模式   通道1对应PIT1，必须使能PIT1，且配置相应的PIT定时触发 */
     93          //            | DMAMUX_CHCFG_SOURCE((ptxn >> 5) + DMA_Port_A) /* 通道触发传输源:     */
     94          //                                             );
     95          //
     96          //    SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK << (ptxn>>5));                                                               //开启PORTx端口
     97          //    GPIO_PDDR_REG(GPIOx[(ptxn>>5)]) &= ~(1 << (ptxn & 0x1f));                                                       //设置端口方向为输入
     98          //    PORT_PCR_REG(PORTX[(ptxn>>5)], (ptxn & 0x1F)) = ( 0
     99          //            | PORT_PCR_MUX(1)               // 复用GPIO
    100          //            | PORT_PCR_IRQC(cfg & 0x03 )    // 确定触发模式
    101          //            | ((cfg & 0xc0 ) >> 6)          // 开启上拉或下拉电阻，或者没有
    102          //                                                    );
    103          //    GPIO_PDDR_REG(GPIOx[(ptxn>>5)]) &= ~(1 << (ptxn && 0x1F));                                                      //输入模式
    104             /********************************************************************/ 
    105              
    106              
    107              DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR, CHn) = (0
    108                      | DMAMUX_CHCFG_ENBL_MASK                        /* Enable routing of DMA request */
    109                      | DMAMUX_CHCFG_TRIG_MASK                        /* Trigger Mode: Periodic   PIT周期触发传输模式   通道1对应PIT1，必须使能PIT1，且配置相应的PIT定时触发 */
    110                      //| DMAMUX_CHCFG_SOURCE((ptxn >> 5) + DMA_Port_A) /* 通道触发传输源:     */
    111                      | DMAMUX_CHCFG_SOURCE(59)                         //always   
    112                        );
   \   0000011C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011E   0x....             LDR.N    R2,??DataTable3_4  ;; 0x40021000
   \   00000120   0x24FB             MOVS     R4,#+251
   \   00000122   0x5484             STRB     R4,[R0, R2]
    113          /******************************************************************/
    114          //    SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK << (ptxn>>5));                                                               //开启PORTx端口
    115          //    GPIO_PDDR_REG(GPIOx[(ptxn>>5)]) &= ~(1 << (ptxn & 0x1f));                                                       //设置端口方向为输入
    116          //    PORT_PCR_REG(PORTX[(ptxn>>5)], (ptxn & 0x1F)) = ( 0
    117          //            | PORT_PCR_MUX(1)               // 复用GPIO
    118          //            | PORT_PCR_IRQC(cfg & 0x03 )    // 确定触发模式
    119          //            | ((cfg & 0xc0 ) >> 6)          // 开启上拉或下拉电阻，或者没有
    120          //                                                    );
    121          //    GPIO_PDDR_REG(GPIOx[(ptxn>>5)]) &= ~(1 << (ptxn && 0x1F));                                                      //输入模式
    122          /*******************************************************************/
    123              /*  配置输入源   */
    124              SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK << ((((u32)SADDR) & 0x1ff)>>6));             //开启PORTx端口
   \   00000124   0x....             LDR.N    R2,??DataTable3_5  ;; 0x40048038
   \   00000126   0x6812             LDR      R2,[R2, #+0]
   \   00000128   0xF44F 0x7400      MOV      R4,#+512
   \   0000012C   0x098D             LSRS     R5,R1,#+6
   \   0000012E   0xF015 0x0507      ANDS     R5,R5,#0x7
   \   00000132   0x40AC             LSLS     R4,R4,R5
   \   00000134   0x4322             ORRS     R2,R4,R2
   \   00000136   0x....             LDR.N    R4,??DataTable3_5  ;; 0x40048038
   \   00000138   0x6022             STR      R2,[R4, #+0]
    125              switch(byten)
   \   0000013A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000013C   0x2B00             CMP      R3,#+0
   \   0000013E   0xD003             BEQ.N    ??DMA_PORTx2BUFF_Init_8
   \   00000140   0x2B02             CMP      R3,#+2
   \   00000142   0xD007             BEQ.N    ??DMA_PORTx2BUFF_Init_9
   \   00000144   0xD303             BCC.N    ??DMA_PORTx2BUFF_Init_10
   \   00000146   0xE008             B.N      ??DMA_PORTx2BUFF_Init_11
    126              {
    127              case DMA_BYTE1:
    128                  *((u8 *)((u32)SADDR + 4)) = 0;   //设置为输入方向。为什么加4？PDIR地址加4后，就变成对应的PDDR地址
   \                     ??DMA_PORTx2BUFF_Init_8:
   \   00000148   0x2200             MOVS     R2,#+0
   \   0000014A   0x710A             STRB     R2,[R1, #+4]
    129                  break;
   \   0000014C   0xE005             B.N      ??DMA_PORTx2BUFF_Init_12
    130              case DMA_BYTE2:
    131                  *((u16 *)((u32)SADDR + 4)) = 0;
   \                     ??DMA_PORTx2BUFF_Init_10:
   \   0000014E   0x2200             MOVS     R2,#+0
   \   00000150   0x808A             STRH     R2,[R1, #+4]
    132                  break;
   \   00000152   0xE002             B.N      ??DMA_PORTx2BUFF_Init_12
    133              case DMA_BYTE4:
    134                  *((u32 *)((u32)SADDR + 4)) = 0;
   \                     ??DMA_PORTx2BUFF_Init_9:
   \   00000154   0x2200             MOVS     R2,#+0
   \   00000156   0x604A             STR      R2,[R1, #+4]
    135                  break;
   \   00000158   0xE7FF             B.N      ??DMA_PORTx2BUFF_Init_12
    136              default:
    137          //        assert_failed(__FILE__, __LINE__);
    138                  break;
    139              }
    140          //////////////////////////////////////////////////////////////////////////////////
    141              
    142              
    143              
    144          //    /*  输入源管脚选择功能脚  */
    145          //    n = (u8)(((u32)SADDR - ((u32)(&PTA_BYTE0_IN))) & 0x3f);         //最小的引脚号
    146          //    tmp = n + (BYTEs << 3);                                         //最大的引脚号
    147          //    for(i = n; i < tmp; i++)
    148          //    {
    149          //        PORT_PCR_REG(PORTX[   ((((u32)SADDR)&0x1ff)>>6)    ], i) = (0
    150          //                | PORT_PCR_MUX(1)
    151          //                | GPI_DOWN             //输入源应该下拉，默认读取到的是0
    152          //                                                                   );
    153          //    }
    154          
    155              /* 开启中断 */
    156              //DMA_EN(CHn);                                    //使能通道CHn 硬件请求
    157              DMA_IRQ_EN(CHn);                                //允许DMA通道传输//晓克注：允许DMA通道CHn产生中断,一次采集结束触发中断
   \                     ??DMA_PORTx2BUFF_Init_11:
   \                     ??DMA_PORTx2BUFF_Init_12:
   \   0000015A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000015C   0x.... 0x....      BL       enable_irq
    158          }
   \   00000160   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    159          
    160          
    161          
    162          
    163          
    164          /*************************************************************************
    165          *                             野火嵌入式开发工作室
    166          *
    167          *  函数名称：DMA_count_Init
    168          *  功能说明：DMA累加计数初始化
    169          *  参数说明：DMA_CHn              通道号（DMA_CH0 ~ DMA_CH15）
    170          *            PTxn                 触发端口
    171          *            count                累加计数中断值
    172          *            DMA_Count_cfg        DMA传输配置
    173          *  函数返回：无
    174          *  修改时间：2012-1-20
    175          *  备    注：
    176          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    177          void DMA_count_Init(DMA_CHn CHn, U32 ptxn, u32 count, DMA_Count_cfg cfg)
    178          {
   \                     DMA_count_Init:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    179              u8 byten = DMA_BYTE1;
   \   00000002   0x2400             MOVS     R4,#+0
    180              u8 BYTEs = (byten == DMA_BYTE1 ? 1 : (byten == DMA_BYTE2 ? 2 : (byten == DMA_BYTE4 ? 4 : 16 ) ) ); //计算传输字节数
   \   00000004   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000006   0x2C00             CMP      R4,#+0
   \   00000008   0xD101             BNE.N    ??DMA_count_Init_0
   \   0000000A   0x2501             MOVS     R5,#+1
   \   0000000C   0xE00A             B.N      ??DMA_count_Init_1
   \                     ??DMA_count_Init_0:
   \   0000000E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000010   0x2C01             CMP      R4,#+1
   \   00000012   0xD101             BNE.N    ??DMA_count_Init_2
   \   00000014   0x2502             MOVS     R5,#+2
   \   00000016   0xE005             B.N      ??DMA_count_Init_3
   \                     ??DMA_count_Init_2:
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0x2C02             CMP      R4,#+2
   \   0000001C   0xD101             BNE.N    ??DMA_count_Init_4
   \   0000001E   0x2504             MOVS     R5,#+4
   \   00000020   0xE000             B.N      ??DMA_count_Init_5
   \                     ??DMA_count_Init_4:
   \   00000022   0x2510             MOVS     R5,#+16
    181              if(count > 0x7FFF )count = 0x7FFF;
   \                     ??DMA_count_Init_5:
   \                     ??DMA_count_Init_3:
   \                     ??DMA_count_Init_1:
   \   00000024   0xF5B2 0x4F00      CMP      R2,#+32768
   \   00000028   0xD301             BCC.N    ??DMA_count_Init_6
   \   0000002A   0xF647 0x72FF      MOVW     R2,#+32767
    182              count_init[CHn] = count;
   \                     ??DMA_count_Init_6:
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x....             LDR.N    R6,??DataTable3_6
   \   00000032   0xF846 0x2020      STR      R2,[R6, R0, LSL #+2]
    183          
    184              /* 开启时钟 */
    185              SIM_SCGC7 |= SIM_SCGC7_DMA_MASK;                        //打开DMA模块时钟
   \   00000036   0x....             LDR.N    R6,??DataTable3  ;; 0x40048040
   \   00000038   0x6836             LDR      R6,[R6, #+0]
   \   0000003A   0xF056 0x0602      ORRS     R6,R6,#0x2
   \   0000003E   0x....             LDR.N    R7,??DataTable3  ;; 0x40048040
   \   00000040   0x603E             STR      R6,[R7, #+0]
    186              SIM_SCGC6 |= SIM_SCGC6_DMAMUX_MASK;                     //打开DMA多路复用器时钟
   \   00000042   0x....             LDR.N    R6,??DataTable3_1  ;; 0x4004803c
   \   00000044   0x6836             LDR      R6,[R6, #+0]
   \   00000046   0xF056 0x0602      ORRS     R6,R6,#0x2
   \   0000004A   0x....             LDR.N    R7,??DataTable3_1  ;; 0x4004803c
   \   0000004C   0x603E             STR      R6,[R7, #+0]
    187          
    188              /* 配置 DMA 通道 的 传输控制块 TCD ( Transfer Control Descriptor ) */
    189              DMA_SADDR(CHn) =    (u32)COUNTSADDR;                    // 设置  源地址
   \   0000004E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000050   0x0146             LSLS     R6,R0,#+5
   \   00000052   0x....             LDR.N    R7,??DataTable3_2  ;; 0x40009000
   \   00000054   0x.... 0x....      LDR.W    R12,??DataTable3_7  ;; 0x4004000c
   \   00000058   0xF846 0xC007      STR      R12,[R6, R7]
    190              DMA_DADDR(CHn) =    (u32)COUNTDADDR;                    // 设置目的地址
   \   0000005C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000005E   0x0146             LSLS     R6,R0,#+5
   \   00000060   0xF106 0x4680      ADD      R6,R6,#+1073741824
   \   00000064   0xF516 0x4610      ADDS     R6,R6,#+36864
   \   00000068   0x....             LDR.N    R7,??DataTable3_7  ;; 0x4004000c
   \   0000006A   0x6137             STR      R7,[R6, #+16]
    191              DMA_SOFF(CHn)  =    0;                                  // 设置源地址不变
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0x0146             LSLS     R6,R0,#+5
   \   00000070   0xF106 0x4680      ADD      R6,R6,#+1073741824
   \   00000074   0xF516 0x4610      ADDS     R6,R6,#+36864
   \   00000078   0x2700             MOVS     R7,#+0
   \   0000007A   0x80B7             STRH     R7,[R6, #+4]
    192              DMA_DOFF(CHn)  =    0;                                  // 每次传输后，目的地址不变
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0x0146             LSLS     R6,R0,#+5
   \   00000080   0xF106 0x4680      ADD      R6,R6,#+1073741824
   \   00000084   0xF516 0x4610      ADDS     R6,R6,#+36864
   \   00000088   0x2700             MOVS     R7,#+0
   \   0000008A   0x82B7             STRH     R7,[R6, #+20]
    193          
    194              DMA_ATTR(CHn)  =    (0
    195                                   | DMA_ATTR_SMOD(0x0)                // 源地址模数禁止  Source address modulo feature is disabled
    196                                   | DMA_ATTR_SSIZE(byten)             // 源数据位宽 ：DMA_BYTEn  。    SSIZE = 0 -> 8-bit ，SSIZE = 1 -> 16-bit ，SSIZE = 2 -> 32-bit ，SSIZE = 4 -> 16-byte
    197                                   | DMA_ATTR_DMOD(0x0)                // 目标地址模数禁止
    198                                   | DMA_ATTR_DSIZE(byten)             // 目标数据位宽 ：DMA_BYTEn  。  设置参考  SSIZE
    199                                  );
   \   0000008C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008E   0x0226             LSLS     R6,R4,#+8
   \   00000090   0xF416 0x66E0      ANDS     R6,R6,#0x700
   \   00000094   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000096   0xF014 0x0407      ANDS     R4,R4,#0x7
   \   0000009A   0x4334             ORRS     R4,R4,R6
   \   0000009C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009E   0x0146             LSLS     R6,R0,#+5
   \   000000A0   0xF106 0x4680      ADD      R6,R6,#+1073741824
   \   000000A4   0xF516 0x4610      ADDS     R6,R6,#+36864
   \   000000A8   0x80F4             STRH     R4,[R6, #+6]
    200          
    201              DMA_CITER_ELINKNO(CHn)  = DMA_CITER_ELINKNO_CITER(count); //当前主循环次数
   \   000000AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AC   0x0144             LSLS     R4,R0,#+5
   \   000000AE   0xF104 0x4480      ADD      R4,R4,#+1073741824
   \   000000B2   0xF514 0x4410      ADDS     R4,R4,#+36864
   \   000000B6   0x0016             MOVS     R6,R2
   \   000000B8   0x0476             LSLS     R6,R6,#+17       ;; ZeroExtS R6,R6,#+17,#+17
   \   000000BA   0x0C76             LSRS     R6,R6,#+17
   \   000000BC   0x82E6             STRH     R6,[R4, #+22]
    202              DMA_BITER_ELINKNO(CHn)  = DMA_BITER_ELINKYES_BITER(count);//起始主循环次数
   \   000000BE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C0   0x0144             LSLS     R4,R0,#+5
   \   000000C2   0xF104 0x4480      ADD      R4,R4,#+1073741824
   \   000000C6   0xF514 0x4410      ADDS     R4,R4,#+36864
   \   000000CA   0x0016             MOVS     R6,R2
   \   000000CC   0x05F6             LSLS     R6,R6,#+23       ;; ZeroExtS R6,R6,#+23,#+23
   \   000000CE   0x0DF6             LSRS     R6,R6,#+23
   \   000000D0   0x83E6             STRH     R6,[R4, #+30]
    203          
    204              DMA_CR &= ~DMA_CR_EMLM_MASK;                            // CR[EMLM] = 0
   \   000000D2   0x....             LDR.N    R4,??DataTable3_3  ;; 0x40008000
   \   000000D4   0x6824             LDR      R4,[R4, #+0]
   \   000000D6   0xF034 0x0480      BICS     R4,R4,#0x80
   \   000000DA   0x....             LDR.N    R6,??DataTable3_3  ;; 0x40008000
   \   000000DC   0x6034             STR      R4,[R6, #+0]
    205          
    206              DMA_NBYTES_MLNO(CHn) =   DMA_NBYTES_MLNO_NBYTES(BYTEs); // 通道每次传输字节数，这里设置为BYTEs个字节。注：值为0表示传输4GB */
   \   000000DE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E0   0x0144             LSLS     R4,R0,#+5
   \   000000E2   0xF104 0x4480      ADD      R4,R4,#+1073741824
   \   000000E6   0xF514 0x4410      ADDS     R4,R4,#+36864
   \   000000EA   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   000000EC   0x60A5             STR      R5,[R4, #+8]
    207          
    208              /* 配置 DMA 传输结束后的操作 */
    209              DMA_SLAST(CHn)      =   -count;                              //调整  源地址的附加值,主循环结束后恢复  源地址
   \   000000EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F0   0x0144             LSLS     R4,R0,#+5
   \   000000F2   0xF104 0x4480      ADD      R4,R4,#+1073741824
   \   000000F6   0xF514 0x4410      ADDS     R4,R4,#+36864
   \   000000FA   0x4252             RSBS     R2,R2,#+0
   \   000000FC   0x60E2             STR      R2,[R4, #+12]
    210              DMA_DLAST_SGA(CHn)  =   0;                                  //调整目的地址的附加值,主循环结束后恢复目的地址或者保持地址
   \   000000FE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000100   0x0142             LSLS     R2,R0,#+5
   \   00000102   0xF102 0x4280      ADD      R2,R2,#+1073741824
   \   00000106   0xF512 0x4210      ADDS     R2,R2,#+36864
   \   0000010A   0x2400             MOVS     R4,#+0
   \   0000010C   0x6194             STR      R4,[R2, #+24]
    211              DMA_CSR(CHn)        =   (0
    212                                       | DMA_CSR_DREQ_MASK            //主循环结束后停止硬件请求
    213                                       | DMA_CSR_INTMAJOR_MASK        //主循环结束后产生中断
    214                                      );
   \   0000010E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000110   0x0142             LSLS     R2,R0,#+5
   \   00000112   0xF102 0x4280      ADD      R2,R2,#+1073741824
   \   00000116   0xF512 0x4210      ADDS     R2,R2,#+36864
   \   0000011A   0x240A             MOVS     R4,#+10
   \   0000011C   0x8394             STRH     R4,[R2, #+28]
    215          
    216              /* 配置 DMA 触发源 */
    217              DMAMUX_CHCFG_REG(DMAMUX_BASE_PTR, CHn) = (0
    218                      | DMAMUX_CHCFG_ENBL_MASK                        /* Enable routing of DMA request */
    219                      | DMAMUX_CHCFG_SOURCE((ptxn >> 5) + DMA_Port_A) /* 通道触发传输源:     */
    220                                                       );
   \   0000011E   0x094A             LSRS     R2,R1,#+5
   \   00000120   0x3231             ADDS     R2,R2,#+49
   \   00000122   0xF012 0x023F      ANDS     R2,R2,#0x3F
   \   00000126   0xF052 0x0280      ORRS     R2,R2,#0x80
   \   0000012A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000012C   0x....             LDR.N    R4,??DataTable3_4  ;; 0x40021000
   \   0000012E   0x5502             STRB     R2,[R0, R4]
    221          
    222              SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK << (ptxn>>5));                                                               //开启PORTx端口
   \   00000130   0x....             LDR.N    R2,??DataTable3_5  ;; 0x40048038
   \   00000132   0x6812             LDR      R2,[R2, #+0]
   \   00000134   0xF44F 0x7400      MOV      R4,#+512
   \   00000138   0x094D             LSRS     R5,R1,#+5
   \   0000013A   0x40AC             LSLS     R4,R4,R5
   \   0000013C   0x4322             ORRS     R2,R4,R2
   \   0000013E   0x....             LDR.N    R4,??DataTable3_5  ;; 0x40048038
   \   00000140   0x6022             STR      R2,[R4, #+0]
    223              GPIO_PDDR_REG(GPIOx[(ptxn>>5)]) &= ~(1 << (ptxn & 0x1f));                                                       //设置端口方向为输入
   \   00000142   0x094A             LSRS     R2,R1,#+5
   \   00000144   0x....             LDR.N    R4,??DataTable3_8
   \   00000146   0xF854 0x2022      LDR      R2,[R4, R2, LSL #+2]
   \   0000014A   0x6952             LDR      R2,[R2, #+20]
   \   0000014C   0x2401             MOVS     R4,#+1
   \   0000014E   0xF011 0x051F      ANDS     R5,R1,#0x1F
   \   00000152   0x40AC             LSLS     R4,R4,R5
   \   00000154   0x43A2             BICS     R2,R2,R4
   \   00000156   0x094C             LSRS     R4,R1,#+5
   \   00000158   0x....             LDR.N    R5,??DataTable3_8
   \   0000015A   0xF855 0x4024      LDR      R4,[R5, R4, LSL #+2]
   \   0000015E   0x6162             STR      R2,[R4, #+20]
    224              PORT_PCR_REG(PORTX[(ptxn>>5)], (ptxn & 0x1F)) = ( 0
    225                      | PORT_PCR_MUX(1)               // 复用GPIO
    226                      | PORT_PCR_IRQC(cfg & 0x03 )    // 确定触发模式
    227                      | ((cfg & 0xc0 ) >> 6)          // 开启上拉或下拉电阻，或者没有
    228                                                              );
   \   00000160   0xF011 0x021F      ANDS     R2,R1,#0x1F
   \   00000164   0x094C             LSRS     R4,R1,#+5
   \   00000166   0x....             LDR.N    R5,??DataTable3_9
   \   00000168   0xF855 0x4024      LDR      R4,[R5, R4, LSL #+2]
   \   0000016C   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000016E   0xF013 0x0503      ANDS     R5,R3,#0x3
   \   00000172   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000174   0x099B             LSRS     R3,R3,#+6
   \   00000176   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000178   0xEA53 0x4305      ORRS     R3,R3,R5, LSL #+16
   \   0000017C   0xF44F 0x7580      MOV      R5,#+256
   \   00000180   0x432B             ORRS     R3,R5,R3
   \   00000182   0xF844 0x3022      STR      R3,[R4, R2, LSL #+2]
    229              GPIO_PDDR_REG(GPIOx[(ptxn>>5)]) &= ~(1 << (ptxn && 0x1F));                                                      //输入模式
   \   00000186   0x2900             CMP      R1,#+0
   \   00000188   0xD001             BEQ.N    ??DMA_count_Init_7
   \   0000018A   0x2201             MOVS     R2,#+1
   \   0000018C   0xE000             B.N      ??DMA_count_Init_8
   \                     ??DMA_count_Init_7:
   \   0000018E   0x2200             MOVS     R2,#+0
   \                     ??DMA_count_Init_8:
   \   00000190   0x094B             LSRS     R3,R1,#+5
   \   00000192   0x....             LDR.N    R4,??DataTable3_8
   \   00000194   0xF854 0x3023      LDR      R3,[R4, R3, LSL #+2]
   \   00000198   0x695B             LDR      R3,[R3, #+20]
   \   0000019A   0x2401             MOVS     R4,#+1
   \   0000019C   0xFA14 0xF202      LSLS     R2,R4,R2
   \   000001A0   0xEA33 0x0202      BICS     R2,R3,R2
   \   000001A4   0x0949             LSRS     R1,R1,#+5
   \   000001A6   0x....             LDR.N    R3,??DataTable3_8
   \   000001A8   0xF853 0x1021      LDR      R1,[R3, R1, LSL #+2]
   \   000001AC   0x614A             STR      R2,[R1, #+20]
    230          
    231              /* 开启中断 */
    232              DMA_EN(CHn);                                    //使能通道CHn 硬件请求
   \   000001AE   0x....             LDR.N    R1,??DataTable3_10  ;; 0x4000800c
   \   000001B0   0x6809             LDR      R1,[R1, #+0]
   \   000001B2   0x2201             MOVS     R2,#+1
   \   000001B4   0x4082             LSLS     R2,R2,R0
   \   000001B6   0x4311             ORRS     R1,R2,R1
   \   000001B8   0x....             LDR.N    R2,??DataTable3_10  ;; 0x4000800c
   \   000001BA   0x6011             STR      R1,[R2, #+0]
    233              DMA_IRQ_EN(CHn);                                //允许DMA通道传输
   \   000001BC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001BE   0x.... 0x....      BL       enable_irq
    234          }
   \   000001C2   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
    235          
    236          /*************************************************************************
    237          *                             野火嵌入式开发工作室
    238          *
    239          *  函数名称：DMA_count_get
    240          *  功能说明：返回累加计数值
    241          *  参数说明：DMA_CHn              通道号（DMA_CH0 ~ DMA_CH15）
    242          *  函数返回：累加计数值
    243          *  修改时间：2012-3-320
    244          *  备    注：
    245          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    246          u32 DMA_count_get(DMA_CHn CHn)
    247          {
    248              u32 temp =  count_init[CHn] - DMA_CITER_ELINKNO(CHn)  ;
   \                     DMA_count_get:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x....             LDR.N    R1,??DataTable3_6
   \   00000004   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000008   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000A   0x0140             LSLS     R0,R0,#+5
   \   0000000C   0xF100 0x4080      ADD      R0,R0,#+1073741824
   \   00000010   0xF510 0x4010      ADDS     R0,R0,#+36864
   \   00000014   0x8AC0             LDRH     R0,[R0, #+22]
   \   00000016   0x1A08             SUBS     R0,R1,R0
    249              return temp;
   \   00000018   0x4770             BX       LR               ;; return
    250          }
    251          

   \                                 In section .text, align 2, keep-with-next
    252          void DMA_count_reset(DMA_CHn CHn)
    253          {
    254              DMA_CITER_ELINKNO(CHn) = count_init[CHn] ;
   \                     DMA_count_reset:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x0141             LSLS     R1,R0,#+5
   \   00000004   0xF101 0x4180      ADD      R1,R1,#+1073741824
   \   00000008   0xF511 0x4110      ADDS     R1,R1,#+36864
   \   0000000C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000E   0x....             LDR.N    R2,??DataTable3_6
   \   00000010   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   00000014   0x82C8             STRH     R0,[R1, #+22]
    255          }
   \   00000016   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x40048040         DC32     0x40048040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x40009000         DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40008000         DC32     0x40008000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x40021000         DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     count_init

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x4004000C         DC32     0x4004000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     GPIOx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     PORTX

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x4000800C         DC32     0x4000800c
    256          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       24  DMA_PORTx2BUFF_Init
             24 -> enable_irq
       24  DMA_count_Init
             24 -> enable_irq
        0  DMA_count_get
        0  DMA_count_reset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
     354  DMA_PORTx2BUFF_Init
     452  DMA_count_Init
      26  DMA_count_get
      24  DMA_count_reset
      64  count_init

 
  64 bytes in section .bss
 900 bytes in section .text
 
 900 bytes of CODE memory
  64 bytes of DATA memory

Errors: none
Warnings: 2
