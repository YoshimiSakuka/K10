###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        26/May/2016  12:04:50
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\ye\Desktop\NFS.NO 2 - 副本\common\Flash.c
#    Command line =  
#        "C:\Users\ye\Desktop\NFS.NO 2 - 副本\common\Flash.c" -D DEBUG -lCN
#        "C:\Users\ye\Desktop\NFS.NO 2 - 副本\Debug\List\" -lB
#        "C:\Users\ye\Desktop\NFS.NO 2 - 副本\Debug\List\" -o
#        "C:\Users\ye\Desktop\NFS.NO 2 - 副本\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -Ol --use_c++_inline
#    List file    =  C:\Users\ye\Desktop\NFS.NO 2 - 副本\Debug\List\Flash.lst
#    Object file  =  C:\Users\ye\Desktop\NFS.NO 2 - 副本\Debug\Obj\Flash.o
#
###############################################################################

C:\Users\ye\Desktop\NFS.NO 2 - 副本\common\Flash.c
      1          #include "Flash.h"
      2          

   \                                 In section .bss, align 4
      3          u32 LCD_KP = 0;
   \                     LCD_KP:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
      4          u32 LCD_KD = 0;
   \                     LCD_KD:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
      5          u32 LCD_KI = 0;
   \                     LCD_KI:
   \   00000000                      DS8 4
      6          

   \                                 In section .bss, align 4
      7          u32 FlashWrite_flag = 0;
   \                     FlashWrite_flag:
   \   00000000                      DS8 4
      8          
      9          //==========================================================================
     10          //函数名称：flash_cmd_launch
     11          //函数返回：0-成功 1-失败
     12          //参数说明：无
     13          //功能概要：启动Flash命令
     14          //==========================================================================

   \                                 In section .text, align 2, keep-with-next
     15          static u32 flash_cmd_launch(void)
     16          {
     17              
     18              FTFL_FSTAT = (0
     19                        |	FTFL_FSTAT_CCIF_MASK 		// 启动命令
     20                        |	FTFL_FSTAT_ACCERR_MASK 		// 清除访问错误标志位
     21                        | FTFL_FSTAT_FPVIOL_MASK		// 非法访问标志位
     22                        );	
   \                     flash_cmd_launch: (+1)
   \   00000000   0x20B0             MOVS     R0,#+176
   \   00000002   0x....             LDR.N    R1,??DataTable5  ;; 0x40020000
   \   00000004   0x7008             STRB     R0,[R1, #+0]
     23              									
     24              while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF_MASK));	// 等待命令完成
   \                     ??flash_cmd_launch_0: (+1)
   \   00000006   0x....             LDR.N    R0,??DataTable5  ;; 0x40020000
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x0600             LSLS     R0,R0,#+24
   \   0000000C   0xD5FB             BPL.N    ??flash_cmd_launch_0
     25          
     26              // 检查错误标志
     27              if( FTFL_FSTAT & (FTFL_FSTAT_ACCERR_MASK | FTFL_FSTAT_FPVIOL_MASK | FTFL_FSTAT_MGSTAT0_MASK))
   \   0000000E   0x....             LDR.N    R0,??DataTable5  ;; 0x40020000
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2131             MOVS     R1,#+49
   \   00000014   0x4208             TST      R0,R1
   \   00000016   0xD001             BEQ.N    ??flash_cmd_launch_1
     28                  return 1 ; 	//执行命令出错
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0xE000             B.N      ??flash_cmd_launch_2
     29            
     30              return 0; 	//执行命令成功
   \                     ??flash_cmd_launch_1: (+1)
   \   0000001C   0x2000             MOVS     R0,#+0
   \                     ??flash_cmd_launch_2: (+1)
   \   0000001E   0x4770             BX       LR               ;; return
     31          }
     32          //===========================================================================
     33          
     34          //=================外部接口函数==============================================
     35          //==========================================================================
     36          //函数名称：flash_init
     37          //函数返回：无
     38          //参数说明：无
     39          //功能概要：初始化flash模块
     40          //==========================================================================

   \                                 In section .text, align 2, keep-with-next
     41          void flash_init(void)
     42          {
     43          // 清除Flash预读取缓冲区
     44              FMC_PFB0CR |= FMC_PFB0CR_S_B_INV_MASK;
   \                     flash_init: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable5_1  ;; 0x4001f004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000008   0x....             LDR.N    R1,??DataTable5_1  ;; 0x4001f004
   \   0000000A   0x6008             STR      R0,[R1, #+0]
     45              FMC_PFB1CR |= FMC_PFB0CR_S_B_INV_MASK;
   \   0000000C   0x....             LDR.N    R0,??DataTable5_2  ;; 0x4001f008
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \   00000014   0x....             LDR.N    R1,??DataTable5_2  ;; 0x4001f008
   \   00000016   0x6008             STR      R0,[R1, #+0]
     46              
     47              while(!(FTFL_FSTAT & FTFL_FSTAT_CCIF_MASK));// 等待命令完成
   \                     ??flash_init_0: (+1)
   \   00000018   0x....             LDR.N    R0,??DataTable5  ;; 0x40020000
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x0600             LSLS     R0,R0,#+24
   \   0000001E   0xD5FB             BPL.N    ??flash_init_0
     48              
     49              FTFL_FSTAT = (0
     50                            |FTFL_FSTAT_ACCERR_MASK 	// 清除访问错误标志位
     51                            |FTFL_FSTAT_FPVIOL_MASK	// 非法访问标志位
     52                            );	
   \   00000020   0x2030             MOVS     R0,#+48
   \   00000022   0x....             LDR.N    R1,??DataTable5  ;; 0x40020000
   \   00000024   0x7008             STRB     R0,[R1, #+0]
     53          }
   \   00000026   0x4770             BX       LR               ;; return
     54          
     55          //==========================================================================
     56          //函数名称：flash_erase_sector
     57          //函数返回：函数执行执行状态：0=正常；非0=异常。
     58          //参数说明：sectorNo：扇区号（K60N512实际使用0~255）
     59          //功能概要：擦除指定flash扇区
     60          //==========================================================================

   \                                 In section .text, align 2, keep-with-next
     61          uint8 flash_erase_sector(uint16 sectorNo)
     62          {
   \                     flash_erase_sector: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
     63              Dtype	addr;	
     64              addr.DW = (u32)(sectorNo<<11);	
   \   00000006   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000008   0x02E0             LSLS     R0,R4,#+11
   \   0000000A   0x9000             STR      R0,[SP, #+0]
     65              //每个扇区2KB，所以扇区地址=扇区号*2K ，这里用 <<11 表示 *2*1024 
     66              
     67              // 设置擦除命令
     68              FTFL_FCCOB0 = ERSSCR; // 擦除扇区命令
   \   0000000C   0x2009             MOVS     R0,#+9
   \   0000000E   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40020007
   \   00000010   0x7008             STRB     R0,[R1, #+0]
     69              
     70              // 设置目标地址
     71              FTFL_FCCOB1 = addr.BB[2];
   \   00000012   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000016   0x....             LDR.N    R1,??DataTable5_4  ;; 0x40020006
   \   00000018   0x7008             STRB     R0,[R1, #+0]
     72              FTFL_FCCOB2 = addr.BB[1];
   \   0000001A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000001E   0x....             LDR.N    R1,??DataTable5_5  ;; 0x40020005
   \   00000020   0x7008             STRB     R0,[R1, #+0]
     73              FTFL_FCCOB3 = addr.BB[0];
   \   00000022   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000026   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40020004
   \   00000028   0x7008             STRB     R0,[R1, #+0]
     74              
     75              // 执行命令序列
     76              if(1 == flash_cmd_launch())    //若执行命令出现错误
   \   0000002A   0x.... 0x....      BL       flash_cmd_launch
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0xD101             BNE.N    ??flash_erase_sector_0
     77                  return 1;     //擦除命令错误
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0xE021             B.N      ??flash_erase_sector_1
     78             
     79              // 若擦除sector0时，则解锁设备
     80              if(sectorNo ==0)
   \                     ??flash_erase_sector_0: (+1)
   \   00000036   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000038   0x2C00             CMP      R4,#+0
   \   0000003A   0xD11D             BNE.N    ??flash_erase_sector_2
     81              {
     82                  // 写入4字节
     83                  FTFL_FCCOB0 = PGM4; 
   \   0000003C   0x2006             MOVS     R0,#+6
   \   0000003E   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40020007
   \   00000040   0x7008             STRB     R0,[R1, #+0]
     84                  // 设置目标地址
     85                  FTFL_FCCOB1 = 0x00;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x....             LDR.N    R1,??DataTable5_4  ;; 0x40020006
   \   00000046   0x7008             STRB     R0,[R1, #+0]
     86                  FTFL_FCCOB2 = 0x04;
   \   00000048   0x2004             MOVS     R0,#+4
   \   0000004A   0x....             LDR.N    R1,??DataTable5_5  ;; 0x40020005
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
     87                  FTFL_FCCOB3 = 0x0C;
   \   0000004E   0x200C             MOVS     R0,#+12
   \   00000050   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40020004
   \   00000052   0x7008             STRB     R0,[R1, #+0]
     88                  // 数据
     89                  FTFL_FCCOB4 = 0xFF;
   \   00000054   0x20FF             MOVS     R0,#+255
   \   00000056   0x....             LDR.N    R1,??DataTable5_7  ;; 0x4002000b
   \   00000058   0x7008             STRB     R0,[R1, #+0]
     90                  FTFL_FCCOB5 = 0xFF;
   \   0000005A   0x20FF             MOVS     R0,#+255
   \   0000005C   0x....             LDR.N    R1,??DataTable5_8  ;; 0x4002000a
   \   0000005E   0x7008             STRB     R0,[R1, #+0]
     91                  FTFL_FCCOB6 = 0xFF;
   \   00000060   0x20FF             MOVS     R0,#+255
   \   00000062   0x....             LDR.N    R1,??DataTable5_9  ;; 0x40020009
   \   00000064   0x7008             STRB     R0,[R1, #+0]
     92                  FTFL_FCCOB7 = 0xFE;
   \   00000066   0x20FE             MOVS     R0,#+254
   \   00000068   0x....             LDR.N    R1,??DataTable5_10  ;; 0x40020008
   \   0000006A   0x7008             STRB     R0,[R1, #+0]
     93                  // 执行命令序列
     94                  if(1 == flash_cmd_launch())  //若执行命令出现错误
   \   0000006C   0x.... 0x....      BL       flash_cmd_launch
   \   00000070   0x2801             CMP      R0,#+1
   \   00000072   0xD101             BNE.N    ??flash_erase_sector_2
     95                      return 2;   //解锁命令错误
   \   00000074   0x2002             MOVS     R0,#+2
   \   00000076   0xE000             B.N      ??flash_erase_sector_1
     96              }  
     97              
     98              return 0;  //成功返回
   \                     ??flash_erase_sector_2: (+1)
   \   00000078   0x2000             MOVS     R0,#+0
   \                     ??flash_erase_sector_1: (+1)
   \   0000007A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
     99          }
    100          
    101          //==========================================================================
    102          //函数名称：flash_write
    103          //函数返回：函数执行状态：0=正常；非0=异常。
    104          //参数说明：sectorNo：目标扇区号 （K60N512实际使用0~255）
    105          //         offset:写入扇区内部偏移地址（0~2043）
    106          //         data：需要写入的变量（uint32型）
    107          //功能概要：flash写入操作
    108          //==========================================================================

   \                                 In section .text, align 2, keep-with-next
    109          uint8 flash_write(uint16 sectorNo,uint16 offset,u32 data)
    110          {
   \                     flash_write: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    111              Dtype	addr;	
    112              Dtype	Data;
    113          		
    114              addr.DW = (u32)((sectorNo<<11) + offset);//计算地址
   \   00000004   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000006   0x02C0             LSLS     R0,R0,#+11
   \   00000008   0xFA10 0xF081      UXTAH    R0,R0,R1
   \   0000000C   0x9001             STR      R0,[SP, #+4]
    115          	Data.DW	= data;	
   \   0000000E   0x9200             STR      R2,[SP, #+0]
    116          	    
    117              FTFL_FCCOB0 = PGM4;	// 设置写入命令
   \   00000010   0x2006             MOVS     R0,#+6
   \   00000012   0x....             LDR.N    R1,??DataTable5_3  ;; 0x40020007
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    118          
    119              FTFL_FCCOB1 = addr.BB[2];// 设置目标地址
   \   00000016   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   0000001A   0x....             LDR.N    R1,??DataTable5_4  ;; 0x40020006
   \   0000001C   0x7008             STRB     R0,[R1, #+0]
    120              FTFL_FCCOB2 = addr.BB[1];
   \   0000001E   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000022   0x....             LDR.N    R1,??DataTable5_5  ;; 0x40020005
   \   00000024   0x7008             STRB     R0,[R1, #+0]
    121              FTFL_FCCOB3 = addr.BB[0];
   \   00000026   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000002A   0x....             LDR.N    R1,??DataTable5_6  ;; 0x40020004
   \   0000002C   0x7008             STRB     R0,[R1, #+0]
    122          
    123          
    124              FTFL_FCCOB4 = Data.BB[3];// 设置写入数据
   \   0000002E   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000032   0x....             LDR.N    R1,??DataTable5_7  ;; 0x4002000b
   \   00000034   0x7008             STRB     R0,[R1, #+0]
    125              FTFL_FCCOB5 = Data.BB[2];
   \   00000036   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   0000003A   0x....             LDR.N    R1,??DataTable5_8  ;; 0x4002000a
   \   0000003C   0x7008             STRB     R0,[R1, #+0]
    126              FTFL_FCCOB6 = Data.BB[1];
   \   0000003E   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000042   0x....             LDR.N    R1,??DataTable5_9  ;; 0x40020009
   \   00000044   0x7008             STRB     R0,[R1, #+0]
    127              FTFL_FCCOB7 = Data.BB[0];
   \   00000046   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004A   0x....             LDR.N    R1,??DataTable5_10  ;; 0x40020008
   \   0000004C   0x7008             STRB     R0,[R1, #+0]
    128              
    129              if(1 == flash_cmd_launch()) 	
   \   0000004E   0x.... 0x....      BL       flash_cmd_launch
   \   00000052   0x2801             CMP      R0,#+1
   \   00000054   0xD101             BNE.N    ??flash_write_0
    130                return 2;  //写入命令错误
   \   00000056   0x2002             MOVS     R0,#+2
   \   00000058   0xE000             B.N      ??flash_write_1
    131          
    132              return 0;  //成功执行
   \                     ??flash_write_0: (+1)
   \   0000005A   0x2000             MOVS     R0,#+0
   \                     ??flash_write_1: (+1)
   \   0000005C   0xBD0E             POP      {R1-R3,PC}       ;; return
    133          }
    134          
    135          

   \                                 In section .text, align 2, keep-with-next
    136          void InitFlashLcd(void) 
    137          {
   \                     InitFlashLcd: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    138            flash_init();
   \   00000002   0x.... 0x....      BL       flash_init
    139            FlashWrite_flag = flash_read(SecNum1,0,u32);
   \   00000006   0xF45F 0x307E      MOVS     R0,#+260096
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x....             LDR.N    R1,??DataTable5_11
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    140            if(FlashWrite_flag!=0xffffffff)//flash若全部清除，则不读取flash，变量使用程序本身的变量值
   \   00000010   0x....             LDR.N    R0,??DataTable5_11
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF110 0x0F01      CMN      R0,#+1
   \   00000018   0xD048             BEQ.N    ??InitFlashLcd_0
    141            {
    142              SpeedWant = flash_read(SecNum1,0,u32);
   \   0000001A   0xF45F 0x307E      MOVS     R0,#+260096
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x....             LDR.N    R1,??DataTable5_12
   \   00000022   0x6008             STR      R0,[R1, #+0]
    143              Speed_Kp = flash_read(SecNum1,32,u32);
   \   00000024   0x....             LDR.N    R0,??DataTable5_13  ;; 0x3f820
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x....             LDR.N    R1,??DataTable5_14
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    144              Speed_Ki = flash_read(SecNum1,64,u32);
   \   0000002C   0x....             LDR.N    R0,??DataTable5_15  ;; 0x3f840
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0x....             LDR.N    R1,??DataTable5_16
   \   00000032   0x6008             STR      R0,[R1, #+0]
    145              angleoffset = flash_read(SecNum1,96,u32);
   \   00000034   0x....             LDR.N    R0,??DataTable5_17  ;; 0x3f860
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x.... 0x....      BL       __aeabi_ui2f
   \   0000003C   0x....             LDR.N    R1,??DataTable5_18
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    146              D_P = flash_read(SecNum1,128,u32);
   \   00000040   0x....             LDR.N    R0,??DataTable5_19  ;; 0x3f880
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0x.... 0x....      BL       __aeabi_ui2f
   \   00000048   0x....             LDR.N    R1,??DataTable5_20
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    147              D_D = flash_read(SecNum1,160,u32);
   \   0000004C   0x....             LDR.N    R0,??DataTable5_21  ;; 0x3f8a0
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x.... 0x....      BL       __aeabi_ui2f
   \   00000054   0x....             LDR.N    R1,??DataTable5_22
   \   00000056   0x6008             STR      R0,[R1, #+0]
    148              SpecialPWM= flash_read(SecNum1,192,u32);
   \   00000058   0x....             LDR.N    R0,??DataTable5_23  ;; 0x3f8c0
   \   0000005A   0x6800             LDR      R0,[R0, #+0]
   \   0000005C   0x....             LDR.N    R1,??DataTable5_24
   \   0000005E   0x6008             STR      R0,[R1, #+0]
    149              weight_Max = flash_read(SecNum1,224,u32);
   \   00000060   0x....             LDR.N    R0,??DataTable5_25  ;; 0x3f8e0
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x....             LDR.N    R1,??DataTable5_26
   \   00000066   0x6008             STR      R0,[R1, #+0]
    150              weight_Min = flash_read(SecNum1,256,u32);
   \   00000068   0x....             LDR.N    R0,??DataTable5_27  ;; 0x3f900
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0x....             LDR.N    R1,??DataTable5_28
   \   0000006E   0x6008             STR      R0,[R1, #+0]
    151              Ka = flash_read(SecNum1,288,u32);
   \   00000070   0x....             LDR.N    R0,??DataTable5_29  ;; 0x3f920
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x....             LDR.N    R1,??DataTable5_30
   \   00000076   0x6008             STR      R0,[R1, #+0]
    152              Midline = flash_read(SecNum1,320,u32);
   \   00000078   0x....             LDR.N    R0,??DataTable5_31  ;; 0x3f940
   \   0000007A   0x6800             LDR      R0,[R0, #+0]
   \   0000007C   0x....             LDR.N    R1,??DataTable5_32
   \   0000007E   0x6008             STR      R0,[R1, #+0]
    153              Stoptime = flash_read(SecNum1,352,u32);
   \   00000080   0x....             LDR.N    R0,??DataTable5_33  ;; 0x3f960
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x....             LDR.N    R1,??DataTable5_34
   \   00000086   0x6008             STR      R0,[R1, #+0]
    154              Angle_Kp = flash_read(SecNum1,384,u32);
   \   00000088   0x....             LDR.N    R0,??DataTable5_35  ;; 0x3f980
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0x....             LDR.N    R1,??DataTable5_36
   \   0000008E   0x6008             STR      R0,[R1, #+0]
    155              Angle_Kd = flash_read(SecNum1,416,u32);
   \   00000090   0x....             LDR.N    R0,??DataTable5_37  ;; 0x3f9a0
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0x....             LDR.N    R1,??DataTable5_38
   \   00000096   0x6008             STR      R0,[R1, #+0]
    156              D_I = flash_read(SecNum1,448,u32);
   \   00000098   0x....             LDR.N    R0,??DataTable5_39  ;; 0x3f9c0
   \   0000009A   0x6800             LDR      R0,[R0, #+0]
   \   0000009C   0x.... 0x....      BL       __aeabi_ui2f
   \   000000A0   0x....             LDR.N    R1,??DataTable5_40
   \   000000A2   0x6008             STR      R0,[R1, #+0]
    157              Speed_Kd = flash_read(SecNum1,480,u32);
   \   000000A4   0x....             LDR.N    R0,??DataTable5_41  ;; 0x3f9e0
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0x....             LDR.N    R1,??DataTable5_42
   \   000000AA   0x6008             STR      R0,[R1, #+0]
    158              
    159            }
    160             
    161          
    162          }
   \                     ??InitFlashLcd_0: (+1)
   \   000000AC   0xBD01             POP      {R0,PC}          ;; return
    163          
    164          

   \                                 In section .text, align 2, keep-with-next
    165          void FlashSetPara(void)
    166          {
   \                     FlashSetPara: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    167            
    168            
    169          //  Speed_Kp=0;
    170          //  Speed_Kp=0;
    171          //  Speed_Ki=0;
    172          //  Speed_Kd=0;
    173          //  Turn_Kp=0;
    174          //  Turn_Kd=0;
    175          //  weight_Max=0;
    176          //  weight_Min=0;
    177          //  SpeedWant=0;
    178          //  Angle_Kp=0;
    179          //  Angle_Kd=0;
    180          //  Turn_Kp_cir=0;
    181          //  SpecialPWML=0;
    182          //  Stoptime=0;
    183          //  specialfield=0;
    184          // SpecialPWMR=0;
    185          // Turn_Max=0;
    186            //angleoffset=0; 
    187          
    188            
    189            flash_erase_sector(SecNum1);//清除扇区
   \   00000002   0x207F             MOVS     R0,#+127
   \   00000004   0x.... 0x....      BL       flash_erase_sector
    190            flash_write(SecNum1,0,SpeedWant);      
   \   00000008   0x....             LDR.N    R0,??DataTable5_12
   \   0000000A   0x6802             LDR      R2,[R0, #+0]
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x207F             MOVS     R0,#+127
   \   00000010   0x.... 0x....      BL       flash_write
    191            flash_write(SecNum1,32,Speed_Kp);
   \   00000014   0x....             LDR.N    R0,??DataTable5_14
   \   00000016   0x6802             LDR      R2,[R0, #+0]
   \   00000018   0x2120             MOVS     R1,#+32
   \   0000001A   0x207F             MOVS     R0,#+127
   \   0000001C   0x.... 0x....      BL       flash_write
    192            flash_write(SecNum1,64,Speed_Ki);
   \   00000020   0x....             LDR.N    R0,??DataTable5_16
   \   00000022   0x6802             LDR      R2,[R0, #+0]
   \   00000024   0x2140             MOVS     R1,#+64
   \   00000026   0x207F             MOVS     R0,#+127
   \   00000028   0x.... 0x....      BL       flash_write
    193            flash_write(SecNum1,480,Speed_Kd);
   \   0000002C   0x....             LDR.N    R0,??DataTable5_42
   \   0000002E   0x6802             LDR      R2,[R0, #+0]
   \   00000030   0xF44F 0x71F0      MOV      R1,#+480
   \   00000034   0x207F             MOVS     R0,#+127
   \   00000036   0x.... 0x....      BL       flash_write
    194            flash_write(SecNum1,128,D_P);
   \   0000003A   0x....             LDR.N    R0,??DataTable5_20
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0x.... 0x....      BL       __aeabi_f2uiz
   \   00000042   0x0002             MOVS     R2,R0
   \   00000044   0x2180             MOVS     R1,#+128
   \   00000046   0x207F             MOVS     R0,#+127
   \   00000048   0x.... 0x....      BL       flash_write
    195            flash_write(SecNum1,448,D_I); 
   \   0000004C   0x....             LDR.N    R0,??DataTable5_40
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x.... 0x....      BL       __aeabi_f2uiz
   \   00000054   0x0002             MOVS     R2,R0
   \   00000056   0xF44F 0x71E0      MOV      R1,#+448
   \   0000005A   0x207F             MOVS     R0,#+127
   \   0000005C   0x.... 0x....      BL       flash_write
    196            flash_write(SecNum1,160,D_D);
   \   00000060   0x....             LDR.N    R0,??DataTable5_22
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0x.... 0x....      BL       __aeabi_f2uiz
   \   00000068   0x0002             MOVS     R2,R0
   \   0000006A   0x21A0             MOVS     R1,#+160
   \   0000006C   0x207F             MOVS     R0,#+127
   \   0000006E   0x.... 0x....      BL       flash_write
    197            flash_write(SecNum1,320,Midline);
   \   00000072   0x....             LDR.N    R0,??DataTable5_32
   \   00000074   0x6802             LDR      R2,[R0, #+0]
   \   00000076   0xF44F 0x71A0      MOV      R1,#+320
   \   0000007A   0x207F             MOVS     R0,#+127
   \   0000007C   0x.... 0x....      BL       flash_write
    198            flash_write(SecNum1,96,angleoffset);
   \   00000080   0x....             LDR.N    R0,??DataTable5_18
   \   00000082   0x6800             LDR      R0,[R0, #+0]
   \   00000084   0x.... 0x....      BL       __aeabi_f2uiz
   \   00000088   0x0002             MOVS     R2,R0
   \   0000008A   0x2160             MOVS     R1,#+96
   \   0000008C   0x207F             MOVS     R0,#+127
   \   0000008E   0x.... 0x....      BL       flash_write
    199            flash_write(SecNum1,384,Angle_Kp);
   \   00000092   0x....             LDR.N    R0,??DataTable5_36
   \   00000094   0x6802             LDR      R2,[R0, #+0]
   \   00000096   0xF44F 0x71C0      MOV      R1,#+384
   \   0000009A   0x207F             MOVS     R0,#+127
   \   0000009C   0x.... 0x....      BL       flash_write
    200            flash_write(SecNum1,416,Angle_Kd);
   \   000000A0   0x....             LDR.N    R0,??DataTable5_38
   \   000000A2   0x6802             LDR      R2,[R0, #+0]
   \   000000A4   0xF44F 0x71D0      MOV      R1,#+416
   \   000000A8   0x207F             MOVS     R0,#+127
   \   000000AA   0x.... 0x....      BL       flash_write
    201            flash_write(SecNum1,224,weight_Max);
   \   000000AE   0x....             LDR.N    R0,??DataTable5_26
   \   000000B0   0x6802             LDR      R2,[R0, #+0]
   \   000000B2   0x21E0             MOVS     R1,#+224
   \   000000B4   0x207F             MOVS     R0,#+127
   \   000000B6   0x.... 0x....      BL       flash_write
    202            flash_write(SecNum1,256,weight_Min);
   \   000000BA   0x....             LDR.N    R0,??DataTable5_28
   \   000000BC   0x6802             LDR      R2,[R0, #+0]
   \   000000BE   0xF44F 0x7180      MOV      R1,#+256
   \   000000C2   0x207F             MOVS     R0,#+127
   \   000000C4   0x.... 0x....      BL       flash_write
    203            flash_write(SecNum1,192,SpecialPWM);
   \   000000C8   0x....             LDR.N    R0,??DataTable5_24
   \   000000CA   0x6802             LDR      R2,[R0, #+0]
   \   000000CC   0x21C0             MOVS     R1,#+192
   \   000000CE   0x207F             MOVS     R0,#+127
   \   000000D0   0x.... 0x....      BL       flash_write
    204            flash_write(SecNum1,352,Stoptime);
   \   000000D4   0x....             LDR.N    R0,??DataTable5_34
   \   000000D6   0x6802             LDR      R2,[R0, #+0]
   \   000000D8   0xF44F 0x71B0      MOV      R1,#+352
   \   000000DC   0x207F             MOVS     R0,#+127
   \   000000DE   0x.... 0x....      BL       flash_write
    205            flash_write(SecNum1,288,Ka);
   \   000000E2   0x....             LDR.N    R0,??DataTable5_30
   \   000000E4   0x6802             LDR      R2,[R0, #+0]
   \   000000E6   0xF44F 0x7190      MOV      R1,#+288
   \   000000EA   0x207F             MOVS     R0,#+127
   \   000000EC   0x.... 0x....      BL       flash_write
    206            
    207            
    208          } 
   \   000000F0   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x40020000         DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x4001F004         DC32     0x4001f004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x4001F008         DC32     0x4001f008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x40020007         DC32     0x40020007

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x40020006         DC32     0x40020006

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x40020005         DC32     0x40020005

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_6:
   \   00000000   0x40020004         DC32     0x40020004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_7:
   \   00000000   0x4002000B         DC32     0x4002000b

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_8:
   \   00000000   0x4002000A         DC32     0x4002000a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_9:
   \   00000000   0x40020009         DC32     0x40020009

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_10:
   \   00000000   0x40020008         DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_11:
   \   00000000   0x........         DC32     FlashWrite_flag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_12:
   \   00000000   0x........         DC32     SpeedWant

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_13:
   \   00000000   0x0003F820         DC32     0x3f820

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_14:
   \   00000000   0x........         DC32     Speed_Kp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_15:
   \   00000000   0x0003F840         DC32     0x3f840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_16:
   \   00000000   0x........         DC32     Speed_Ki

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_17:
   \   00000000   0x0003F860         DC32     0x3f860

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_18:
   \   00000000   0x........         DC32     angleoffset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_19:
   \   00000000   0x0003F880         DC32     0x3f880

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_20:
   \   00000000   0x........         DC32     D_P

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_21:
   \   00000000   0x0003F8A0         DC32     0x3f8a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_22:
   \   00000000   0x........         DC32     D_D

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_23:
   \   00000000   0x0003F8C0         DC32     0x3f8c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_24:
   \   00000000   0x........         DC32     SpecialPWM

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_25:
   \   00000000   0x0003F8E0         DC32     0x3f8e0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_26:
   \   00000000   0x........         DC32     weight_Max

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_27:
   \   00000000   0x0003F900         DC32     0x3f900

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_28:
   \   00000000   0x........         DC32     weight_Min

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_29:
   \   00000000   0x0003F920         DC32     0x3f920

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_30:
   \   00000000   0x........         DC32     Ka

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_31:
   \   00000000   0x0003F940         DC32     0x3f940

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_32:
   \   00000000   0x........         DC32     Midline

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_33:
   \   00000000   0x0003F960         DC32     0x3f960

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_34:
   \   00000000   0x........         DC32     Stoptime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_35:
   \   00000000   0x0003F980         DC32     0x3f980

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_36:
   \   00000000   0x........         DC32     Angle_Kp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_37:
   \   00000000   0x0003F9A0         DC32     0x3f9a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_38:
   \   00000000   0x........         DC32     Angle_Kd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_39:
   \   00000000   0x0003F9C0         DC32     0x3f9c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_40:
   \   00000000   0x........         DC32     D_I

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_41:
   \   00000000   0x0003F9E0         DC32     0x3f9e0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_42:
   \   00000000   0x........         DC32     Speed_Kd

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   FlashSetPara
         8   -> __aeabi_f2uiz
         8   -> flash_erase_sector
         8   -> flash_write
       8   InitFlashLcd
         8   -> __aeabi_ui2f
         8   -> flash_init
       0   flash_cmd_launch
      16   flash_erase_sector
        16   -> flash_cmd_launch
       0   flash_init
      16   flash_write
        16   -> flash_cmd_launch


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_10
       4  ??DataTable5_11
       4  ??DataTable5_12
       4  ??DataTable5_13
       4  ??DataTable5_14
       4  ??DataTable5_15
       4  ??DataTable5_16
       4  ??DataTable5_17
       4  ??DataTable5_18
       4  ??DataTable5_19
       4  ??DataTable5_2
       4  ??DataTable5_20
       4  ??DataTable5_21
       4  ??DataTable5_22
       4  ??DataTable5_23
       4  ??DataTable5_24
       4  ??DataTable5_25
       4  ??DataTable5_26
       4  ??DataTable5_27
       4  ??DataTable5_28
       4  ??DataTable5_29
       4  ??DataTable5_3
       4  ??DataTable5_30
       4  ??DataTable5_31
       4  ??DataTable5_32
       4  ??DataTable5_33
       4  ??DataTable5_34
       4  ??DataTable5_35
       4  ??DataTable5_36
       4  ??DataTable5_37
       4  ??DataTable5_38
       4  ??DataTable5_39
       4  ??DataTable5_4
       4  ??DataTable5_40
       4  ??DataTable5_41
       4  ??DataTable5_42
       4  ??DataTable5_5
       4  ??DataTable5_6
       4  ??DataTable5_7
       4  ??DataTable5_8
       4  ??DataTable5_9
     242  FlashSetPara
       4  FlashWrite_flag
     174  InitFlashLcd
       4  LCD_KD
       4  LCD_KI
       4  LCD_KP
      32  flash_cmd_launch
     124  flash_erase_sector
      40  flash_init
      94  flash_write

 
  16 bytes in section .bss
 878 bytes in section .text
 
 878 bytes of CODE memory
  16 bytes of DATA memory

Errors: none
Warnings: 4
