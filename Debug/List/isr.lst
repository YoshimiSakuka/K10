###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        07/Jun/2016  22:55:13
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\yu2ho\Desktop\K10\common\isr.c
#    Command line =  
#        C:\Users\yu2ho\Desktop\K10\common\isr.c -D DEBUG -lCN
#        C:\Users\yu2ho\Desktop\K10\Debug\List\ -lB
#        C:\Users\yu2ho\Desktop\K10\Debug\List\ -o
#        C:\Users\yu2ho\Desktop\K10\Debug\Obj\ --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "E:\Program Files\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -Ol --use_c++_inline
#    List file    =  C:\Users\yu2ho\Desktop\K10\Debug\List\isr.lst
#    Object file  =  C:\Users\yu2ho\Desktop\K10\Debug\Obj\isr.o
#
###############################################################################

C:\Users\yu2ho\Desktop\K10\common\isr.c
      1          #include "isr.h"
      2          #include "..\K60_datatype.h"
      3          #include "math.h"
      4          
      5          
      6          
      7          /***********************************ISR中变量************************/

   \                                 In section .bss, align 4
      8          u8 SensorState[5] = {0};
   \                     SensorState:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
      9          u8 SensorStateCnt[5] = {0};
   \                     SensorStateCnt:
   \   00000000                      DS8 8

   \                                 In section .data, align 1
     10          u8 sensorcntmax=78;
   \                     sensorcntmax:
   \   00000000   0x4E               DC8 78

   \                                 In section .bss, align 1
     11          u8 StandFlag = 0;
   \                     StandFlag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     12          int Startflag=0;
   \                     Startflag:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     13          int cnT;
   \                     cnT:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     14          int counta = 0;
   \                     counta:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     15          int cnta = 0,fangxiang1 = 0,fangxiang2 = 0;
   \                     cnta:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     fangxiang1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     fangxiang2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     16          int VSYNC_STA = 0;
   \                     VSYNC_STA:
   \   00000000                      DS8 4
     17          int q;

   \                                 In section .bss, align 4
     18          u32 p,m;
   \                     p:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     m:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     19          u32 FieldCnt = 0;                    //场计数器 暂时只计到2 未定义全局变量
   \                     FieldCnt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
     20          u8 _v = 0,_h = 0;                   //调试用计数器
   \                     _v:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
   \                     _h:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     21          int Real_LineCnt = 0;               //行中断计数器
   \                     Real_LineCnt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     22          int ProcessLinePtr = 0;             //行采样计数器
   \                     ProcessLinePtr:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     23          u8 PicLine[160];                    //单行图像
   \                     PicLine:
   \   00000000                      DS8 160

   \                                 In section .bss, align 1
     24          u8 LineReadOverFlag = 0;
   \                     LineReadOverFlag:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     25          int renzi_cnt;
   \                     renzi_cnt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     26          int renziq_cnt;
   \                     renziq_cnt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     27          int direct_gyroscope=0;
   \                     direct_gyroscope:
   \   00000000                      DS8 4
     28          //int ProssessLineSto[72 ] = {91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233};
     29          //int ProssessLineSto[72] = {60,63,66,69,72,75,78,81,84,87,90,93,96,99,102,105,108,111,114,117,120,123,126,129,132,135,138,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231,234,237,240,243,246,249,252,255,258,261,264,267,270,273};

   \                                 In section .data, align 4
     30          int ProssessLineSto[36] = {70,80,89,97,104,110,116,122,128,134,140,146,152,158,164,169,174,179,184,189,194,199,204,209,214,219,223,227,231,235,239,243,247,251,255,259};
   \                     ProssessLineSto:
   \   00000000   0x00000046         DC32 70, 80, 89, 97, 104, 110, 116, 122, 128, 134, 140, 146, 152, 158
   \              0x00000050   
   \              0x00000059   
   \              0x00000061   
   \              0x00000068   
   \              0x0000006E   
   \              0x00000074   
   \              0x0000007A   
   \              0x00000080   
   \              0x00000086   
   \              0x0000008C   
   \              0x00000092   
   \              0x00000098   
   \              0x0000009E   
   \   00000038   0x000000A4         DC32 164, 169, 174, 179, 184, 189, 194, 199, 204, 209, 214, 219, 223
   \              0x000000A9   
   \              0x000000AE   
   \              0x000000B3   
   \              0x000000B8   
   \              0x000000BD   
   \              0x000000C2   
   \              0x000000C7   
   \              0x000000CC   
   \              0x000000D1   
   \              0x000000D6   
   \              0x000000DB   
   \              0x000000DF   
   \   0000006C   0x000000E3         DC32 227, 231, 235, 239, 243, 247, 251, 255, 259
   \              0x000000E7   
   \              0x000000EB   
   \              0x000000EF   
   \              0x000000F3   
   \              0x000000F7   
   \              0x000000FB   
   \              0x000000FF   
   \              0x00000103   
     31          /************************************ISR中断函数********************/

   \                                 In section .text, align 2, keep-with-next
     32          void UART1_ISR(void)
     33          {
     34          }
   \                     UART1_ISR: (+1)
   \   00000000   0x4770             BX       LR               ;; return
     35          

   \                                 In section .text, align 2, keep-with-next
     36          void DMA_CH0_Handle(void)           //DMA通道0采集一次处理Error[Li005]: no definition for "GPIO_PIN" [referenced from C:\Users\Administrator\Desktop\3.11换结构BLOCK nd  black\Debug\Obj\Oled.o] 
     37          
     38          {
     39           
     40          }
   \                     DMA_CH0_Handle: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
     41          int q, dir,bitnum;
   \                     dir:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     42          long irtime;
   \                     irtime:
   \   00000000                      DS8 4
     43          
     44          
     45          
     46          
     47          

   \                                 In section .bss, align 4
     48           int now;
   \                     now:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     49          int last;
   \                     last:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     50           int DTflag;
   \                     DTflag:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     51          int DTstate;
   \                     DTstate:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     52          long DTcnt;
   \                     DTcnt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     53          long DTcntsum;
   \                     DTcntsum:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     54          long L_DTcntsum;
   \                     L_DTcntsum:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     55          long DTlost;
   \                     DTlost:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     56          int DTreceive;
   \                     DTreceive:
   \   00000000                      DS8 4
     57          
     58          
     59           
     60           
     61           
     62          
     63           
     64          
     65           
     66           
     67          
     68           
     69           
     70           
     71            
     72           
     73           
     74           
     75          
     76           
     77           
     78           
     79           
     80          
     81          
     82          
     83          
     84          
     85          

   \                                 In section .text, align 2, keep-with-next
     86          void FTM0_ISR(void)
     87          {
     88           
     89           
     90           
     91           
     92           FTM0_STATUS = 0X00;
   \                     FTM0_ISR: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable10  ;; 0x40038050
   \   00000004   0x6008             STR      R0,[R1, #+0]
     93          }
   \   00000006   0x4770             BX       LR               ;; return
     94          
     95          

   \                                 In section .text, align 2, keep-with-next
     96          void FTM1_ISR(void)
     97          {
     98           
     99           
    100           
    101           FTM1_STATUS = 0X00;
   \                     FTM1_ISR: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable10_1  ;; 0x40039050
   \   00000004   0x6008             STR      R0,[R1, #+0]
    102          }
   \   00000006   0x4770             BX       LR               ;; return
    103          
    104          

   \                                 In section .text, align 2, keep-with-next
    105          void FTM2_ISR(void)
    106          {
    107           
    108          }
   \                     FTM2_ISR: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    109          
    110          

   \                                 In section .bss, align 4
    111          int q;
   \                     q:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    112          int R_Motor_Speed;
   \                     R_Motor_Speed:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
    113          void PIT0_ISR(void)
    114          {
    115            
    116            
    117            
    118          irtime++;
   \                     PIT0_ISR: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10_2
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x1C40             ADDS     R0,R0,#+1
   \   00000006   0x....             LDR.N    R1,??DataTable10_2
   \   00000008   0x6008             STR      R0,[R1, #+0]
    119          
    120          CLR_PIT0;
   \   0000000A   0x....             LDR.N    R0,??DataTable10_3  ;; 0x4003710c
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000012   0x....             LDR.N    R1,??DataTable10_3  ;; 0x4003710c
   \   00000014   0x6008             STR      R0,[R1, #+0]
    121          }
   \   00000016   0x4770             BX       LR               ;; return
    122          

   \                                 In section .bss, align 2
    123           uint16 data;
   \                     `data`:
   \   00000000                      DS8 2

   \                                 In section .text, align 2, keep-with-next
    124          void PIT1_ISR(void)
    125          {
    126           //data = lptmr_pulse_get();
    127          //R_Motor_Speed=QUADRead_L();
    128            FTM1_CNT=0;
   \                     PIT1_ISR: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable10_4  ;; 0x40039004
   \   00000004   0x6008             STR      R0,[R1, #+0]
    129           CLR_PIT1;
   \   00000006   0x....             LDR.N    R0,??DataTable10_5  ;; 0x4003711c
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000000E   0x....             LDR.N    R1,??DataTable10_5  ;; 0x4003711c
   \   00000010   0x6008             STR      R0,[R1, #+0]
    130          }
   \   00000012   0x4770             BX       LR               ;; return
    131          
    132          

   \                                 In section .text, align 2, keep-with-next
    133          void PIT2_ISR(void)
    134          {
    135           CLR_PIT2;
   \                     PIT2_ISR: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10_6  ;; 0x4003712c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000008   0x....             LDR.N    R1,??DataTable10_6  ;; 0x4003712c
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    136          }
   \   0000000C   0x4770             BX       LR               ;; return
    137          
    138          

   \                                 In section .text, align 2, keep-with-next
    139          void PIT3_ISR(void)
    140          {
    141           CLR_PIT3;
   \                     PIT3_ISR: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10_7  ;; 0x4003713c
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000008   0x....             LDR.N    R1,??DataTable10_7  ;; 0x4003713c
   \   0000000A   0x6008             STR      R0,[R1, #+0]
    142          }
   \   0000000C   0x4770             BX       LR               ;; return
    143          
    144          
    145          
    146          
    147          
    148          
    149          
    150          
    151          

   \                                 In section .text, align 2, keep-with-next
    152          void Porta_Isr(void)
    153          {
    154           
    155           if(PORTA_ISFR & (1<<24))          //行中断
   \                     Porta_Isr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10_8  ;; 0x400490a0
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x01C0             LSLS     R0,R0,#+7
   \   00000006   0xD505             BPL.N    ??Porta_Isr_0
    156           {
    157            PORTA_ISFR |= (1<<24);       //清中断
   \   00000008   0x....             LDR.N    R0,??DataTable10_8  ;; 0x400490a0
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   00000010   0x....             LDR.N    R1,??DataTable10_8  ;; 0x400490a0
   \   00000012   0x6008             STR      R0,[R1, #+0]
    158           }
    159          }
   \                     ??Porta_Isr_0: (+1)
   \   00000014   0x4770             BX       LR               ;; return
    160          
    161          

   \                                 In section .text, align 2, keep-with-next
    162          void Portb_Isr(void)
    163          {
    164           if(PORTB_ISFR & (1<<23))         //场中断
   \                     Portb_Isr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10_9  ;; 0x4004a0a0
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0200             LSLS     R0,R0,#+8
   \   00000006   0xD505             BPL.N    ??Portb_Isr_0
    165           {
    166            
    167            PORTB_PCR23|=PORT_PCR_ISF_MASK;//清除中断标志
   \   00000008   0x....             LDR.N    R0,??DataTable10_10  ;; 0x4004a05c
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x7080      ORRS     R0,R0,#0x1000000
   \   00000010   0x....             LDR.N    R1,??DataTable10_10  ;; 0x4004a05c
   \   00000012   0x6008             STR      R0,[R1, #+0]
    168            
    169            
    170           }
    171           
    172          }
   \                     ??Portb_Isr_0: (+1)
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
    173          int bitnum;
   \                     bitnum:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    174          int u = 0,irreceiveok=0;
   \                     u:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     irreceiveok:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    175          char irdata[33];
   \                     irdata:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
    176          int sby_flag=0;
   \                     sby_flag:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    177          long fir_time;
   \                     fir_time:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    178          long sec_time;
   \                     sec_time:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    179          long  true_time;
   \                     true_time:
   \   00000000                      DS8 4
    180          
    181          

   \                                 In section .text, align 2, keep-with-next
    182          void Portc_Isr(void)
    183          {
    184           
    185           if(PORTC_ISFR & (1<<14))                       //行中断
   \                     Portc_Isr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10_11  ;; 0x4004b0a0
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x0440             LSLS     R0,R0,#+17
   \   00000006   0xD521             BPL.N    ??Portc_Isr_0
    186           { 
    187          //   bitnum++;
    188                  if(irtime>40)
   \   00000008   0x....             LDR.N    R0,??DataTable10_2
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2829             CMP      R0,#+41
   \   0000000E   0xDB02             BLT.N    ??Portc_Isr_1
    189               {
    190                bitnum=0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x....             LDR.N    R1,??DataTable10_12
   \   00000014   0x6008             STR      R0,[R1, #+0]
    191               }
    192            irdata[bitnum]=irtime;
   \                     ??Portc_Isr_1: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable10_2
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x....             LDR.N    R1,??DataTable10_13
   \   0000001C   0x....             LDR.N    R2,??DataTable10_12
   \   0000001E   0x6812             LDR      R2,[R2, #+0]
   \   00000020   0x5450             STRB     R0,[R2, R1]
    193             irtime=0;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x....             LDR.N    R1,??DataTable10_2
   \   00000026   0x6008             STR      R0,[R1, #+0]
    194             bitnum++;
   \   00000028   0x....             LDR.N    R0,??DataTable10_12
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x....             LDR.N    R1,??DataTable10_12
   \   00000030   0x6008             STR      R0,[R1, #+0]
    195            if(bitnum==33)
   \   00000032   0x....             LDR.N    R0,??DataTable10_12
   \   00000034   0x6800             LDR      R0,[R0, #+0]
   \   00000036   0x2821             CMP      R0,#+33
   \   00000038   0xD102             BNE.N    ??Portc_Isr_2
    196           {
    197          //  bitnum=0;
    198              irreceiveok=1;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x....             LDR.N    R1,??DataTable10_14
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    199            }
    200          
    201             
    202               PORTC_ISFR |= (1<<14);       //清中断
   \                     ??Portc_Isr_2: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable10_11  ;; 0x4004b0a0
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF450 0x4080      ORRS     R0,R0,#0x4000
   \   00000048   0x....             LDR.N    R1,??DataTable10_11  ;; 0x4004b0a0
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    203             
    204           // PORTC_PCR14|=PORT_PCR_ISF_MASK;//清除中断标志位
    205          
    206          }
    207          
    208          
    209          }
   \                     ??Portc_Isr_0: (+1)
   \   0000004C   0x4770             BX       LR               ;; return
    210          

   \                                 In section .text, align 2, keep-with-next
    211          void Portd_Isr(void)
    212          {
    213           if(PORTD_ISFR & (1<<0))
   \                     Portd_Isr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10_15  ;; 0x4004c0a0
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x07C0             LSLS     R0,R0,#+31
   \   00000006   0xD505             BPL.N    ??Portd_Isr_0
    214           {
    215            PORTD_ISFR |= (1<<0);
   \   00000008   0x....             LDR.N    R0,??DataTable10_15  ;; 0x4004c0a0
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable10_15  ;; 0x4004c0a0
   \   00000012   0x6008             STR      R0,[R1, #+0]
    216           }
    217          }
   \                     ??Portd_Isr_0: (+1)
   \   00000014   0x4770             BX       LR               ;; return
    218          
    219          

   \                                 In section .text, align 2, keep-with-next
    220          void Porte_Isr(void)
    221          {
    222           if(PORTE_ISFR & (1<<0))
   \                     Porte_Isr: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable10_16  ;; 0x4004d0a0
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x07C0             LSLS     R0,R0,#+31
   \   00000006   0xD505             BPL.N    ??Porte_Isr_0
    223           {
    224            PORTE_ISFR |= (1<<0);
   \   00000008   0x....             LDR.N    R0,??DataTable10_16  ;; 0x4004d0a0
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000010   0x....             LDR.N    R1,??DataTable10_16  ;; 0x4004d0a0
   \   00000012   0x6008             STR      R0,[R1, #+0]
    225           }
    226          }
   \                     ??Porte_Isr_0: (+1)
   \   00000014   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x40038050         DC32     0x40038050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x40039050         DC32     0x40039050

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x........         DC32     irtime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x4003710C         DC32     0x4003710c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x40039004         DC32     0x40039004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x4003711C         DC32     0x4003711c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x4003712C         DC32     0x4003712c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x4003713C         DC32     0x4003713c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x400490A0         DC32     0x400490a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x4004A0A0         DC32     0x4004a0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x4004A05C         DC32     0x4004a05c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x4004B0A0         DC32     0x4004b0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x........         DC32     bitnum

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x........         DC32     irdata

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x........         DC32     irreceiveok

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x4004C0A0         DC32     0x4004c0a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x4004D0A0         DC32     0x4004d0a0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   DMA_CH0_Handle
       0   FTM0_ISR
       0   FTM1_ISR
       0   FTM2_ISR
       0   PIT0_ISR
       0   PIT1_ISR
       0   PIT2_ISR
       0   PIT3_ISR
       0   Porta_Isr
       0   Portb_Isr
       0   Portc_Isr
       0   Portd_Isr
       0   Porte_Isr
       0   UART1_ISR


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       2  DMA_CH0_Handle
       4  DTcnt
       4  DTcntsum
       4  DTflag
       4  DTlost
       4  DTreceive
       4  DTstate
       8  FTM0_ISR
       8  FTM1_ISR
       2  FTM2_ISR
       4  FieldCnt
       4  L_DTcntsum
       1  LineReadOverFlag
      24  PIT0_ISR
      20  PIT1_ISR
      14  PIT2_ISR
      14  PIT3_ISR
     160  PicLine
      22  Porta_Isr
      22  Portb_Isr
      78  Portc_Isr
      22  Portd_Isr
      22  Porte_Isr
       4  ProcessLinePtr
     144  ProssessLineSto
       4  R_Motor_Speed
       4  Real_LineCnt
       8  SensorState
       8  SensorStateCnt
       1  StandFlag
       4  Startflag
       2  UART1_ISR
       4  VSYNC_STA
       1  _h
       1  _v
       4  bitnum
       4  cnT
       4  cnta
       4  counta
       2  data
       4  dir
       4  direct_gyroscope
       4  fangxiang1
       4  fangxiang2
       4  fir_time
      36  irdata
       4  irreceiveok
       4  irtime
       4  last
       4  m
       4  now
       4  p
       4  q
       4  renzi_cnt
       4  renziq_cnt
       4  sby_flag
       4  sec_time
       1  sensorcntmax
       4  true_time
       4  u

 
 358 bytes in section .bss
 145 bytes in section .data
 328 bytes in section .text
 
 328 bytes of CODE memory
 503 bytes of DATA memory

Errors: none
Warnings: none
