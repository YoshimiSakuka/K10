###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        26/May/2016  12:04:54
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\ye\Desktop\NFS.NO 2 - 副本\common\i2c.c
#    Command line =  
#        "C:\Users\ye\Desktop\NFS.NO 2 - 副本\common\i2c.c" -D DEBUG -lCN
#        "C:\Users\ye\Desktop\NFS.NO 2 - 副本\Debug\List\" -lB
#        "C:\Users\ye\Desktop\NFS.NO 2 - 副本\Debug\List\" -o
#        "C:\Users\ye\Desktop\NFS.NO 2 - 副本\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -Ol --use_c++_inline
#    List file    =  C:\Users\ye\Desktop\NFS.NO 2 - 副本\Debug\List\i2c.lst
#    Object file  =  C:\Users\ye\Desktop\NFS.NO 2 - 副本\Debug\Obj\i2c.o
#
###############################################################################

C:\Users\ye\Desktop\NFS.NO 2 - 副本\common\i2c.c
      1          #include"i2c.h"
      2          
      3          
      4          
      5          
      6          
      7          
      8          
      9          

   \                                 In section .bss, align 1
     10          unsigned char MasterTransmission;
   \                     MasterTransmission:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
     11          unsigned char SlaveID;
   \                     SlaveID:
   \   00000000                      DS8 1
     12          

   \                                 In section .data, align 4
     13          volatile struct I2C_MemMap *I2Cx[2] = {I2C0_BASE_PTR, I2C1_BASE_PTR}; //定义两个指针数组保存 I2Cx 的地址
   \                     I2Cx:
   \   00000000   0x40066000         DC32 40066000H, 40067000H
   \              0x40067000   
     14          
     15          
     16          /*************************************************************************
     17          *                             野火嵌入式开发工作室
     18          *
     19          *  函数名称：I2C_init
     20          *  功能说明：I2C初始化，设置波特率和启动I2C
     21          *  参数说明：I2Cn        模块号（I2C0、I2C1）
     22          *  函数返回：无
     23          *  修改时间：2012-1-20
     24          *  备    注：
     25          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     26          void I2C_init(I2Cn i2cn)
     27          {
     28              u8 mult;
     29              if(PERIPH_SYS_CLK <= 50000)mult = 0;         //bus 一分频
   \                     I2C_init: (+1)
   \   00000000   0x....             LDR.N    R1,??DataTable3  ;; 0x8f0d180
   \   00000002   0x....             LDR.N    R2,??DataTable3_1  ;; 0x40048044
   \   00000004   0x6812             LDR      R2,[R2, #+0]
   \   00000006   0xF3C2 0x6203      UBFX     R2,R2,#+24,#+4
   \   0000000A   0x1C52             ADDS     R2,R2,#+1
   \   0000000C   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   00000010   0xF24C 0x3251      MOVW     R2,#+50001
   \   00000014   0x4291             CMP      R1,R2
   \   00000016   0xD201             BCS.N    ??I2C_init_0
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0xE00D             B.N      ??I2C_init_1
     30              else  if(PERIPH_SYS_CLK <= 100000)mult = 1;  //bus 二分频
   \                     ??I2C_init_0: (+1)
   \   0000001C   0x....             LDR.N    R1,??DataTable3  ;; 0x8f0d180
   \   0000001E   0x....             LDR.N    R2,??DataTable3_1  ;; 0x40048044
   \   00000020   0x6812             LDR      R2,[R2, #+0]
   \   00000022   0xF3C2 0x6203      UBFX     R2,R2,#+24,#+4
   \   00000026   0x1C52             ADDS     R2,R2,#+1
   \   00000028   0xFBB1 0xF1F2      UDIV     R1,R1,R2
   \   0000002C   0x....             LDR.N    R2,??DataTable3_2  ;; 0x186a1
   \   0000002E   0x4291             CMP      R1,R2
   \   00000030   0xD201             BCS.N    ??I2C_init_2
   \   00000032   0x2101             MOVS     R1,#+1
   \   00000034   0xE000             B.N      ??I2C_init_1
     31              else      mult = 2;                       //bus 四分频
   \                     ??I2C_init_2: (+1)
   \   00000036   0x2102             MOVS     R1,#+2
     32          
     33              if(i2cn == I2C0)
   \                     ??I2C_init_1: (+1)
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD10E             BNE.N    ??I2C_init_3
     34              {
     35                  /* 开启时钟 */
     36                  SIM_SCGC4 |= SIM_SCGC4_I2C0_MASK;         //开启 I2C0时钟
   \   0000003E   0x....             LDR.N    R1,??DataTable3_3  ;; 0x40048034
   \   00000040   0x6809             LDR      R1,[R1, #+0]
   \   00000042   0xF051 0x0140      ORRS     R1,R1,#0x40
   \   00000046   0x....             LDR.N    R2,??DataTable3_3  ;; 0x40048034
   \   00000048   0x6011             STR      R1,[R2, #+0]
     37          
     38                  /* 配置 I2C0功能的 GPIO 接口 */
     39                  //if(I2C0_SCL == PTB0)
     40                      //PORTB_PCR0 = PORT_PCR_MUX(2);
     41                  //else if(I2C0_SCL == PTB2)
     42                      PORTB_PCR2 = PORT_PCR_MUX(2);
   \   0000004A   0xF44F 0x7100      MOV      R1,#+512
   \   0000004E   0x....             LDR.N    R2,??DataTable3_4  ;; 0x4004a008
   \   00000050   0x6011             STR      R1,[R2, #+0]
     43                  //else if(I2C0_SCL == PTD8)
     44                      //PORTD_PCR8 = PORT_PCR_MUX(2);
     45                  //else
     46                  //    assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
     47          
     48                  //if(I2C0_SDA == PTB1)
     49                      //PORTB_PCR1 = PORT_PCR_MUX(2);
     50                  //else if(I2C0_SDA == PTB3)
     51                      PORTB_PCR3 = PORT_PCR_MUX(2);
   \   00000052   0xF44F 0x7100      MOV      R1,#+512
   \   00000056   0x....             LDR.N    R2,??DataTable3_5  ;; 0x4004a00c
   \   00000058   0x6011             STR      R1,[R2, #+0]
   \   0000005A   0xE00D             B.N      ??I2C_init_4
     52                  //else if(I2C0_SDA == PTD9)
     53                      //PORTD_PCR9 = PORT_PCR_MUX(2);
     54                  //else
     55                      //assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
     56              }
     57              else
     58              {
     59                  /* 开启时钟 */
     60                  SIM_SCGC4 |= SIM_SCGC4_I2C1_MASK;         //开启 I2C1时钟
   \                     ??I2C_init_3: (+1)
   \   0000005C   0x....             LDR.N    R1,??DataTable3_3  ;; 0x40048034
   \   0000005E   0x6809             LDR      R1,[R1, #+0]
   \   00000060   0xF051 0x0180      ORRS     R1,R1,#0x80
   \   00000064   0x....             LDR.N    R2,??DataTable3_3  ;; 0x40048034
   \   00000066   0x6011             STR      R1,[R2, #+0]
     61          
     62                  /* 配置 I2C1功能的 GPIO 接口 */
     63                  //if(I2C1_SCL == PTE1)
     64                      PORTE_PCR1 = PORT_PCR_MUX(6);
   \   00000068   0xF44F 0x61C0      MOV      R1,#+1536
   \   0000006C   0x....             LDR.N    R2,??DataTable3_6  ;; 0x4004d004
   \   0000006E   0x6011             STR      R1,[R2, #+0]
     65                  //else if(I2C1_SCL == PTC10)
     66                      //PORTC_PCR10 = PORT_PCR_MUX(2);
     67                  //else
     68                      //assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
     69          
     70                  //if(I2C1_SDA == PTE0)
     71                      PORTE_PCR0 = PORT_PCR_MUX(6);
   \   00000070   0xF44F 0x61C0      MOV      R1,#+1536
   \   00000074   0x....             LDR.N    R2,??DataTable3_7  ;; 0x4004d000
   \   00000076   0x6011             STR      R1,[R2, #+0]
     72                  //else if (I2C1_SDA == PTC11)
     73                      //PORTC_PCR11 = PORT_PCR_MUX(2);
     74                  //else
     75                      //assert_failed(__FILE__, __LINE__);                   //设置管脚有误？
     76          
     77              }
     78          
     79              /* 设置频率 */
     80              //I2C_F_REG(I2Cx[i2cn])  = I2C_F_MULT(mult) | I2C_F_ICR(17) ;  // I2C Frequency Divider register (I2Cx_F)  I2C分频寄存器   I2C最大波特率为 400k
     81              I2C0_F  = 0x13;
   \                     ??I2C_init_4: (+1)
   \   00000078   0x2113             MOVS     R1,#+19
   \   0000007A   0x....             LDR.N    R2,??DataTable3_8  ;; 0x40066001
   \   0000007C   0x7011             STRB     R1,[R2, #+0]
     82              //I2C0_F  = 0x13;
     83              // MULT=00  即  mul = 1
     84              // ICR =14  ICR为Clock rate时钟频率
     85              // 从《k16 reference manual.pdf》P1460 可得：
     86              // ICR    SCL Divider   SDA Hold Value    SCL Hold (Start) Value    SCL Hold (Stop) Value
     87              //  14        80              17                   34                         41
     88              //  17       128              21                   58                         65
     89              // I2C baud rate = bus speed (Hz)/(mul × SCL divider)  即这里 50MHz/(1 ×128)=390.625kHz
     90              // SDA hold time = bus period (s) × mul × SDA hold value
     91              // SCL start hold time = bus period (s) × mul × SCL start hold value
     92              // SCL stop hold time = bus period (s) × mul × SCL stop hold value
     93          
     94              /* 使能 IIC1 */
     95              I2C_C1_REG(I2Cx[i2cn]) = I2C_C1_IICEN_MASK;
   \   0000007E   0x2180             MOVS     R1,#+128
   \   00000080   0x....             LDR.N    R2,??DataTable3_9
   \   00000082   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000084   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   00000088   0x7081             STRB     R1,[R0, #+2]
     96          }
   \   0000008A   0x4770             BX       LR               ;; return
     97          
     98          /*************************************************************************
     99          *                             野火嵌入式开发工作室
    100          *
    101          *  函数名称：I2C_StartTransmission
    102          *  功能说明：启动 I2C 传输
    103          *  参数说明：I2Cn        模块号（I2C0、I2C1）
    104          *            SlaveID     7位从机地址
    105          *            MSmode      读写模式（ MWSR 或 MRSW ）
    106          *  函数返回：无
    107          *  修改时间：2012-1-20
    108          *  备    注：
    109          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    110          void I2C_StartTransmission (I2Cn i2cn, u8 SlaveID, MSmode Mode)
    111          {
    112          
    113              //ASSERT(Mode == MWSR || Mode == MRSW);         //使用断言，检测 Mode 是否为 读 或 写
    114          
    115              SlaveID = ( SlaveID << 1 ) | Mode ;            //确定写地址和读地址
   \                     I2C_StartTransmission: (+1)
   \   00000000   0xEA52 0x0141      ORRS     R1,R2,R1, LSL #+1
    116          
    117              /* send start signal */
    118              i2c_Start(i2cn);
   \   00000004   0x....             LDR.N    R2,??DataTable3_9
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   0000000C   0x7892             LDRB     R2,[R2, #+2]
   \   0000000E   0xF052 0x0210      ORRS     R2,R2,#0x10
   \   00000012   0x....             LDR.N    R3,??DataTable3_9
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   0000001A   0x709A             STRB     R2,[R3, #+2]
   \   0000001C   0x....             LDR.N    R2,??DataTable3_9
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000024   0x7892             LDRB     R2,[R2, #+2]
   \   00000026   0xF052 0x0220      ORRS     R2,R2,#0x20
   \   0000002A   0x....             LDR.N    R3,??DataTable3_9
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000032   0x709A             STRB     R2,[R3, #+2]
    119          
    120              /* send ID with W/R bit */
    121              i2c_write_byte(i2cn, SlaveID);
   \   00000034   0x....             LDR.N    R2,??DataTable3_9
   \   00000036   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000038   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   0000003C   0x7101             STRB     R1,[R0, #+4]
    122          }
   \   0000003E   0x4770             BX       LR               ;; return
    123          
    124          /*************************************************************************
    125          *                             野火嵌入式开发工作室
    126          *
    127          *  函数名称：Pause
    128          *  功能说明：延时，I2C读写后，需要延时一下
    129          *  参数说明：无
    130          *  函数返回：无
    131          *  修改时间：2012-1-20
    132          *  备    注：在官方基础上增大延时数
    133          *************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    134          void Pause(void)
    135          {
    136              u16 n;
    137              for(n = 1; n < 50000; n++)      //注意，这个数据太小，会导致读取错误。
   \                     Pause: (+1)
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0xE001             B.N      ??Pause_0
    138              {
    139                  asm("nop");
   \                     ??Pause_1: (+1)
   \   00000004   0xBF00             nop
    140              }
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \                     ??Pause_0: (+1)
   \   00000008   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000000A   0xF24C 0x3150      MOVW     R1,#+50000
   \   0000000E   0x4288             CMP      R0,R1
   \   00000010   0xDBF8             BLT.N    ??Pause_1
    141          }
   \   00000012   0x4770             BX       LR               ;; return
    142          
    143          /*************************************************************************
    144          *                             野火嵌入式开发工作室
    145          *
    146          *  函数名称：I2C_ReadAddr
    147          *  功能说明：读取I2C设备指定地址寄存器的数据
    148          *  参数说明：I2Cn        模块号（I2C0、I2C1）
    149          *            SlaveID     7位从机地址
    150          *            Addr        从机的寄存器地址
    151          *  函数返回：从机寄存器的数据
    152          *  修改时间：2012-1-20
    153          *  备    注：
    154          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    155          u8 I2C_ReadAddr(I2Cn i2cn, u8 SlaveID, u8 Addr)
    156          {
   \                     I2C_ReadAddr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    157              u8 result;
    158          
    159              /* Send Slave Address */
    160              I2C_StartTransmission (i2cn, SlaveID, MWSR);
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x0029             MOVS     R1,R5
   \   0000000C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x.... 0x....      BL       I2C_StartTransmission
    161              i2c_Wait(i2cn);
   \                     ??I2C_ReadAddr_0: (+1)
   \   00000016   0x....             LDR.N    R0,??DataTable3_9
   \   00000018   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000001A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000001E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000020   0x0780             LSLS     R0,R0,#+30
   \   00000022   0xD5F8             BPL.N    ??I2C_ReadAddr_0
   \   00000024   0x....             LDR.N    R0,??DataTable3_9
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000002C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000002E   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000032   0x....             LDR.N    R1,??DataTable3_9
   \   00000034   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000036   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000003A   0x70C8             STRB     R0,[R1, #+3]
    162          
    163              /* Write Register Address */
    164              i2c_write_byte(i2cn, Addr);
   \   0000003C   0x....             LDR.N    R0,??DataTable3_9
   \   0000003E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000040   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000044   0x7106             STRB     R6,[R0, #+4]
    165              i2c_Wait(i2cn);
   \                     ??I2C_ReadAddr_1: (+1)
   \   00000046   0x....             LDR.N    R0,??DataTable3_9
   \   00000048   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000004A   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000004E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000050   0x0780             LSLS     R0,R0,#+30
   \   00000052   0xD5F8             BPL.N    ??I2C_ReadAddr_1
   \   00000054   0x....             LDR.N    R0,??DataTable3_9
   \   00000056   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000058   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000005C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000005E   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000062   0x....             LDR.N    R1,??DataTable3_9
   \   00000064   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000066   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   0000006A   0x70C8             STRB     R0,[R1, #+3]
    166          
    167              /* Do a repeated start */
    168              i2c_RepeatedStart(i2cn);
   \   0000006C   0x....             LDR.N    R0,??DataTable3_9
   \   0000006E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000070   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000074   0x7880             LDRB     R0,[R0, #+2]
   \   00000076   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000007A   0x....             LDR.N    R1,??DataTable3_9
   \   0000007C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000007E   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000082   0x7088             STRB     R0,[R1, #+2]
    169          
    170              /* Send Slave Address */
    171              i2c_write_byte(i2cn, ( SlaveID << 1) | MRSW );
   \   00000084   0x0068             LSLS     R0,R5,#+1
   \   00000086   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   0000008A   0x....             LDR.N    R1,??DataTable3_9
   \   0000008C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000008E   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000092   0x7108             STRB     R0,[R1, #+4]
    172              i2c_Wait(i2cn);
   \                     ??I2C_ReadAddr_2: (+1)
   \   00000094   0x....             LDR.N    R0,??DataTable3_9
   \   00000096   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000098   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000009C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000009E   0x0780             LSLS     R0,R0,#+30
   \   000000A0   0xD5F8             BPL.N    ??I2C_ReadAddr_2
   \   000000A2   0x....             LDR.N    R0,??DataTable3_9
   \   000000A4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A6   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000AA   0x78C0             LDRB     R0,[R0, #+3]
   \   000000AC   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   000000B0   0x....             LDR.N    R1,??DataTable3_9
   \   000000B2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B4   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000B8   0x70C8             STRB     R0,[R1, #+3]
    173          
    174              /* Put in Rx Mode */
    175              i2c_PutinRxMode(i2cn);
   \   000000BA   0x....             LDR.N    R0,??DataTable3_9
   \   000000BC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000BE   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000C2   0x7880             LDRB     R0,[R0, #+2]
   \   000000C4   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   000000C8   0x....             LDR.N    R1,??DataTable3_9
   \   000000CA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000CC   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000D0   0x7088             STRB     R0,[R1, #+2]
    176          
    177              /* Turn off ACK since this is second to last byte being read*/
    178              i2c_DisableAck(i2cn); //不应答
   \   000000D2   0x....             LDR.N    R0,??DataTable3_9
   \   000000D4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000D6   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000DA   0x7880             LDRB     R0,[R0, #+2]
   \   000000DC   0xF050 0x0008      ORRS     R0,R0,#0x8
   \   000000E0   0x....             LDR.N    R1,??DataTable3_9
   \   000000E2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000E4   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000E8   0x7088             STRB     R0,[R1, #+2]
    179          
    180              /* Dummy read 虚假读取*/
    181              result = I2C_D_REG(I2Cx[i2cn]);
   \   000000EA   0x....             LDR.N    R0,??DataTable3_9
   \   000000EC   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000EE   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000F2   0x7900             LDRB     R0,[R0, #+4]
    182              i2c_Wait(i2cn);
   \                     ??I2C_ReadAddr_3: (+1)
   \   000000F4   0x....             LDR.N    R0,??DataTable3_9
   \   000000F6   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000F8   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000FC   0x78C0             LDRB     R0,[R0, #+3]
   \   000000FE   0x0780             LSLS     R0,R0,#+30
   \   00000100   0xD5F8             BPL.N    ??I2C_ReadAddr_3
   \   00000102   0x....             LDR.N    R0,??DataTable3_9
   \   00000104   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000106   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000010A   0x78C0             LDRB     R0,[R0, #+3]
   \   0000010C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000110   0x....             LDR.N    R1,??DataTable3_9
   \   00000112   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000114   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000118   0x70C8             STRB     R0,[R1, #+3]
    183          
    184              /* Send stop since about to read last byte */
    185              i2c_Stop(i2cn);
   \   0000011A   0x....             LDR.N    R0,??DataTable3_9
   \   0000011C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000011E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000122   0x7880             LDRB     R0,[R0, #+2]
   \   00000124   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   00000128   0x....             LDR.N    R1,??DataTable3_9
   \   0000012A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000012C   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000130   0x7088             STRB     R0,[R1, #+2]
   \   00000132   0x....             LDR.N    R0,??DataTable3_9
   \   00000134   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000136   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000013A   0x7880             LDRB     R0,[R0, #+2]
   \   0000013C   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   00000140   0x....             LDR.N    R1,??DataTable3_9
   \   00000142   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000144   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000148   0x7088             STRB     R0,[R1, #+2]
    186          
    187              /* Read byte */
    188              result = I2C_D_REG(I2Cx[i2cn]);
   \   0000014A   0x....             LDR.N    R0,??DataTable3_9
   \   0000014C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000014E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000152   0x7900             LDRB     R0,[R0, #+4]
    189          
    190              return result;
   \   00000154   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000156   0xBD70             POP      {R4-R6,PC}       ;; return
    191          }
    192          
    193          
    194          /*************************************************************************
    195          *                             野火嵌入式开发工作室
    196          *
    197          *  函数名称：I2C_WriteAddr
    198          *  功能说明：写入一个字节数据到I2C设备指定寄存器地址
    199          *  参数说明：I2Cn        模块号（I2C0、I2C1）
    200          *            SlaveID     7位从机地址
    201          *            Addr        从机的寄存器地址
    202          *            Data        数据
    203          *  函数返回：无
    204          *  修改时间：2012-1-20
    205          *  备    注：
    206          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    207          void I2C_WriteAddr(I2Cn i2cn, u8 SlaveID, u8 Addr, u8 Data)
    208          {
   \                     I2C_WriteAddr: (+1)
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0015             MOVS     R5,R2
   \   00000006   0x001E             MOVS     R6,R3
    209              /* send data to slave */
    210              I2C_StartTransmission(i2cn, SlaveID, MWSR);    //启动传输
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000C   0x0020             MOVS     R0,R4
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x.... 0x....      BL       I2C_StartTransmission
    211              i2c_Wait(i2cn);
   \                     ??I2C_WriteAddr_0: (+1)
   \   00000014   0x....             LDR.N    R0,??DataTable3_9
   \   00000016   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000018   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000001C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000001E   0x0780             LSLS     R0,R0,#+30
   \   00000020   0xD5F8             BPL.N    ??I2C_WriteAddr_0
   \   00000022   0x....             LDR.N    R0,??DataTable3_9
   \   00000024   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000026   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000002A   0x78C0             LDRB     R0,[R0, #+3]
   \   0000002C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000030   0x....             LDR.N    R1,??DataTable3_9
   \   00000032   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000034   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000038   0x70C8             STRB     R0,[R1, #+3]
    212          
    213              i2c_write_byte(i2cn, Addr);                    //写地址
   \   0000003A   0x....             LDR.N    R0,??DataTable3_9
   \   0000003C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000003E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000042   0x7105             STRB     R5,[R0, #+4]
    214              i2c_Wait(i2cn);
   \                     ??I2C_WriteAddr_1: (+1)
   \   00000044   0x....             LDR.N    R0,??DataTable3_9
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000004C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000004E   0x0780             LSLS     R0,R0,#+30
   \   00000050   0xD5F8             BPL.N    ??I2C_WriteAddr_1
   \   00000052   0x....             LDR.N    R0,??DataTable3_9
   \   00000054   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000056   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000005A   0x78C0             LDRB     R0,[R0, #+3]
   \   0000005C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000060   0x....             LDR.N    R1,??DataTable3_9
   \   00000062   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000064   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000068   0x70C8             STRB     R0,[R1, #+3]
    215          
    216              i2c_write_byte(i2cn, Data);                    //写数据
   \   0000006A   0x....             LDR.N    R0,??DataTable3_9
   \   0000006C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000006E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   00000072   0x7106             STRB     R6,[R0, #+4]
    217              i2c_Wait(i2cn);
   \                     ??I2C_WriteAddr_2: (+1)
   \   00000074   0x....             LDR.N    R0,??DataTable3_9
   \   00000076   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000078   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000007C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000007E   0x0780             LSLS     R0,R0,#+30
   \   00000080   0xD5F8             BPL.N    ??I2C_WriteAddr_2
   \   00000082   0x....             LDR.N    R0,??DataTable3_9
   \   00000084   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000086   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   0000008A   0x78C0             LDRB     R0,[R0, #+3]
   \   0000008C   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000090   0x....             LDR.N    R1,??DataTable3_9
   \   00000092   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000094   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   00000098   0x70C8             STRB     R0,[R1, #+3]
    218          
    219              i2c_Stop(i2cn);
   \   0000009A   0x....             LDR.N    R0,??DataTable3_9
   \   0000009C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000009E   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000A2   0x7880             LDRB     R0,[R0, #+2]
   \   000000A4   0xF010 0x00DF      ANDS     R0,R0,#0xDF
   \   000000A8   0x....             LDR.N    R1,??DataTable3_9
   \   000000AA   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000AC   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000B0   0x7088             STRB     R0,[R1, #+2]
   \   000000B2   0x....             LDR.N    R0,??DataTable3_9
   \   000000B4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000B6   0xF850 0x0024      LDR      R0,[R0, R4, LSL #+2]
   \   000000BA   0x7880             LDRB     R0,[R0, #+2]
   \   000000BC   0xF010 0x00EF      ANDS     R0,R0,#0xEF
   \   000000C0   0x....             LDR.N    R1,??DataTable3_9
   \   000000C2   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000C4   0xF851 0x1024      LDR      R1,[R1, R4, LSL #+2]
   \   000000C8   0x7088             STRB     R0,[R1, #+2]
    220          
    221              Pause();                                        //延时太短的话，可能写出错
   \   000000CA   0x.... 0x....      BL       Pause
    222          }
   \   000000CE   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x08F0D180         DC32     0x8f0d180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x40048044         DC32     0x40048044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x000186A1         DC32     0x186a1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x4004A008         DC32     0x4004a008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x4004A00C         DC32     0x4004a00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x4004D004         DC32     0x4004d004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x4004D000         DC32     0x4004d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x40066001         DC32     0x40066001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     I2Cx

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   I2C_ReadAddr
        16   -> I2C_StartTransmission
       0   I2C_StartTransmission
      16   I2C_WriteAddr
        16   -> I2C_StartTransmission
        16   -> Pause
       0   I2C_init
       0   Pause


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
     344  I2C_ReadAddr
      64  I2C_StartTransmission
     208  I2C_WriteAddr
     140  I2C_init
       8  I2Cx
       1  MasterTransmission
      20  Pause
       1  SlaveID

 
   2 bytes in section .bss
   8 bytes in section .data
 816 bytes in section .text
 
 816 bytes of CODE memory
  10 bytes of DATA memory

Errors: none
Warnings: 1
