###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     13/Mar/2015  12:44:16 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\3.11换结构BLOCK nd        #
#                    black\common\spi.c                                       #
#    Command line =  "C:\Users\Administrator\Desktop\3.11换结构BLOCK nd       #
#                    black\common\spi.c" -D DEBUG -lCN                        #
#                    "C:\Users\Administrator\Desktop\3.11换结构BLOCK nd       #
#                    black\Debug\List\" -lB "C:\Users\Administrator\Desktop\3 #
#                    .11换结构BLOCK nd  black\Debug\List\" -o                 #
#                    "C:\Users\Administrator\Desktop\3.11换结构BLOCK nd       #
#                    black\Debug\Obj\" --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol --use_c++_inline                              #
#    List file    =  C:\Users\Administrator\Desktop\3.11换结构BLOCK nd        #
#                    black\Debug\List\spi.lst                                 #
#    Object file  =  C:\Users\Administrator\Desktop\3.11换结构BLOCK nd        #
#                    black\Debug\Obj\spi.o                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\3.11换结构BLOCK nd  black\common\spi.c
      1          //#include "common.h"
      2          #include "spi.h"
      3          #include "math.h"
      4          

   \                                 In section .data, align 4
      5          volatile struct SPI_MemMap *SPIN[3]={SPI0_BASE_PTR,SPI1_BASE_PTR,SPI2_BASE_PTR}; //定义三个指针数组保存 SPIx 的地址
   \                     SPIN:
   \   00000000   0x4002C000         DC32 4002C000H, 4002D000H, 400AC000H
   \              0x4002D000   
   \              0x400AC000   
      6          
      7          
      8          //=========================================================================
      9          //函数名称：spi_init
     10          //函数参数：spin：SPI通道号。
     11          //          Master:是否是主机。
     12          //函数返回：无
     13          //功能概要：SPI初始化。
     14          //=========================================================================

   \                                 In section .text, align 2, keep-with-next
     15          void spi_init(SPIn spin,SPI_CFG master)
     16          {
   \                     spi_init:
   \   00000000   0xB580             PUSH     {R7,LR}
     17              
     18              //使能SPI模块时钟，配置SPI引脚功能
     19              if(spin == 0)
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x2800             CMP      R0,#+0
   \   00000006   0xD117             BNE.N    ??spi_init_0
     20              {
     21                  SIM_SCGC6 |= SIM_SCGC6_DSPI0_MASK;
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable6  ;; 0x4004803c
   \   0000000C   0x6812             LDR      R2,[R2, #+0]
   \   0000000E   0xF452 0x5280      ORRS     R2,R2,#0x1000
   \   00000012   0x.... 0x....      LDR.W    R3,??DataTable6  ;; 0x4004803c
   \   00000016   0x601A             STR      R2,[R3, #+0]
     22                  //PORTA_PCR14 = 0 | PORT_PCR_MUX(0x2) | PORT_PCR_DSE_MASK;//PCS0   //DSE=1:输出时高驱动能力
     23                  PORTA_PCR15 = 0 | PORT_PCR_MUX(0x2) | PORT_PCR_DSE_MASK;//SCK
   \   00000018   0x.... 0x....      LDR.W    R2,??DataTable6_1  ;; 0x4004903c
   \   0000001C   0xF44F 0x7310      MOV      R3,#+576
   \   00000020   0x6013             STR      R3,[R2, #+0]
     24                  PORTA_PCR16 = 0 | PORT_PCR_MUX(0x2) | PORT_PCR_DSE_MASK;//SOUT
   \   00000022   0x.... 0x....      LDR.W    R2,??DataTable6_2  ;; 0x40049040
   \   00000026   0xF44F 0x7310      MOV      R3,#+576
   \   0000002A   0x6013             STR      R3,[R2, #+0]
     25                  PORTA_PCR17 = 0 | PORT_PCR_MUX(0x2);//SIN
   \   0000002C   0x.... 0x....      LDR.W    R2,??DataTable6_3  ;; 0x40049044
   \   00000030   0xF44F 0x7300      MOV      R3,#+512
   \   00000034   0x6013             STR      R3,[R2, #+0]
   \   00000036   0xE033             B.N      ??spi_init_1
     26              }
     27              else if(spin == 1)
   \                     ??spi_init_0:
   \   00000038   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003A   0x2801             CMP      R0,#+1
   \   0000003C   0xD11C             BNE.N    ??spi_init_2
     28              {
     29                  SIM_SCGC6 |= SIM_SCGC6_SPI1_MASK;
   \   0000003E   0x.... 0x....      LDR.W    R2,??DataTable6  ;; 0x4004803c
   \   00000042   0x6812             LDR      R2,[R2, #+0]
   \   00000044   0xF452 0x5200      ORRS     R2,R2,#0x2000
   \   00000048   0x.... 0x....      LDR.W    R3,??DataTable6  ;; 0x4004803c
   \   0000004C   0x601A             STR      R2,[R3, #+0]
     30                  PORTE_PCR1 = 0 | PORT_PCR_MUX(0x2) | PORT_PCR_DSE_MASK; //SOUT
   \   0000004E   0x.... 0x....      LDR.W    R2,??DataTable6_4  ;; 0x4004d004
   \   00000052   0xF44F 0x7310      MOV      R3,#+576
   \   00000056   0x6013             STR      R3,[R2, #+0]
     31                  PORTE_PCR2 = 0 | PORT_PCR_MUX(0x2) | PORT_PCR_DSE_MASK; //SCK
   \   00000058   0x.... 0x....      LDR.W    R2,??DataTable6_5  ;; 0x4004d008
   \   0000005C   0xF44F 0x7310      MOV      R3,#+576
   \   00000060   0x6013             STR      R3,[R2, #+0]
     32                  PORTE_PCR3 = 0 | PORT_PCR_MUX(0x2);                     //SIN
   \   00000062   0x.... 0x....      LDR.W    R2,??DataTable6_6  ;; 0x4004d00c
   \   00000066   0xF44F 0x7300      MOV      R3,#+512
   \   0000006A   0x6013             STR      R3,[R2, #+0]
     33                  PORTE_PCR4 = 0 | PORT_PCR_MUX(0x2) | PORT_PCR_DSE_MASK; //PCS0
   \   0000006C   0x.... 0x....      LDR.W    R2,??DataTable6_7  ;; 0x4004d010
   \   00000070   0xF44F 0x7310      MOV      R3,#+576
   \   00000074   0x6013             STR      R3,[R2, #+0]
   \   00000076   0xE013             B.N      ??spi_init_1
     34              }
     35              else 
     36              {   
     37                  SIM_SCGC3 |= SIM_SCGC3_SPI2_MASK;
   \                     ??spi_init_2:
   \   00000078   0x.... 0x....      LDR.W    R2,??DataTable6_8  ;; 0x40048030
   \   0000007C   0x6812             LDR      R2,[R2, #+0]
   \   0000007E   0xF452 0x5280      ORRS     R2,R2,#0x1000
   \   00000082   0x.... 0x....      LDR.W    R3,??DataTable6_8  ;; 0x40048030
   \   00000086   0x601A             STR      R2,[R3, #+0]
     38                  PORTD_PCR13 = 0 | PORT_PCR_MUX(0x2) | PORT_PCR_DSE_MASK; //SOUT
   \   00000088   0x....             LDR.N    R2,??DataTable6_9  ;; 0x4004c034
   \   0000008A   0xF44F 0x7310      MOV      R3,#+576
   \   0000008E   0x6013             STR      R3,[R2, #+0]
     39                  PORTD_PCR12 = 0 | PORT_PCR_MUX(0x2) | PORT_PCR_DSE_MASK; //SCK
   \   00000090   0x....             LDR.N    R2,??DataTable6_10  ;; 0x4004c030
   \   00000092   0xF44F 0x7310      MOV      R3,#+576
   \   00000096   0x6013             STR      R3,[R2, #+0]
     40                  PORTD_PCR14 = 0 | PORT_PCR_MUX(0x2)/* | PORT_PCR_DSE_MASK*/;                     //SIN
   \   00000098   0x....             LDR.N    R2,??DataTable6_11  ;; 0x4004c038
   \   0000009A   0xF44F 0x7300      MOV      R3,#+512
   \   0000009E   0x6013             STR      R3,[R2, #+0]
     41                  //PORTD_PCR15 = 0 | PORT_PCR_MUX(0x2)/* | PORT_PCR_DSE_MASK*/; //PCS1     
     42              }
     43              
     44              SPI_MCR_REG(SPIN[spin]) = 0 
     45                           | SPI_MCR_CLR_TXF_MASK     //Clear the Tx FIFO counter.
     46                           | SPI_MCR_CLR_RXF_MASK     //Clear the Rx FIFO counter.
     47                           //| SPI_MCR_PCSIS_MASK
     48                           | SPI_MCR_HALT_MASK;
   \                     ??spi_init_1:
   \   000000A0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A2   0x....             LDR.N    R2,??DataTable6_12
   \   000000A4   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   000000A8   0xF640 0x4301      MOVW     R3,#+3073
   \   000000AC   0x6013             STR      R3,[R2, #+0]
     49          
     50              
     51              //根据主从机模式设置工作模式。MCU提供最大主机频率是1/2主频，最大从机频率是1/4主频
     52              if(master == MASTER)
   \   000000AE   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000B0   0x2900             CMP      R1,#+0
   \   000000B2   0xD10D             BNE.N    ??spi_init_3
     53              {
     54                  SPI_MCR_REG(SPIN[spin]) =  (0
     55                                              |  SPI_MCR_MSTR_MASK //Master,主机模式
     56                                             // |   SPI_MCR_PCSIS(2) //PCS1
     57                                              );      
   \   000000B4   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000B6   0x....             LDR.N    R1,??DataTable6_12
   \   000000B8   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   000000BC   0xF05F 0x4200      MOVS     R2,#-2147483648
   \   000000C0   0x600A             STR      R2,[R1, #+0]
     58                  SPI_CTAR_REG(SPIN[spin],0) = (0
     59                                 //| SPI_CTAR_DBR_MASK          //双波特率 ，这里设 DBR=1，CPHA=1，PBR=00，得SCK Duty Cycle 为 50/50
     60                                 //| SPI_CTAR_CPHA_MASK         //数据在SCK上升沿改变（输出），在下降沿被捕捉（输入读取）。如果是0，则反之。  w25x16在上升沿读取数据；NRF24L01在上升沿读取数据
     61                                  | SPI_CTAR_PBR(1)            //波特率分频器 ，0~3 对应的分频值Prescaler为 2、3、5、7
     62                                   
     63                                  | SPI_CTAR_PDT(0x00)         //延时因子为 PDT*2+1 ，这里PDT为3，即延时因子为7。PDT为2bit
     64                                  | SPI_CTAR_BR(0)             //波特率计数器值 ,当BR<=3,分频Scaler 为 2*（BR+1） ，当BR>=3，分频Scaler 为 2^BR  。BR为4bit
     65                                                              //SCK 波特率 = (fSYS/Prescaler) x [(1+DBR)/Scaler ]          fSYS 为 Bus clock
     66                                                              //              100M  2          1    2   = 50M   这里以最大的来算
     67                                                              //              100M   5          1    2   =20M
     68                                   
     69                                 //| SPI_CTAR_CPOL_MASK         //时钟极性，1表示 SCK 不活跃状态为高电平,   NRF24L01 不活跃为低电平
     70                                  | SPI_CTAR_FMSZ(0x07)        //每帧传输 7bit+1 ，即8bit （FMSZ默认就是8）  
     71                                // | SPI_CTAR_LSBFE_MASK        //1为低位在前。
     72                                  //| SPI_CTAR_CSSCK(1)          //
     73                                  //|SPI_CTAR_PCSSCK(2)         //设置片选信号有效到时钟第一个边沿出现的延时的预分频值。tcsc延时预分频 2*x+1；
     74                                 ); 
   \   000000C2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C4   0x....             LDR.N    R1,??DataTable6_12
   \   000000C6   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   000000CA   0x....             LDR.N    R2,??DataTable6_13  ;; 0x38010000
   \   000000CC   0x60CA             STR      R2,[R1, #+12]
   \   000000CE   0xE006             B.N      ??spi_init_4
     75                                  //LSBFE 为 0 ，数据在前
     76              }
     77              else
     78              {
     79                  //默认从机模式
     80                  SPI_CTAR_SLAVE_REG(SPIN[spin],0) = 0 
     81                                      | SPI_CTAR_SLAVE_FMSZ(0x07)
     82                                      | SPI_CTAR_SLAVE_CPOL_MASK 
     83                                      | SPI_CTAR_SLAVE_CPHA_MASK; 
   \                     ??spi_init_3:
   \   000000D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D2   0x....             LDR.N    R1,??DataTable6_12
   \   000000D4   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   000000D8   0xF05F 0x5278      MOVS     R2,#+1040187392
   \   000000DC   0x60CA             STR      R2,[R1, #+12]
     84             }
     85              //DELAY_MS(100);
     86             /*************  清标志位  ***************/
     87              SPI_SR_REG(SPIN[spin]) = (SPI_SR_EOQF_MASK     //End of Queue Flag，发送队列空了，发送完毕
     88                                   | SPI_SR_TFUF_MASK     //Transmit FIFO Underflow Flag，传输FIFO下溢标志位，SPI为从机模式，Tx FIFO为空，而外部SPI主机模式启动传输，标志位就会置1，写1清0
     89                                   | SPI_SR_TFFF_MASK     //Transmit FIFO Fill Flag，传输FIFO满标志位。 写1或者DMA控制器发现传输FIFO满了就会清0。 0表示Tx FIFO满了
     90                                   | SPI_SR_RFOF_MASK     //Receive FIFO Overflow Flag，接收FIFO溢出标志位。
     91                                   | SPI_SR_RFDF_MASK);   //Receive FIFO Drain Flag，接收FIFO损耗标志位，写1或者DMA控制器发现传输FIFO空了就会清0。0表示Rx FIFO空
   \                     ??spi_init_4:
   \   000000DE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E0   0x....             LDR.N    R1,??DataTable6_12
   \   000000E2   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   000000E6   0x....             LDR.N    R2,??DataTable6_14  ;; 0x1a0a0000
   \   000000E8   0x62CA             STR      R2,[R1, #+44]
     92              
     93              
     94              SPI_MCR_REG(SPIN[spin]) &= ~SPI_MCR_HALT_MASK;     //启动SPI传输。1为暂停，0为启动
   \   000000EA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000EC   0x....             LDR.N    R1,??DataTable6_12
   \   000000EE   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   000000F2   0x6809             LDR      R1,[R1, #+0]
   \   000000F4   0x0849             LSRS     R1,R1,#+1
   \   000000F6   0x0049             LSLS     R1,R1,#+1
   \   000000F8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000FA   0x....             LDR.N    R2,??DataTable6_12
   \   000000FC   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   00000100   0x6001             STR      R1,[R0, #+0]
     95              
     96              Delay_ms(1);
   \   00000102   0x2001             MOVS     R0,#+1
   \   00000104   0x.... 0x....      BL       Delay_ms
     97          }
   \   00000108   0xBD01             POP      {R0,PC}          ;; return
     98          
     99          
    100          //=========================================================================
    101          //函数名称：spi_send
    102          //函数参数：spin：SPI通道号。
    103          //          data[]：需要发送的数据。
    104          //          len：数据长度。
    105          //函数返回：无
    106          //功能概要：SPI发送数据。
    107          //=========================================================================

   \                                 In section .text, align 2, keep-with-next
    108          void spi_send(SPIn spin,uint8 data[],uint32 len)
    109          {
   \                     spi_send:
   \   00000000   0xB470             PUSH     {R4-R6}
    110              uint32 i = 0;
   \   00000002   0x2300             MOVS     R3,#+0
    111              uint8 temp;
    112              SPI_TX_WAIT(spin);
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x....             LDR.N    R4,??DataTable6_12
   \   00000008   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   0000000C   0x6AE4             LDR      R4,[R4, #+44]
    113          
    114              do
    115              {
    116                  /*************  清标志位  ***************/
    117                  SPI_SR_REG(SPIN[spin]) = (SPI_SR_EOQF_MASK
    118                                          | SPI_SR_TFUF_MASK
    119                                          | SPI_SR_TFFF_MASK
    120                                          | SPI_SR_RFOF_MASK
    121                                          | SPI_SR_RFDF_MASK
    122                                          );
   \                     ??spi_send_0:
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x....             LDR.N    R3,??DataTable6_12
   \   00000012   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000016   0x....             LDR.N    R4,??DataTable6_14  ;; 0x1a0a0000
   \   00000018   0x62DC             STR      R4,[R3, #+44]
    123              
    124                  /************** 清FIFO计数器 **************/
    125                  SPI_MCR_REG(SPIN[spin])    |=  (SPI_MCR_CLR_TXF_MASK     //Clear TX FIFO.写1清 Tx FIFO counter
    126                                             |SPI_MCR_CLR_RXF_MASK     //Clear RX FIFO. 写1清 the Rx FIFO counter.
    127                                             );
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x....             LDR.N    R3,??DataTable6_12
   \   0000001E   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000022   0x681B             LDR      R3,[R3, #+0]
   \   00000024   0xF453 0x6340      ORRS     R3,R3,#0xC00
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x....             LDR.N    R4,??DataTable6_12
   \   0000002C   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   00000030   0x6023             STR      R3,[R4, #+0]
    128                  //SPI_SR_REG(SPIN[spin]) |= SPI_SR_RFDF_MASK;
    129              }while( (SPI_SR_REG(SPIN[spin]) & SPI_SR_RFDF_MASK));   //如果 Rx FIFO 非空，则清FIFO.
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x....             LDR.N    R3,??DataTable6_12
   \   00000036   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   0000003A   0x6ADB             LDR      R3,[R3, #+44]
   \   0000003C   0x039B             LSLS     R3,R3,#+14
   \   0000003E   0xD4E6             BMI.N    ??spi_send_0
    130          
    131              /***************** 发送len-1个数据 *******************/                                                ;
    132              for(i = 0;i < (len-1);i++)
   \   00000040   0x2300             MOVS     R3,#+0
   \   00000042   0xE020             B.N      ??spi_send_1
    133              {
    134                  //DELAY_MS(1); 
    135                  SPI_PUSHR_REG(SPIN[spin]) = 0 
    136                                          | SPI_PUSHR_CONT_MASK   //Continuous Peripheral Chip Select Enable，1为 传输期间保持PCSn信号 ，即继续传输数据
    137                                          | SPI_PUSHR_CTAS(0)
    138                                          | SPI_PUSHR_TXDATA(data[i]);    //要传输的数据
   \                     ??spi_send_2:
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0x....             LDR.N    R4,??DataTable6_12
   \   00000048   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   0000004C   0x5C5D             LDRB     R5,[R3, R1]
   \   0000004E   0xF055 0x4500      ORRS     R5,R5,#0x80000000
   \   00000052   0x6365             STR      R5,[R4, #+52]
    139                  
    140                  while( !(SPI_SR_REG(SPIN[spin]) & SPI_SR_RFDF_MASK));    //RFDF为1，Rx FIFO is not empty.
   \                     ??spi_send_3:
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x....             LDR.N    R4,??DataTable6_12
   \   00000058   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   0000005C   0x6AE4             LDR      R4,[R4, #+44]
   \   0000005E   0x03A4             LSLS     R4,R4,#+14
   \   00000060   0xD5F8             BPL.N    ??spi_send_3
    141                  temp = (uint8)SPI_POPR_REG(SPIN[spin]);    //读取一次接收的数据    
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x....             LDR.N    R4,??DataTable6_12
   \   00000066   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   0000006A   0x6BA4             LDR      R4,[R4, #+56]
    142                  SPI_SR_REG(SPIN[spin]) |= SPI_SR_RFDF_MASK;
   \   0000006C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006E   0x....             LDR.N    R5,??DataTable6_12
   \   00000070   0xF855 0x5020      LDR      R5,[R5, R0, LSL #+2]
   \   00000074   0x6AED             LDR      R5,[R5, #+44]
   \   00000076   0xF455 0x3500      ORRS     R5,R5,#0x20000
   \   0000007A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007C   0x....             LDR.N    R6,??DataTable6_12
   \   0000007E   0xF856 0x6020      LDR      R6,[R6, R0, LSL #+2]
   \   00000082   0x62F5             STR      R5,[R6, #+44]
    143              }
   \   00000084   0x1C5B             ADDS     R3,R3,#+1
   \                     ??spi_send_1:
   \   00000086   0x1E54             SUBS     R4,R2,#+1
   \   00000088   0x42A3             CMP      R3,R4
   \   0000008A   0xD3DB             BCC.N    ??spi_send_2
    144          
    145              /***************** 发送最后一个数据 *******************/    
    146              SPI_PUSHR_REG(SPIN[spin]) = 0 
    147                             | SPI_PUSHR_CTAS(0)
    148                             | SPI_PUSHR_EOQ_MASK         //End Of Queue，1为 传输SPI最后的数据
    149                             | SPI_PUSHR_TXDATA(data[i]); 
   \   0000008C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008E   0x....             LDR.N    R2,??DataTable6_12
   \   00000090   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000094   0x5C59             LDRB     R1,[R3, R1]
   \   00000096   0xF051 0x6100      ORRS     R1,R1,#0x8000000
   \   0000009A   0x6351             STR      R1,[R2, #+52]
    150              
    151              SPI_EOQF_WAIT(spin);    //要及时把RX FIFO的东西清掉，不然这里就无限等待
   \                     ??spi_send_4:
   \   0000009C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000009E   0x....             LDR.N    R1,??DataTable6_12
   \   000000A0   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   000000A4   0x6AC9             LDR      R1,[R1, #+44]
   \   000000A6   0x00C9             LSLS     R1,R1,#+3
   \   000000A8   0xD5F8             BPL.N    ??spi_send_4
    152              
    153              while( !(SPI_SR_REG(SPIN[spin]) & SPI_SR_RFDF_MASK));    //RFDF为1，Rx FIFO is not empty.
   \                     ??spi_send_5:
   \   000000AA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AC   0x....             LDR.N    R1,??DataTable6_12
   \   000000AE   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   000000B2   0x6AC9             LDR      R1,[R1, #+44]
   \   000000B4   0x0389             LSLS     R1,R1,#+14
   \   000000B6   0xD5F8             BPL.N    ??spi_send_5
    154              temp = (uint8)SPI_POPR_REG(SPIN[spin]);    //读取一次接收的数据          
   \   000000B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BA   0x....             LDR.N    R1,??DataTable6_12
   \   000000BC   0xF851 0x0020      LDR      R0,[R1, R0, LSL #+2]
   \   000000C0   0x6B84             LDR      R4,[R0, #+56]
    155              //SPI_SR_REG(SPIN[spin]) |= SPI_SR_RFDF_MASK;
    156              
    157          
    158          }
   \   000000C2   0xBC70             POP      {R4-R6}
   \   000000C4   0x4770             BX       LR               ;; return
    159          
    160          //=========================================================================
    161          //函数名称：spi_send
    162          //函数参数：spin：SPI通道号。
    163          //          data[]：需要发送的数据。
    164          //          len：数据长度。
    165          //函数返回：无
    166          //功能概要：SPI发送数据。
    167          //=========================================================================

   \                                 In section .text, align 2, keep-with-next
    168          void spi_WR(SPIn spin,uint8* data,uint32 len)
    169          {
   \                     spi_WR:
   \   00000000   0xB430             PUSH     {R4,R5}
    170              uint32 i = 0;
   \   00000002   0x2300             MOVS     R3,#+0
    171          
    172              SPI_TX_WAIT(spin);
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x....             LDR.N    R4,??DataTable6_12
   \   00000008   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   0000000C   0x6AE4             LDR      R4,[R4, #+44]
    173              
    174              do
    175              {
    176                  /*************  清标志位  ***************/
    177                  SPI_SR_REG(SPIN[spin]) = (SPI_SR_EOQF_MASK
    178                                          | SPI_SR_TFUF_MASK
    179                                          | SPI_SR_TFFF_MASK
    180                                          | SPI_SR_RFOF_MASK
    181                                          | SPI_SR_RFDF_MASK
    182                                          );
   \                     ??spi_WR_0:
   \   0000000E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000010   0x....             LDR.N    R3,??DataTable6_12
   \   00000012   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000016   0x....             LDR.N    R4,??DataTable6_14  ;; 0x1a0a0000
   \   00000018   0x62DC             STR      R4,[R3, #+44]
    183              
    184                  /************** 清FIFO计数器 **************/
    185                  SPI_MCR_REG(SPIN[spin])    |=  (SPI_MCR_CLR_TXF_MASK     //Clear TX FIFO.写1清 Tx FIFO counter
    186                                             |SPI_MCR_CLR_RXF_MASK     //Clear RX FIFO. 写1清 the Rx FIFO counter.
    187                                             );        
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x....             LDR.N    R3,??DataTable6_12
   \   0000001E   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000022   0x681B             LDR      R3,[R3, #+0]
   \   00000024   0xF453 0x6340      ORRS     R3,R3,#0xC00
   \   00000028   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002A   0x....             LDR.N    R4,??DataTable6_12
   \   0000002C   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   00000030   0x6023             STR      R3,[R4, #+0]
    188              }while( (SPI_SR_REG(SPIN[spin]) & SPI_SR_RFDF_MASK));   //如果 Rx FIFO 非空，则清FIFO.
   \   00000032   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000034   0x....             LDR.N    R3,??DataTable6_12
   \   00000036   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   0000003A   0x6ADB             LDR      R3,[R3, #+44]
   \   0000003C   0x039B             LSLS     R3,R3,#+14
   \   0000003E   0xD4E6             BMI.N    ??spi_WR_0
    189              
    190              
    191              /***************** 发送len-1个数据 *******************/  
    192              for(i = 0;i < (len-1);i++)
   \   00000040   0x2300             MOVS     R3,#+0
   \   00000042   0xE021             B.N      ??spi_WR_1
    193              {
    194                  SPI_PUSHR_REG(SPIN[spin]) = 0 
    195                                          | SPI_PUSHR_CONT_MASK   //Continuous Peripheral Chip Select Enable，1为 传输期间保持PCSn信号 ，即继续传输数据
    196                                          | SPI_PUSHR_CTAS(0)
    197                                          | SPI_PUSHR_TXDATA(data[i]);    //要传输的数据
   \                     ??spi_WR_2:
   \   00000044   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000046   0x....             LDR.N    R4,??DataTable6_12
   \   00000048   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   0000004C   0x5C5D             LDRB     R5,[R3, R1]
   \   0000004E   0xF055 0x4500      ORRS     R5,R5,#0x80000000
   \   00000052   0x6365             STR      R5,[R4, #+52]
    198                  
    199                  while( !(SPI_SR_REG(SPIN[spin]) & SPI_SR_RFDF_MASK));    //RFDF为1，Rx FIFO is not empty.
   \                     ??spi_WR_3:
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x....             LDR.N    R4,??DataTable6_12
   \   00000058   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   0000005C   0x6AE4             LDR      R4,[R4, #+44]
   \   0000005E   0x03A4             LSLS     R4,R4,#+14
   \   00000060   0xD5F8             BPL.N    ??spi_WR_3
    200                  data[i] = (uint8)SPI_POPR_REG(SPIN[spin]);    //保存接收到的数据 
   \   00000062   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000064   0x....             LDR.N    R4,??DataTable6_12
   \   00000066   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   0000006A   0x6BA4             LDR      R4,[R4, #+56]
   \   0000006C   0x545C             STRB     R4,[R3, R1]
    201                  SPI_SR_REG(SPIN[spin]) |= SPI_SR_RFDF_MASK;
   \   0000006E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000070   0x....             LDR.N    R4,??DataTable6_12
   \   00000072   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   00000076   0x6AE4             LDR      R4,[R4, #+44]
   \   00000078   0xF454 0x3400      ORRS     R4,R4,#0x20000
   \   0000007C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000007E   0x....             LDR.N    R5,??DataTable6_12
   \   00000080   0xF855 0x5020      LDR      R5,[R5, R0, LSL #+2]
   \   00000084   0x62EC             STR      R4,[R5, #+44]
    202              }
   \   00000086   0x1C5B             ADDS     R3,R3,#+1
   \                     ??spi_WR_1:
   \   00000088   0x1E54             SUBS     R4,R2,#+1
   \   0000008A   0x42A3             CMP      R3,R4
   \   0000008C   0xD3DA             BCC.N    ??spi_WR_2
    203              
    204              /***************** 发送最后一个数据 *******************/    
    205              SPI_PUSHR_REG(SPIN[spin]) = 0 
    206                             | SPI_PUSHR_CTAS(0)
    207                             | SPI_PUSHR_EOQ_MASK         //End Of Queue，1为 传输SPI最后的数据
    208                             | SPI_PUSHR_TXDATA(data[i]); 
   \   0000008E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000090   0x....             LDR.N    R2,??DataTable6_12
   \   00000092   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000096   0x5C5C             LDRB     R4,[R3, R1]
   \   00000098   0xF054 0x6400      ORRS     R4,R4,#0x8000000
   \   0000009C   0x6354             STR      R4,[R2, #+52]
    209              
    210              while( !(SPI_SR_REG(SPIN[spin]) & SPI_SR_RFDF_MASK));    //RFDF为1，Rx FIFO is not empty.
   \                     ??spi_WR_4:
   \   0000009E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A0   0x....             LDR.N    R2,??DataTable6_12
   \   000000A2   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   000000A6   0x6AD2             LDR      R2,[R2, #+44]
   \   000000A8   0x0392             LSLS     R2,R2,#+14
   \   000000AA   0xD5F8             BPL.N    ??spi_WR_4
    211              data[i] = (uint8)SPI_POPR_REG(SPIN[spin]);    //保存接收到的数据            
   \   000000AC   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AE   0x....             LDR.N    R2,??DataTable6_12
   \   000000B0   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   000000B4   0x6B92             LDR      R2,[R2, #+56]
   \   000000B6   0x545A             STRB     R2,[R3, R1]
    212          
    213              SPI_EOQF_WAIT(spin);        //要及时把RX FIFO的东西清掉，不然这里就无限等待
   \                     ??spi_WR_5:
   \   000000B8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000BA   0x....             LDR.N    R1,??DataTable6_12
   \   000000BC   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   000000C0   0x6AC9             LDR      R1,[R1, #+44]
   \   000000C2   0x00C9             LSLS     R1,R1,#+3
   \   000000C4   0xD5F8             BPL.N    ??spi_WR_5
    214          }
   \   000000C6   0xBC30             POP      {R4,R5}
   \   000000C8   0x4770             BX       LR               ;; return
    215          
    216          //=========================================================================
    217          //函数名称：spi_re
    218          //函数参数：spin：SPI通道号。
    219          //          data[]：需要接收的数据。
    220          //函数返回：返回接收到字节的长度
    221          //功能概要：SPI接收数据。
    222          //=========================================================================

   \                                 In section .text, align 2, keep-with-next
    223          uint32 spi_re_max(SPIn spin,uint8 data[],uint32 maxlen)
    224          {
   \                     spi_re_max:
   \   00000000   0xB430             PUSH     {R4,R5}
    225              uint32   n=0;
   \   00000002   0x2300             MOVS     R3,#+0
    226          
    227              while(SPI_SR_REG(SPIN[spin]) & SPI_SR_RFDF_MASK)    //RFDF为1，Rx FIFO is not empty.
   \                     ??spi_re_max_0:
   \   00000004   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000006   0x....             LDR.N    R4,??DataTable6_12
   \   00000008   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   0000000C   0x6AE4             LDR      R4,[R4, #+44]
   \   0000000E   0x03A4             LSLS     R4,R4,#+14
   \   00000010   0xD514             BPL.N    ??spi_re_max_1
    228              {
    229                  data[n++] = (uint8)SPI_POPR_REG(SPIN[spin]);    //保存接收到的数据            
   \   00000012   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000014   0x....             LDR.N    R4,??DataTable6_12
   \   00000016   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   0000001A   0x6BA4             LDR      R4,[R4, #+56]
   \   0000001C   0x545C             STRB     R4,[R3, R1]
   \   0000001E   0x1C5B             ADDS     R3,R3,#+1
    230                  SPI_SR_REG(SPIN[spin]) |= SPI_SR_RFDF_MASK;
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x....             LDR.N    R4,??DataTable6_12
   \   00000024   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   00000028   0x6AE4             LDR      R4,[R4, #+44]
   \   0000002A   0xF454 0x3400      ORRS     R4,R4,#0x20000
   \   0000002E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000030   0x....             LDR.N    R5,??DataTable6_12
   \   00000032   0xF855 0x5020      LDR      R5,[R5, R0, LSL #+2]
   \   00000036   0x62EC             STR      R4,[R5, #+44]
    231                  if(n>=maxlen)
   \   00000038   0x4293             CMP      R3,R2
   \   0000003A   0xD3E3             BCC.N    ??spi_re_max_0
    232                  {
    233                      break;
    234                  }
    235              }
    236          #if 1      
    237              /*************  清标志位  ***************/
    238              SPI_SR_REG(SPIN[spin]) = (  SPI_SR_EOQF_MASK
    239                                         | SPI_SR_TFUF_MASK
    240                                         | SPI_SR_TFFF_MASK
    241                                         | SPI_SR_RFOF_MASK
    242                                         | SPI_SR_RFDF_MASK
    243                                         );
   \                     ??spi_re_max_1:
   \   0000003C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003E   0x....             LDR.N    R1,??DataTable6_12
   \   00000040   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000044   0x....             LDR.N    R2,??DataTable6_14  ;; 0x1a0a0000
   \   00000046   0x62CA             STR      R2,[R1, #+44]
    244              
    245              /************** 清FIFO计数器 **************/
    246              SPI_MCR_REG(SPIN[spin])  |=  (SPI_MCR_CLR_TXF_MASK     //Clear the Tx FIFO counter.
    247                                          |SPI_MCR_CLR_RXF_MASK     //Clear the Rx FIFO counter.
    248                                          );
   \   00000048   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000004A   0x....             LDR.N    R1,??DataTable6_12
   \   0000004C   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000050   0x6809             LDR      R1,[R1, #+0]
   \   00000052   0xF451 0x6140      ORRS     R1,R1,#0xC00
   \   00000056   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000058   0x....             LDR.N    R2,??DataTable6_12
   \   0000005A   0xF852 0x0020      LDR      R0,[R2, R0, LSL #+2]
   \   0000005E   0x6001             STR      R1,[R0, #+0]
    249          #endif
    250              return n; //n为0，则没接收到数据
   \   00000060   0x0018             MOVS     R0,R3
   \   00000062   0xBC30             POP      {R4,R5}
   \   00000064   0x4770             BX       LR               ;; return
    251          }
    252          
    253          //=========================================================================
    254          //函数名称：spi_re
    255          //函数参数：spin：SPI通道号。
    256          //          data[]：需要接收的数据。
    257          //函数返回：返回接收到字节的长度
    258          //功能概要：SPI接收数据。
    259          //=========================================================================

   \                                 In section .text, align 2, keep-with-next
    260          uint32 spi_re(SPIn spin,uint8 data[])
    261          {
   \                     spi_re:
   \   00000000   0xB410             PUSH     {R4}
    262              uint32   n=0;
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0xE012             B.N      ??spi_re_0
    263          
    264              while(SPI_SR_REG(SPIN[spin]) & SPI_SR_RFDF_MASK)    //RFDF为1，Rx FIFO is not empty.
    265              {
    266                  data[n++] = (uint8)SPI_POPR_REG(SPIN[spin]);    //保存接收到的数据            
   \                     ??spi_re_1:
   \   00000006   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000008   0x....             LDR.N    R3,??DataTable6_12
   \   0000000A   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   0000000E   0x6B9B             LDR      R3,[R3, #+56]
   \   00000010   0x5453             STRB     R3,[R2, R1]
   \   00000012   0x1C52             ADDS     R2,R2,#+1
    267                  SPI_SR_REG(SPIN[spin]) |= SPI_SR_RFDF_MASK;
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x....             LDR.N    R3,??DataTable6_12
   \   00000018   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   0000001C   0x6ADB             LDR      R3,[R3, #+44]
   \   0000001E   0xF453 0x3300      ORRS     R3,R3,#0x20000
   \   00000022   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000024   0x....             LDR.N    R4,??DataTable6_12
   \   00000026   0xF854 0x4020      LDR      R4,[R4, R0, LSL #+2]
   \   0000002A   0x62E3             STR      R3,[R4, #+44]
    268              }
   \                     ??spi_re_0:
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x....             LDR.N    R3,??DataTable6_12
   \   00000030   0xF853 0x3020      LDR      R3,[R3, R0, LSL #+2]
   \   00000034   0x6ADB             LDR      R3,[R3, #+44]
   \   00000036   0x039B             LSLS     R3,R3,#+14
   \   00000038   0xD4E5             BMI.N    ??spi_re_1
    269               
    270              /*************  清标志位  ***************/
    271              SPI_SR_REG(SPIN[spin]) = (SPI_SR_EOQF_MASK
    272                                 | SPI_SR_TFUF_MASK
    273                                 | SPI_SR_TFFF_MASK
    274                                 | SPI_SR_RFOF_MASK
    275                                 | SPI_SR_RFDF_MASK
    276                                 );
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x....             LDR.N    R1,??DataTable6_12
   \   0000003E   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   00000042   0x....             LDR.N    R3,??DataTable6_14  ;; 0x1a0a0000
   \   00000044   0x62CB             STR      R3,[R1, #+44]
    277              
    278              /************** 清FIFO计数器 **************/
    279              SPI_MCR_REG(SPIN[spin])  |=  (SPI_MCR_CLR_TXF_MASK     //Clear the Tx FIFO counter.
    280                                          |SPI_MCR_CLR_RXF_MASK     //Clear the Rx FIFO counter.
    281                                          );
   \   00000046   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000048   0x....             LDR.N    R1,??DataTable6_12
   \   0000004A   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000004E   0x6809             LDR      R1,[R1, #+0]
   \   00000050   0xF451 0x6140      ORRS     R1,R1,#0xC00
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x....             LDR.N    R3,??DataTable6_12
   \   00000058   0xF853 0x0020      LDR      R0,[R3, R0, LSL #+2]
   \   0000005C   0x6001             STR      R1,[R0, #+0]
    282          
    283              return n; //n为0，则没接收到数据
   \   0000005E   0x0010             MOVS     R0,R2
   \   00000060   0xBC10             POP      {R4}
   \   00000062   0x4770             BX       LR               ;; return
    284          }
    285              
    286          
    287          /*************************************************************************
    288          *                             野火嵌入式开发工作室
    289          *  
    290          *  函数名称：spi_irq_EN
    291          *  功能说明：开SPI中断
    292          *  参数说明：SPIn       模块号（SPI0~SPI2）
    293          *  函数返回：无
    294          *  修改时间：2012-1-20
    295          *  备    注：
    296          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    297          void spi_irq_EN(SPIn spin)
    298          {
   \                     spi_irq_EN:
   \   00000000   0xB580             PUSH     {R7,LR}
    299            SPI_RSER_REG(SPIN[spin]) |=SPI_RSER_RFDF_RE_MASK;     //开启SPI接收中断 
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x....             LDR.N    R1,??DataTable6_12
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0x6B09             LDR      R1,[R1, #+48]
   \   0000000C   0xF451 0x3100      ORRS     R1,R1,#0x20000
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x....             LDR.N    R2,??DataTable6_12
   \   00000014   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000018   0x6311             STR      R1,[R2, #+48]
    300            enable_irq(spin+26);			                //开接收引脚的IRQ中断
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x301A             ADDS     R0,R0,#+26
   \   0000001E   0x.... 0x....      BL       enable_irq
    301          }
   \   00000022   0xBD01             POP      {R0,PC}          ;; return
    302          
    303          /*************************************************************************
    304          *                             野火嵌入式开发工作室
    305          *  
    306          *  函数名称：spi_irq_DIS
    307          *  功能说明：开串口接收中断
    308          *  参数说明：UARTn       模块号（UART0~UART5）
    309          *  函数返回：无
    310          *  修改时间：2012-1-20
    311          *  备    注：
    312          *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    313          void spi_irq_DIS(SPIn spin)
    314          {
   \                     spi_irq_DIS:
   \   00000000   0xB580             PUSH     {R7,LR}
    315            SPI_RSER_REG(SPIN[spin]) &=~SPI_RSER_RFDF_RE_MASK;    //关闭SPI接收中断  
   \   00000002   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000004   0x....             LDR.N    R1,??DataTable6_12
   \   00000006   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000A   0x6B09             LDR      R1,[R1, #+48]
   \   0000000C   0xF431 0x3100      BICS     R1,R1,#0x20000
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0x....             LDR.N    R2,??DataTable6_12
   \   00000014   0xF852 0x2020      LDR      R2,[R2, R0, LSL #+2]
   \   00000018   0x6311             STR      R1,[R2, #+48]
    316            disable_irq(spin+26);			                //开接收引脚的IRQ中断
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x301A             ADDS     R0,R0,#+26
   \   0000001E   0x.... 0x....      BL       disable_irq
    317          }
   \   00000022   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x4004803C         DC32     0x4004803c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x4004903C         DC32     0x4004903c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x40049040         DC32     0x40049040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x40049044         DC32     0x40049044

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x4004D004         DC32     0x4004d004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x4004D008         DC32     0x4004d008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x4004D00C         DC32     0x4004d00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x4004D010         DC32     0x4004d010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x40048030         DC32     0x40048030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x4004C034         DC32     0x4004c034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x4004C030         DC32     0x4004c030

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x4004C038         DC32     0x4004c038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x........         DC32     SPIN

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x38010000         DC32     0x38010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x1A0A0000         DC32     0x1a0a0000

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  spi_WR
        8  spi_init
             8 -> Delay_ms
        8  spi_irq_DIS
             8 -> disable_irq
        8  spi_irq_EN
             8 -> enable_irq
        4  spi_re
        8  spi_re_max
       12  spi_send


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
      12  SPIN
     202  spi_WR
     266  spi_init
      36  spi_irq_DIS
      36  spi_irq_EN
     100  spi_re
     102  spi_re_max
     198  spi_send

 
    12 bytes in section .data
 1 000 bytes in section .text
 
 1 000 bytes of CODE memory
    12 bytes of DATA memory

Errors: none
Warnings: 2
