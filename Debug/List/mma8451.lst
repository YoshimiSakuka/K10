###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        26/May/2016  12:04:57
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\ye\Desktop\NFS.NO 2 - 副本\common\mma8451.c
#    Command line =  
#        "C:\Users\ye\Desktop\NFS.NO 2 - 副本\common\mma8451.c" -D DEBUG -lCN
#        "C:\Users\ye\Desktop\NFS.NO 2 - 副本\Debug\List\" -lB
#        "C:\Users\ye\Desktop\NFS.NO 2 - 副本\Debug\List\" -o
#        "C:\Users\ye\Desktop\NFS.NO 2 - 副本\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -Ol --use_c++_inline
#    List file    =  C:\Users\ye\Desktop\NFS.NO 2 - 副本\Debug\List\mma8451.lst
#    Object file  =  C:\Users\ye\Desktop\NFS.NO 2 - 副本\Debug\Obj\mma8451.o
#
###############################################################################

C:\Users\ye\Desktop\NFS.NO 2 - 副本\common\mma8451.c
      1          #include"mma8451.h"
      2          
      3          
      4          
      5          
      6          

   \                                 In section .text, align 2, keep-with-next
      7          void MMA8451_Init(void)                    //地址0x1d
      8          {
   \                     MMA8451_Init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
      9              I2C_init(I2C0);
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      BL       I2C_init
     10              I2C_WriteAddr(I2C0, 0x1d, 0x0f, 0x10); //低通滤波
   \   00000008   0x2310             MOVS     R3,#+16
   \   0000000A   0x220F             MOVS     R2,#+15
   \   0000000C   0x211D             MOVS     R1,#+29
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       I2C_WriteAddr
     11              I2C_WriteAddr(I2C0, 0x1d, 0x0e, 0x00); //2G
   \   00000014   0x2300             MOVS     R3,#+0
   \   00000016   0x220E             MOVS     R2,#+14
   \   00000018   0x211D             MOVS     R1,#+29
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x.... 0x....      BL       I2C_WriteAddr
     12              I2C_WriteAddr(I2C0, 0x1d, 0x2a, 0x01); //激活 
   \   00000020   0x2301             MOVS     R3,#+1
   \   00000022   0x222A             MOVS     R2,#+42
   \   00000024   0x211D             MOVS     R1,#+29
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      BL       I2C_WriteAddr
     13          }
   \   0000002C   0xBD01             POP      {R0,PC}          ;; return
     14          
     15          
     16          
     17          
     18          
     19          //uint16 ReadAcceleration(int time)
     20          //{
     21          //    uint16 n;
     22          //    uint8 zz[2];
     23          //    int sign;
     24          //    float v;
     25          //    uint16 w;
     26          //    int z=0; 
     27          //    
     28          //    for(z=0;z<time;z++)
     29          //    {
     30          //      zz[0] = I2C_ReadAddr(I2C0, 0x1d, 0x05);       //z轴高有效位  X 0x01 Y 0x03
     31          //      zz[1] = I2C_ReadAddr(I2C0, 0x1d, 0x06);       //z轴低有效位  X 0x02 Y 0x04      
     32          //      if(zz[0]>0x7f)
     33          //      {
     34          //        sign = -1;
     35          //        n = (int)zz[0];	
     36          //        zz[1] = zz[1]>>2;
     37          //        n = n<<6 | zz[1];
     38          //        n = (~n + 1)&0X3FFF;                    //
     39          //      }
     40          //      else
     41          //      {
     42          //        sign = 1;
     43          //        n = (int)zz[0];	
     44          //        zz[1] = zz[1]>>2;
     45          //        n = n<<6 | zz[1];
     46          //      }
     47          //      v = sign * ((float)n);
     48          //      w += (uint16)((v ) * 0.25);//+ 5120
     49          //    }
     50          //      return w; 
     51          //
     52          //}
     53          

   \                                 In section .text, align 2, keep-with-next
     54          float ReadAcceleration(int f,int time)//0 1
     55          {
   \                     ReadAcceleration: (+1)
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   \   00000006   0x0006             MOVS     R6,R0
   \   00000008   0x4688             MOV      R8,R1
     56              uint16 n;
     57              uint8 zz[2];
     58              int sign;
     59              float v;
     60              double w = 0;
   \   0000000A   0x2400             MOVS     R4,#+0
   \   0000000C   0x2500             MOVS     R5,#+0
     61              int z=0; 
   \   0000000E   0x2700             MOVS     R7,#+0
     62              
     63              for(z=0;z<time;z++)
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x0007             MOVS     R7,R0
   \   00000014   0xE020             B.N      ??ReadAcceleration_0
     64              {
     65                if(f == 0)//Z
     66                {
     67                  zz[0] = I2C_ReadAddr(I2C0, 0x1d, 0x05);       //z轴高有效位  X 0x01 Y 0x03
     68                  zz[1] = I2C_ReadAddr(I2C0, 0x1d, 0x06);       //z轴低有效位  X 0x02 Y 0x04      
     69                }
     70                else if(f == 1)//X
     71                {
     72                  zz[0] = I2C_ReadAddr(I2C0, 0x1d, 0x01);       //z轴高有效位  X 0x01 Y 0x03
     73                  zz[1] = I2C_ReadAddr(I2C0, 0x1d, 0x02);       //z轴低有效位  X 0x02 Y 0x04
     74                }
     75                else if(f == 2)//Y
     76                {
     77                  zz[0] = I2C_ReadAddr(I2C0, 0x1d, 0x03);       //z轴高有效位  X 0x01 Y 0x03
     78                  zz[1] = I2C_ReadAddr(I2C0, 0x1d, 0x04);       //z轴低有效位  X 0x02 Y 0x04
     79                }
     80                if(zz[0]>0x7f)
     81                {
     82                  sign = -1;
     83                  n = (int)zz[0];	
     84                  zz[1] = zz[1]>>2;
     85                  n = n<<6 | zz[1];
     86                  n = (~n + 1)&0X3FFF;                    //
     87                }
     88                else
     89                {
     90                  sign = 1;
   \                     ??ReadAcceleration_1: (+1)
   \   00000016   0x2001             MOVS     R0,#+1
     91                  n = (int)zz[0];	
   \   00000018   0xF89D 0x9000      LDRB     R9,[SP, #+0]
     92                  zz[1] = zz[1]>>2;
   \   0000001C   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x0889             LSRS     R1,R1,#+2
   \   00000024   0xF88D 0x1001      STRB     R1,[SP, #+1]
     93                  n = n<<6 | zz[1];
   \   00000028   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   0000002C   0xEA51 0x1989      ORRS     R9,R1,R9, LSL #+6
     94                }
     95                v = sign * ((float)n);
   \                     ??ReadAcceleration_2: (+1)
   \   00000030   0x.... 0x....      BL       __aeabi_i2f
   \   00000034   0x4682             MOV      R10,R0
   \   00000036   0xFA1F 0xF989      UXTH     R9,R9            ;; ZeroExt  R9,R9,#+16,#+16
   \   0000003A   0x4648             MOV      R0,R9
   \   0000003C   0x.... 0x....      BL       __aeabi_ui2f
   \   00000040   0x4651             MOV      R1,R10
   \   00000042   0x.... 0x....      BL       __aeabi_fmul
     96                w += v ;//+ 5120
   \   00000046   0x.... 0x....      BL       __aeabi_f2d
   \   0000004A   0x0022             MOVS     R2,R4
   \   0000004C   0x002B             MOVS     R3,R5
   \   0000004E   0x.... 0x....      BL       __aeabi_dadd
   \   00000052   0x0004             MOVS     R4,R0
   \   00000054   0x000D             MOVS     R5,R1
   \   00000056   0x1C7F             ADDS     R7,R7,#+1
   \                     ??ReadAcceleration_0: (+1)
   \   00000058   0x4547             CMP      R7,R8
   \   0000005A   0xDA4B             BGE.N    ??ReadAcceleration_3
   \   0000005C   0x2E00             CMP      R6,#+0
   \   0000005E   0xD10E             BNE.N    ??ReadAcceleration_4
   \   00000060   0x2205             MOVS     R2,#+5
   \   00000062   0x211D             MOVS     R1,#+29
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x.... 0x....      BL       I2C_ReadAddr
   \   0000006A   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000006E   0x2206             MOVS     R2,#+6
   \   00000070   0x211D             MOVS     R1,#+29
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x.... 0x....      BL       I2C_ReadAddr
   \   00000078   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   0000007C   0xE020             B.N      ??ReadAcceleration_5
   \                     ??ReadAcceleration_4: (+1)
   \   0000007E   0x2E01             CMP      R6,#+1
   \   00000080   0xD10E             BNE.N    ??ReadAcceleration_6
   \   00000082   0x2201             MOVS     R2,#+1
   \   00000084   0x211D             MOVS     R1,#+29
   \   00000086   0x2000             MOVS     R0,#+0
   \   00000088   0x.... 0x....      BL       I2C_ReadAddr
   \   0000008C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000090   0x2202             MOVS     R2,#+2
   \   00000092   0x211D             MOVS     R1,#+29
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0x.... 0x....      BL       I2C_ReadAddr
   \   0000009A   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   0000009E   0xE00F             B.N      ??ReadAcceleration_5
   \                     ??ReadAcceleration_6: (+1)
   \   000000A0   0x2E02             CMP      R6,#+2
   \   000000A2   0xD10D             BNE.N    ??ReadAcceleration_5
   \   000000A4   0x2203             MOVS     R2,#+3
   \   000000A6   0x211D             MOVS     R1,#+29
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0x.... 0x....      BL       I2C_ReadAddr
   \   000000AE   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   000000B2   0x2204             MOVS     R2,#+4
   \   000000B4   0x211D             MOVS     R1,#+29
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x.... 0x....      BL       I2C_ReadAddr
   \   000000BC   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \                     ??ReadAcceleration_5: (+1)
   \   000000C0   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000C4   0x2880             CMP      R0,#+128
   \   000000C6   0xDBA6             BLT.N    ??ReadAcceleration_1
   \   000000C8   0xF05F 0x30FF      MOVS     R0,#-1
   \   000000CC   0xF89D 0x9000      LDRB     R9,[SP, #+0]
   \   000000D0   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   000000D4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   000000D6   0x0889             LSRS     R1,R1,#+2
   \   000000D8   0xF88D 0x1001      STRB     R1,[SP, #+1]
   \   000000DC   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   000000E0   0xEA51 0x1989      ORRS     R9,R1,R9, LSL #+6
   \   000000E4   0xEA7F 0x0109      MVNS     R1,R9
   \   000000E8   0x1C49             ADDS     R1,R1,#+1
   \   000000EA   0xEA5F 0x4981      LSLS     R9,R1,#+18       ;; ZeroExtS R9,R1,#+18,#+18
   \   000000EE   0xEA5F 0x4999      LSRS     R9,R9,#+18
   \   000000F2   0xE79D             B.N      ??ReadAcceleration_2
     97              }
     98              v = w / time;
   \                     ??ReadAcceleration_3: (+1)
   \   000000F4   0x4640             MOV      R0,R8
   \   000000F6   0x.... 0x....      BL       __aeabi_i2d
   \   000000FA   0x0002             MOVS     R2,R0
   \   000000FC   0x000B             MOVS     R3,R1
   \   000000FE   0x0020             MOVS     R0,R4
   \   00000100   0x0029             MOVS     R1,R5
   \   00000102   0x.... 0x....      BL       __aeabi_ddiv
   \   00000106   0x.... 0x....      BL       __aeabi_d2f
     99                return v; 
   \   0000010A   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}  ;; return
    100          
    101          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   MMA8451_Init
         8   -> I2C_WriteAddr
         8   -> I2C_init
      40   ReadAcceleration
        40   -> I2C_ReadAddr
        40   -> __aeabi_d2f
        40   -> __aeabi_dadd
        40   -> __aeabi_ddiv
        40   -> __aeabi_f2d
        40   -> __aeabi_fmul
        40   -> __aeabi_i2d
        40   -> __aeabi_i2f
        40   -> __aeabi_ui2f


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      46  MMA8451_Init
     270  ReadAcceleration

 
 316 bytes in section .text
 
 316 bytes of CODE memory

Errors: none
Warnings: none
