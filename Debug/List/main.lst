###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        07/Jun/2016  22:55:40
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  C:\Users\yu2ho\Desktop\K10\common\main.c
#    Command line =  
#        C:\Users\yu2ho\Desktop\K10\common\main.c -D DEBUG -lCN
#        C:\Users\yu2ho\Desktop\K10\Debug\List\ -lB
#        C:\Users\yu2ho\Desktop\K10\Debug\List\ -o
#        C:\Users\yu2ho\Desktop\K10\Debug\Obj\ --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "E:\Program Files\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -Ol --use_c++_inline
#    List file    =  C:\Users\yu2ho\Desktop\K10\Debug\List\main.lst
#    Object file  =  C:\Users\yu2ho\Desktop\K10\Debug\Obj\main.o
#
###############################################################################

C:\Users\yu2ho\Desktop\K10\common\main.c
      1          #include "..\K60_datatype.h"
      2          
      3          #include "stdio.h"
      4          #include "stdlib.h"
      5          #include "string.h"
      6          #include "Oled.h"
      7          
      8          
      9          

   \                                 In section .bss, align 4
     10          int x=0;
   \                     x:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
     11          int abc=0;
   \                     abc:
   \   00000000                      DS8 4
     12          

   \                                 In section .bss, align 4
     13          int zhengfanzhuan2;
   \                     zhengfanzhuan2:
   \   00000000                      DS8 4

   \                                 In section .text, align 4, keep-with-next
     14          void Delay_ccd(int num)
     15          {
     16          int i,j,k;
     17          for(j = 0;j < num;j++)
   \                     Delay_ccd: (+1)
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0xE000             B.N      ??Delay_ccd_0
   \                     ??Delay_ccd_1: (+1)
   \   00000004   0x1C52             ADDS     R2,R2,#+1
   \                     ??Delay_ccd_0: (+1)
   \   00000006   0x4282             CMP      R2,R0
   \   00000008   0xDA13             BGE.N    ??Delay_ccd_2
     18          {
     19          for(i = 0;i < 245;i++)
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0xE00D             B.N      ??Delay_ccd_3
     20          {
     21          for(k = 0;k < 245;k++)
     22          {
     23          asm("nop");
   \                     ??Delay_ccd_4: (+1)
   \   0000000E   0xBF00             nop
     24          asm("nop");
   \   00000010   0xBF00             nop
     25          asm("nop");
   \   00000012   0xBF00             nop
     26          asm("nop");
   \   00000014   0xBF00             nop
     27          asm("nop");
   \   00000016   0xBF00             nop
     28          asm("nop");
   \   00000018   0xBF00             nop
     29          asm("nop");
   \   0000001A   0xBF00             nop
     30          asm("nop");
   \   0000001C   0xBF00             nop
     31          asm("nop");
   \   0000001E   0xBF00             nop
     32          asm("nop");
   \   00000020   0xBF00             nop
     33          }
   \   00000022   0x1C5B             ADDS     R3,R3,#+1
   \                     ??Delay_ccd_5: (+1)
   \   00000024   0x2BF5             CMP      R3,#+245
   \   00000026   0xDBF2             BLT.N    ??Delay_ccd_4
   \   00000028   0x1C49             ADDS     R1,R1,#+1
   \                     ??Delay_ccd_3: (+1)
   \   0000002A   0x29F5             CMP      R1,#+245
   \   0000002C   0xDAEA             BGE.N    ??Delay_ccd_1
   \   0000002E   0x2300             MOVS     R3,#+0
   \   00000030   0xE7F8             B.N      ??Delay_ccd_5
     34          }
     35          }
     36          }
   \                     ??Delay_ccd_2: (+1)
   \   00000032   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
     37          int zhengfanzhuan=0;
   \                     zhengfanzhuan:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
     38          void zhengzhuan(void){//zhengzhuan--------------------------------------------
   \                     zhengzhuan: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     39            Delay_ccd(100);
   \   00000002   0x2064             MOVS     R0,#+100
   \   00000004   0x.... 0x....      BL       Delay_ccd
     40            FTM0_C7V=abc;//abc
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable6
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable6_1  ;; 0x40038048
   \   00000012   0x6008             STR      R0,[R1, #+0]
     41            FTM0_C6V=0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable6_2  ;; 0x40038040
   \   0000001A   0x6008             STR      R0,[R1, #+0]
     42            zhengfanzhuan=0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable6_3
   \   00000022   0x6008             STR      R0,[R1, #+0]
     43          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
     44          void fanzhuan(void){ //fanzhuan-----------------------------------------
   \                     fanzhuan: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     45            Delay_ccd(100);
   \   00000002   0x2064             MOVS     R0,#+100
   \   00000004   0x.... 0x....      BL       Delay_ccd
     46            FTM0_C7V=0;//abc
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable6_1  ;; 0x40038048
   \   0000000E   0x6008             STR      R0,[R1, #+0]
     47            FTM0_C6V=abc;
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable6
   \   00000014   0x6800             LDR      R0,[R0, #+0]
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable6_2  ;; 0x40038040
   \   0000001A   0x6008             STR      R0,[R1, #+0]
     48            zhengfanzhuan=1;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable6_3
   \   00000022   0x6008             STR      R0,[R1, #+0]
     49          }
   \   00000024   0xBD01             POP      {R0,PC}          ;; return
     50          

   \                                 In section .text, align 2, keep-with-next
     51          void IO_init()
     52          {
   \                     IO_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     53          //五向开关
     54          GPIO_Init(PORT_A,12,GPI_UP,LVL_H); 
   \   00000002   0x2301             MOVS     R3,#+1
   \   00000004   0x2203             MOVS     R2,#+3
   \   00000006   0x210C             MOVS     R1,#+12
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       GPIO_Init
     55          GPIO_Init(PORT_A,13,GPI_UP,LVL_H);
   \   0000000E   0x2301             MOVS     R3,#+1
   \   00000010   0x2203             MOVS     R2,#+3
   \   00000012   0x210D             MOVS     R1,#+13
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x.... 0x....      BL       GPIO_Init
     56          GPIO_Init(PORT_A,14,GPI_UP,LVL_H); 
   \   0000001A   0x2301             MOVS     R3,#+1
   \   0000001C   0x2203             MOVS     R2,#+3
   \   0000001E   0x210E             MOVS     R1,#+14
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       GPIO_Init
     57          GPIO_Init(PORT_A,15,GPI_UP,LVL_H);                                  
   \   00000026   0x2301             MOVS     R3,#+1
   \   00000028   0x2203             MOVS     R2,#+3
   \   0000002A   0x210F             MOVS     R1,#+15
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       GPIO_Init
     58          GPIO_Init(PORT_A,16,GPI_UP,LVL_H);
   \   00000032   0x2301             MOVS     R3,#+1
   \   00000034   0x2203             MOVS     R2,#+3
   \   00000036   0x2110             MOVS     R1,#+16
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x.... 0x....      BL       GPIO_Init
     59          
     60          
     61          //guangdianguan
     62          GPIO_Init(PORT_C,0,GPI,LVL_H);
   \   0000003E   0x2301             MOVS     R3,#+1
   \   00000040   0x2200             MOVS     R2,#+0
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0x.... 0x....      BL       GPIO_Init
     63          GPIO_Init(PORT_C,8,GPI,LVL_H); 
   \   0000004A   0x2301             MOVS     R3,#+1
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0x2108             MOVS     R1,#+8
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0x.... 0x....      BL       GPIO_Init
     64          
     65          
     66          
     67          
     68          //dt
     69          GPIO_Init(PORT_C,6,GPO,LVL_H);                                  
   \   00000056   0x2301             MOVS     R3,#+1
   \   00000058   0x2201             MOVS     R2,#+1
   \   0000005A   0x2106             MOVS     R1,#+6
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0x.... 0x....      BL       GPIO_Init
     70          //GPIO_Init(PORT_C,7,GPI,LVL_H);  //////////////////////////////////////
     71          
     72          
     73          
     74          GPIO_Init(PORT_A,19,GPO_HDS,LVL_L);               //蜂鸣器
   \   00000062   0x2300             MOVS     R3,#+0
   \   00000064   0x2241             MOVS     R2,#+65
   \   00000066   0x2113             MOVS     R1,#+19
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      BL       GPIO_Init
     75          
     76          
     77          
     78           GPIO_Init(PORT_C,10,GPI_UP,LVL_H);               //按键
   \   0000006E   0x2301             MOVS     R3,#+1
   \   00000070   0x2203             MOVS     R2,#+3
   \   00000072   0x210A             MOVS     R1,#+10
   \   00000074   0x2002             MOVS     R0,#+2
   \   00000076   0x.... 0x....      BL       GPIO_Init
     79           GPIO_Init(PORT_C,12,GPI_UP,LVL_H);
   \   0000007A   0x2301             MOVS     R3,#+1
   \   0000007C   0x2203             MOVS     R2,#+3
   \   0000007E   0x210C             MOVS     R1,#+12
   \   00000080   0x2002             MOVS     R0,#+2
   \   00000082   0x.... 0x....      BL       GPIO_Init
     80          
     81          
     82          
     83          GPIO_Init(PORT_B,22,GPO,LVL_H);   // 后  CLK
   \   00000086   0x2301             MOVS     R3,#+1
   \   00000088   0x2201             MOVS     R2,#+1
   \   0000008A   0x2116             MOVS     R1,#+22
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0x.... 0x....      BL       GPIO_Init
     84          GPIO_Init(PORT_C,3,GPO,LVL_H);  //  后  SI
   \   00000092   0x2301             MOVS     R3,#+1
   \   00000094   0x2201             MOVS     R2,#+1
   \   00000096   0x2103             MOVS     R1,#+3
   \   00000098   0x2002             MOVS     R0,#+2
   \   0000009A   0x.... 0x....      BL       GPIO_Init
     85          
     86           
     87          GPIO_Init(PORT_B,17,GPI_UP,LVL_H);    // 前   CLK
   \   0000009E   0x2301             MOVS     R3,#+1
   \   000000A0   0x2203             MOVS     R2,#+3
   \   000000A2   0x2111             MOVS     R1,#+17
   \   000000A4   0x2001             MOVS     R0,#+1
   \   000000A6   0x.... 0x....      BL       GPIO_Init
     88          GPIO_Init(PORT_B,16,GPI_UP,LVL_H);    // 前   SI
   \   000000AA   0x2301             MOVS     R3,#+1
   \   000000AC   0x2203             MOVS     R2,#+3
   \   000000AE   0x2110             MOVS     R1,#+16
   \   000000B0   0x2001             MOVS     R0,#+1
   \   000000B2   0x.... 0x....      BL       GPIO_Init
     89          
     90          GPIO_Init(PORT_C,4,GPI_UP,LVL_H);//按键------------------------------------------------------------------
   \   000000B6   0x2301             MOVS     R3,#+1
   \   000000B8   0x2203             MOVS     R2,#+3
   \   000000BA   0x2104             MOVS     R1,#+4
   \   000000BC   0x2002             MOVS     R0,#+2
   \   000000BE   0x.... 0x....      BL       GPIO_Init
     91            GPIO_Init(PORT_C,6,GPI_UP,LVL_H);
   \   000000C2   0x2301             MOVS     R3,#+1
   \   000000C4   0x2203             MOVS     R2,#+3
   \   000000C6   0x2106             MOVS     R1,#+6
   \   000000C8   0x2002             MOVS     R0,#+2
   \   000000CA   0x.... 0x....      BL       GPIO_Init
     92            GPIO_Init(PORT_C,8,GPI_UP,LVL_H); 
   \   000000CE   0x2301             MOVS     R3,#+1
   \   000000D0   0x2203             MOVS     R2,#+3
   \   000000D2   0x2108             MOVS     R1,#+8
   \   000000D4   0x2002             MOVS     R0,#+2
   \   000000D6   0x.... 0x....      BL       GPIO_Init
     93          
     94          
     95          
     96          
     97          }
   \   000000DA   0xBD01             POP      {R0,PC}          ;; return
     98          

   \                                 In section .bss, align 4
     99          int H=0;
   \                     H:
   \   00000000                      DS8 4
    100          

   \                                 In section .bss, align 4
    101          int white_mark;
   \                     white_mark:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    102          int white_markL;
   \                     white_markL:
   \   00000000                      DS8 4
    103          

   \                                 In section .bss, align 4
    104          int White_markL=0;
   \                     White_markL:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    105          int white_markR;
   \                     white_markR:
   \   00000000                      DS8 4
    106          

   \                                 In section .bss, align 4
    107          int White_markR=0;
   \                     White_markR:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    108          int White_mark=0;
   \                     White_mark:
   \   00000000                      DS8 4
    109          

   \                                 In section .bss, align 4
    110          int Stopflag;
   \                     Stopflag:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    111          int StopFlag;
   \                     StopFlag:
   \   00000000                      DS8 4
    112          

   \                                 In section .bss, align 1
    113          byte Key_Q;
   \                     Key_Q:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    114          byte Key_H;
   \                     Key_H:
   \   00000000                      DS8 1
    115          
    116          
    117          
    118          
    119          
    120          

   \                                 In section .bss, align 4
    121          long testpwm,testpwm1,testpwm2,testpwm3,testpwm4;
   \                     testpwm:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     testpwm1:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     testpwm2:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     testpwm3:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     testpwm4:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    122          int start=0;
   \                     start:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    123          int Start=0;
   \                     Start:
   \   00000000                      DS8 4
    124          

   \                                 In section .bss, align 1
    125          u8 BmaCnt=0;
   \                     BmaCnt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    126          float angleInit;
   \                     angleInit:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    127          float accangle[4] = {0,0,0,0};
   \                     accangle:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
    128          float AngleACC;
   \                     AngleACC:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    129          float TurnGyro_offset;
   \                     TurnGyro_offset:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    130          int QUAD_Left_Cnt = 0; 
   \                     QUAD_Left_Cnt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    131          int QUAD_Right_Cnt = 0;
   \                     QUAD_Right_Cnt:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    132          int QUAD_Left = 0;
   \                     QUAD_Left:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    133          int QUAD_Right = 0;
   \                     QUAD_Right:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
    134          u8 Pit0_cnt = 0;
   \                     Pit0_cnt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    135          long SteerOUT;
   \                     SteerOUT:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    136          int SpeedOUT;
   \                     SpeedOUT:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    137          long SteerEssmax = 0; 
   \                     SteerEssmax:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
    138          int midline= 63;
   \                     midline:
   \   00000000   0x0000003F         DC32 63
    139          

   \                                 In section .bss, align 4
    140          int Middlel=0;
   \                     Middlel:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    141          int Middler=0;
   \                     Middler:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    142          int SPEED;
   \                     SPEED:
   \   00000000                      DS8 4

   \                                 In section .data, align 4
    143          int midlineH=63;
   \                     midlineH:
   \   00000000   0x0000003F         DC32 63

   \                                 In section .bss, align 4
    144          u8 txbuf[5][32];
   \                     txbuf:
   \   00000000                      DS8 160
    145          
    146          
    147          
    148          

   \                                 In section .bss, align 1
    149          uint8 status;
   \                     status:
   \   00000000                      DS8 1
    150          

   \                                 In section .data, align 4
    151          int THreshold[120]={
   \                     THreshold:
   \   00000000   0x000000C8         DC32 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \   00000034   0x000000C8         DC32 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \   00000068   0x000000C8         DC32 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \   0000009C   0x000000C8         DC32 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \   000000D0   0x000000C8         DC32 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \   00000104   0x000000C8         DC32 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200, 200
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \              0x000000C8   
   \   00000138   0x000000C8         DC32 200, 200, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x000000C8   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \   0000018C   0x00000000         DC32 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
   \              0x00000000   
    152          200,200,200,200,200,200,200,200,200,200,
    153          200,200,200,200,200,200,200,200,200,200,
    154          200,200,200,200,200,200,200,200,200,200,
    155          200,200,200,200,200,200,200,200,200,200,
    156          200,200,200,200,200,200,200,200,200,200,
    157          200,200,200,200,200,200,200,200,200,200,
    158          200,200,200,200,200,200,200,200,200,200,
    159          200,200,200,200,200,200,200,200,200,200,
    160          };

   \                                 In section .bss, align 4
    161          long SteerEssOld = 0;
   \                     SteerEssOld:
   \   00000000                      DS8 4

   \                                 In section .bss, align 1
    162          u8 SpeedCnt = 0;
   \                     SpeedCnt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 1
    163          u8 TurnCnt = 0;
   \                     TurnCnt:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
    164          int   Singleflag[10]={0,0,0,0,0};
   \                     Singleflag:
   \   00000000                      DS8 40
    165          

   \                                 In section .bss, align 4
    166          long jibu;
   \                     jibu:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    167          float distance;
   \                     distance:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    168          float speed;
   \                     speed:
   \   00000000                      DS8 4
    169          

   \                                 In section .bss, align 4
    170          unsigned char g_aucImageTable[64][128];
   \                     g_aucImageTable:
   \   00000000                      DS8 8192

   \                                 In section .bss, align 4
    171          char ircode[4];
   \                     ircode:
   \   00000000                      DS8 4
    172          

   \                                 In section .bss, align 4
    173          unsigned char disp[8];
   \                     disp:
   \   00000000                      DS8 8
    174          
    175          

   \                                 In section .bss, align 4
    176          int irwork_ok;
   \                     irwork_ok:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
    177          void irwork()
    178          {
    179           disp[0]=ircode[0]/16; 
   \                     irwork: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2110             MOVS     R1,#+16
   \   00000008   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   00000010   0x7008             STRB     R0,[R1, #+0]
    180           disp[1]=ircode[0]%16; 
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x2110             MOVS     R1,#+16
   \   0000001A   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000001E   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable6_5
   \   00000026   0x7042             STRB     R2,[R0, #+1]
    181           
    182           disp[2]=ircode[1]/16; 
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \   0000002C   0x7840             LDRB     R0,[R0, #+1]
   \   0000002E   0x2110             MOVS     R1,#+16
   \   00000030   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   00000038   0x7088             STRB     R0,[R1, #+2]
    183           disp[3]=ircode[1]%16; 
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \   0000003E   0x7840             LDRB     R0,[R0, #+1]
   \   00000040   0x2110             MOVS     R1,#+16
   \   00000042   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000046   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   0000004A   0x.... 0x....      LDR.W    R0,??DataTable6_5
   \   0000004E   0x70C2             STRB     R2,[R0, #+3]
    184           
    185           disp[4]=ircode[2]/16; 
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \   00000054   0x7880             LDRB     R0,[R0, #+2]
   \   00000056   0x2110             MOVS     R1,#+16
   \   00000058   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   0000005C   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   00000060   0x7108             STRB     R0,[R1, #+4]
    186           disp[5]=ircode[2]%16; 
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \   00000066   0x7880             LDRB     R0,[R0, #+2]
   \   00000068   0x2110             MOVS     R1,#+16
   \   0000006A   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   0000006E   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable6_5
   \   00000076   0x7142             STRB     R2,[R0, #+5]
    187           
    188           disp[6]=ircode[3]/16; 
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \   0000007C   0x78C0             LDRB     R0,[R0, #+3]
   \   0000007E   0x2110             MOVS     R1,#+16
   \   00000080   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000084   0x.... 0x....      LDR.W    R1,??DataTable6_5
   \   00000088   0x7188             STRB     R0,[R1, #+6]
    189           disp[7]=ircode[3]%16; 
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable6_4
   \   0000008E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000090   0x2110             MOVS     R1,#+16
   \   00000092   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \   00000096   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable6_5
   \   0000009E   0x71C2             STRB     R2,[R0, #+7]
    190           
    191           
    192            irwork_ok=1;
   \   000000A0   0x2001             MOVS     R0,#+1
   \   000000A2   0x.... 0x....      LDR.W    R1,??DataTable6_6
   \   000000A6   0x6008             STR      R0,[R1, #+0]
    193          
    194          }
   \   000000A8   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
    195          int key_num_COUNT=0;
   \                     key_num_COUNT:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    196          int key_num,key_num_end;
   \                     key_num:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     key_num_end:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
    197          int key_num_change=0; 
   \                     key_num_change:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
    198          void key_code()
    199          {
    200             key_num_COUNT++;
   \                     key_code: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x1C40             ADDS     R0,R0,#+1
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable6_7
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    201             if( key_num_COUNT>4 )
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable6_7
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0x2805             CMP      R0,#+5
   \   00000016   0xDB02             BLT.N    ??key_code_0
    202             {
    203               key_num_COUNT=0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x....             LDR.N    R1,??DataTable6_7
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    204             }
    205          if(disp[4]==1&&disp[5]==6){key_num=0;}
   \                     ??key_code_0: (+1)
   \   0000001E   0x....             LDR.N    R0,??DataTable6_5
   \   00000020   0x7900             LDRB     R0,[R0, #+4]
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xD106             BNE.N    ??key_code_1
   \   00000026   0x....             LDR.N    R0,??DataTable6_5
   \   00000028   0x7940             LDRB     R0,[R0, #+5]
   \   0000002A   0x2806             CMP      R0,#+6
   \   0000002C   0xD102             BNE.N    ??key_code_1
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x....             LDR.N    R1,??DataTable6_8
   \   00000032   0x6008             STR      R0,[R1, #+0]
    206          if(disp[4]==0&&disp[5]==12)key_num=1;
   \                     ??key_code_1: (+1)
   \   00000034   0x....             LDR.N    R0,??DataTable6_5
   \   00000036   0x7900             LDRB     R0,[R0, #+4]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD106             BNE.N    ??key_code_2
   \   0000003C   0x....             LDR.N    R0,??DataTable6_5
   \   0000003E   0x7940             LDRB     R0,[R0, #+5]
   \   00000040   0x280C             CMP      R0,#+12
   \   00000042   0xD102             BNE.N    ??key_code_2
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0x....             LDR.N    R1,??DataTable6_8
   \   00000048   0x6008             STR      R0,[R1, #+0]
    207          if(disp[4]==1&&disp[5]==8)key_num=2;
   \                     ??key_code_2: (+1)
   \   0000004A   0x....             LDR.N    R0,??DataTable6_5
   \   0000004C   0x7900             LDRB     R0,[R0, #+4]
   \   0000004E   0x2801             CMP      R0,#+1
   \   00000050   0xD106             BNE.N    ??key_code_3
   \   00000052   0x....             LDR.N    R0,??DataTable6_5
   \   00000054   0x7940             LDRB     R0,[R0, #+5]
   \   00000056   0x2808             CMP      R0,#+8
   \   00000058   0xD102             BNE.N    ??key_code_3
   \   0000005A   0x2002             MOVS     R0,#+2
   \   0000005C   0x....             LDR.N    R1,??DataTable6_8
   \   0000005E   0x6008             STR      R0,[R1, #+0]
    208          if(disp[4]==5&&disp[5]==14)key_num=3;
   \                     ??key_code_3: (+1)
   \   00000060   0x....             LDR.N    R0,??DataTable6_5
   \   00000062   0x7900             LDRB     R0,[R0, #+4]
   \   00000064   0x2805             CMP      R0,#+5
   \   00000066   0xD106             BNE.N    ??key_code_4
   \   00000068   0x....             LDR.N    R0,??DataTable6_5
   \   0000006A   0x7940             LDRB     R0,[R0, #+5]
   \   0000006C   0x280E             CMP      R0,#+14
   \   0000006E   0xD102             BNE.N    ??key_code_4
   \   00000070   0x2003             MOVS     R0,#+3
   \   00000072   0x....             LDR.N    R1,??DataTable6_8
   \   00000074   0x6008             STR      R0,[R1, #+0]
    209          if(disp[4]==0&&disp[5]==8)key_num=4;
   \                     ??key_code_4: (+1)
   \   00000076   0x....             LDR.N    R0,??DataTable6_5
   \   00000078   0x7900             LDRB     R0,[R0, #+4]
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD106             BNE.N    ??key_code_5
   \   0000007E   0x....             LDR.N    R0,??DataTable6_5
   \   00000080   0x7940             LDRB     R0,[R0, #+5]
   \   00000082   0x2808             CMP      R0,#+8
   \   00000084   0xD102             BNE.N    ??key_code_5
   \   00000086   0x2004             MOVS     R0,#+4
   \   00000088   0x....             LDR.N    R1,??DataTable6_8
   \   0000008A   0x6008             STR      R0,[R1, #+0]
    210          if(disp[4]==1&&disp[5]==12)key_num=5;
   \                     ??key_code_5: (+1)
   \   0000008C   0x....             LDR.N    R0,??DataTable6_5
   \   0000008E   0x7900             LDRB     R0,[R0, #+4]
   \   00000090   0x2801             CMP      R0,#+1
   \   00000092   0xD106             BNE.N    ??key_code_6
   \   00000094   0x....             LDR.N    R0,??DataTable6_5
   \   00000096   0x7940             LDRB     R0,[R0, #+5]
   \   00000098   0x280C             CMP      R0,#+12
   \   0000009A   0xD102             BNE.N    ??key_code_6
   \   0000009C   0x2005             MOVS     R0,#+5
   \   0000009E   0x....             LDR.N    R1,??DataTable6_8
   \   000000A0   0x6008             STR      R0,[R1, #+0]
    211          if(disp[4]==5&&disp[5]==10)key_num=6;
   \                     ??key_code_6: (+1)
   \   000000A2   0x....             LDR.N    R0,??DataTable6_5
   \   000000A4   0x7900             LDRB     R0,[R0, #+4]
   \   000000A6   0x2805             CMP      R0,#+5
   \   000000A8   0xD106             BNE.N    ??key_code_7
   \   000000AA   0x....             LDR.N    R0,??DataTable6_5
   \   000000AC   0x7940             LDRB     R0,[R0, #+5]
   \   000000AE   0x280A             CMP      R0,#+10
   \   000000B0   0xD102             BNE.N    ??key_code_7
   \   000000B2   0x2006             MOVS     R0,#+6
   \   000000B4   0x....             LDR.N    R1,??DataTable6_8
   \   000000B6   0x6008             STR      R0,[R1, #+0]
    212          if(disp[4]==4&&disp[5]==2)key_num=7;
   \                     ??key_code_7: (+1)
   \   000000B8   0x....             LDR.N    R0,??DataTable6_5
   \   000000BA   0x7900             LDRB     R0,[R0, #+4]
   \   000000BC   0x2804             CMP      R0,#+4
   \   000000BE   0xD106             BNE.N    ??key_code_8
   \   000000C0   0x....             LDR.N    R0,??DataTable6_5
   \   000000C2   0x7940             LDRB     R0,[R0, #+5]
   \   000000C4   0x2802             CMP      R0,#+2
   \   000000C6   0xD102             BNE.N    ??key_code_8
   \   000000C8   0x2007             MOVS     R0,#+7
   \   000000CA   0x....             LDR.N    R1,??DataTable6_8
   \   000000CC   0x6008             STR      R0,[R1, #+0]
    213          if(disp[4]==5&&disp[5]==2)key_num=8;
   \                     ??key_code_8: (+1)
   \   000000CE   0x....             LDR.N    R0,??DataTable6_5
   \   000000D0   0x7900             LDRB     R0,[R0, #+4]
   \   000000D2   0x2805             CMP      R0,#+5
   \   000000D4   0xD106             BNE.N    ??key_code_9
   \   000000D6   0x....             LDR.N    R0,??DataTable6_5
   \   000000D8   0x7940             LDRB     R0,[R0, #+5]
   \   000000DA   0x2802             CMP      R0,#+2
   \   000000DC   0xD102             BNE.N    ??key_code_9
   \   000000DE   0x2008             MOVS     R0,#+8
   \   000000E0   0x....             LDR.N    R1,??DataTable6_8
   \   000000E2   0x6008             STR      R0,[R1, #+0]
    214          if(disp[4]==4&&disp[5]==10)key_num=9;
   \                     ??key_code_9: (+1)
   \   000000E4   0x....             LDR.N    R0,??DataTable6_5
   \   000000E6   0x7900             LDRB     R0,[R0, #+4]
   \   000000E8   0x2804             CMP      R0,#+4
   \   000000EA   0xD106             BNE.N    ??key_code_10
   \   000000EC   0x....             LDR.N    R0,??DataTable6_5
   \   000000EE   0x7940             LDRB     R0,[R0, #+5]
   \   000000F0   0x280A             CMP      R0,#+10
   \   000000F2   0xD102             BNE.N    ??key_code_10
   \   000000F4   0x2009             MOVS     R0,#+9
   \   000000F6   0x....             LDR.N    R1,??DataTable6_8
   \   000000F8   0x6008             STR      R0,[R1, #+0]
    215          if(disp[4]==0&&disp[5]==7)key_num=10;//-
   \                     ??key_code_10: (+1)
   \   000000FA   0x....             LDR.N    R0,??DataTable6_5
   \   000000FC   0x7900             LDRB     R0,[R0, #+4]
   \   000000FE   0x2800             CMP      R0,#+0
   \   00000100   0xD106             BNE.N    ??key_code_11
   \   00000102   0x....             LDR.N    R0,??DataTable6_5
   \   00000104   0x7940             LDRB     R0,[R0, #+5]
   \   00000106   0x2807             CMP      R0,#+7
   \   00000108   0xD102             BNE.N    ??key_code_11
   \   0000010A   0x200A             MOVS     R0,#+10
   \   0000010C   0x....             LDR.N    R1,??DataTable6_8
   \   0000010E   0x6008             STR      R0,[R1, #+0]
    216          if(disp[4]==1&&disp[5]==5)key_num=11;//+
   \                     ??key_code_11: (+1)
   \   00000110   0x....             LDR.N    R0,??DataTable6_5
   \   00000112   0x7900             LDRB     R0,[R0, #+4]
   \   00000114   0x2801             CMP      R0,#+1
   \   00000116   0xD106             BNE.N    ??key_code_12
   \   00000118   0x....             LDR.N    R0,??DataTable6_5
   \   0000011A   0x7940             LDRB     R0,[R0, #+5]
   \   0000011C   0x2805             CMP      R0,#+5
   \   0000011E   0xD102             BNE.N    ??key_code_12
   \   00000120   0x200B             MOVS     R0,#+11
   \   00000122   0x....             LDR.N    R1,??DataTable6_8
   \   00000124   0x6008             STR      R0,[R1, #+0]
    217          if(disp[4]==0&&disp[5]==9)
   \                     ??key_code_12: (+1)
   \   00000126   0x....             LDR.N    R0,??DataTable6_5
   \   00000128   0x7900             LDRB     R0,[R0, #+4]
   \   0000012A   0x2800             CMP      R0,#+0
   \   0000012C   0xD107             BNE.N    ??key_code_13
   \   0000012E   0x....             LDR.N    R0,??DataTable6_5
   \   00000130   0x7940             LDRB     R0,[R0, #+5]
   \   00000132   0x2809             CMP      R0,#+9
   \   00000134   0xD103             BNE.N    ??key_code_13
    218          {
    219          key_num_change=1;//调试
   \   00000136   0x2001             MOVS     R0,#+1
   \   00000138   0x....             LDR.N    R1,??DataTable6_9
   \   0000013A   0x6008             STR      R0,[R1, #+0]
   \   0000013C   0xE002             B.N      ??key_code_14
    220          }
    221          else
    222          {
    223            key_num_change=0;
   \                     ??key_code_13: (+1)
   \   0000013E   0x2000             MOVS     R0,#+0
   \   00000140   0x....             LDR.N    R1,??DataTable6_9
   \   00000142   0x6008             STR      R0,[R1, #+0]
    224          }
    225          if(disp[4]==0&&disp[5]==9){key_num_end=1;}
   \                     ??key_code_14: (+1)
   \   00000144   0x....             LDR.N    R0,??DataTable6_5
   \   00000146   0x7900             LDRB     R0,[R0, #+4]
   \   00000148   0x2800             CMP      R0,#+0
   \   0000014A   0xD106             BNE.N    ??key_code_15
   \   0000014C   0x....             LDR.N    R0,??DataTable6_5
   \   0000014E   0x7940             LDRB     R0,[R0, #+5]
   \   00000150   0x2809             CMP      R0,#+9
   \   00000152   0xD102             BNE.N    ??key_code_15
   \   00000154   0x2001             MOVS     R0,#+1
   \   00000156   0x....             LDR.N    R1,??DataTable6_10
   \   00000158   0x6008             STR      R0,[R1, #+0]
    226          }
   \                     ??key_code_15: (+1)
   \   0000015A   0x4770             BX       LR               ;; return
    227          
    228          
    229          

   \                                 In section .bss, align 4
    230          long count ;
   \                     count:
   \   00000000                      DS8 4
    231          
    232          //void control()
    233          //{
    234          //
    235          //switch (key_num)
    236          //{
    237          //case 1: count+=10;  break;
    238          //case 2:  count-=10; break;
    239          //default: break;
    240          //}
    241          //}
    242          
    243          

   \                                 In section .bss, align 4
    244          int irpros_ok;
   \                     irpros_ok:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
    245          void irpros()
    246          {
   \                     irpros: (+1)
   \   00000000   0xB410             PUSH     {R4}
    247          
    248          
    249          char x,y,z=1;
   \   00000002   0x2201             MOVS     R2,#+1
    250          char value;
    251          for(y=0;y<4;y++)
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0xE011             B.N      ??irpros_0
    252          {
    253          for(x=0;x<8;x++)
    254          {
    255          value=value>>1;
   \                     ??irpros_1: (+1)
   \   00000008   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000000A   0x085B             LSRS     R3,R3,#+1
    256          if(irdata[z]>6)
   \   0000000C   0x....             LDR.N    R4,??DataTable6_11
   \   0000000E   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000010   0x5D14             LDRB     R4,[R2, R4]
   \   00000012   0x2C07             CMP      R4,#+7
   \   00000014   0xDB01             BLT.N    ??irpros_2
    257          {
    258          value=value|0x80;
   \   00000016   0xF053 0x0380      ORRS     R3,R3,#0x80
    259          }
    260          z++;
   \                     ??irpros_2: (+1)
   \   0000001A   0x1C52             ADDS     R2,R2,#+1
    261          }
   \   0000001C   0x1C40             ADDS     R0,R0,#+1
   \                     ??irpros_3: (+1)
   \   0000001E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000020   0x2808             CMP      R0,#+8
   \   00000022   0xDBF1             BLT.N    ??irpros_1
    262          ircode[y]=value;
   \   00000024   0x....             LDR.N    R0,??DataTable6_4
   \   00000026   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000028   0x540B             STRB     R3,[R1, R0]
   \   0000002A   0x1C49             ADDS     R1,R1,#+1
   \                     ??irpros_0: (+1)
   \   0000002C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002E   0x2904             CMP      R1,#+4
   \   00000030   0xDA01             BGE.N    ??irpros_4
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xE7F3             B.N      ??irpros_3
    263          }
    264          
    265          irpros_ok=1;
   \                     ??irpros_4: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x....             LDR.N    R1,??DataTable6_12
   \   0000003A   0x6008             STR      R0,[R1, #+0]
    266          
    267          }
   \   0000003C   0xBC10             POP      {R4}
   \   0000003E   0x4770             BX       LR               ;; return
    268          

   \                                 In section .bss, align 4
    269          int Speed_Set_R;
   \                     Speed_Set_R:
   \   00000000                      DS8 4

   \                                 In section .text, align 2, keep-with-next
    270          void Speed_Control(void)
    271          {
    272              FTM2_C0V=0;
   \                     Speed_Control: (+1)
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable6_13  ;; 0x400b8010
   \   00000004   0x6008             STR      R0,[R1, #+0]
    273              R_Motor_Speed=FTM2_C1V;//caihuilaidezhi
   \   00000006   0x....             LDR.N    R0,??DataTable6_14  ;; 0x400b8018
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x....             LDR.N    R1,??DataTable6_15
   \   0000000C   0x6008             STR      R0,[R1, #+0]
    274              SpeedEss[2] = SpeedEss[1];
   \   0000000E   0x....             LDR.N    R0,??DataTable6_16
   \   00000010   0x6840             LDR      R0,[R0, #+4]
   \   00000012   0x....             LDR.N    R1,??DataTable6_16
   \   00000014   0x6088             STR      R0,[R1, #+8]
    275              SpeedEss[1] = SpeedEss[0];
   \   00000016   0x....             LDR.N    R0,??DataTable6_16
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0x....             LDR.N    R1,??DataTable6_16
   \   0000001C   0x6048             STR      R0,[R1, #+4]
    276          
    277              SpeedEss[0] = SpeedWant-R_Motor_Speed;
   \   0000001E   0x....             LDR.N    R0,??DataTable6_17
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x....             LDR.N    R1,??DataTable6_15
   \   00000024   0x6809             LDR      R1,[R1, #+0]
   \   00000026   0x1A40             SUBS     R0,R0,R1
   \   00000028   0x....             LDR.N    R1,??DataTable6_16
   \   0000002A   0x6008             STR      R0,[R1, #+0]
    278          
    279              SpeedEss[0]=SpeedEss[0]>300?300:(SpeedEss[0]<-300?-300:SpeedEss[0]);
   \   0000002C   0x....             LDR.N    R0,??DataTable6_16
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF5B0 0x7F96      CMP      R0,#+300
   \   00000034   0xDD04             BLE.N    ??Speed_Control_0
   \   00000036   0xF44F 0x7096      MOV      R0,#+300
   \   0000003A   0x....             LDR.N    R1,??DataTable6_16
   \   0000003C   0x6008             STR      R0,[R1, #+0]
   \   0000003E   0xE00C             B.N      ??Speed_Control_1
   \                     ??Speed_Control_0: (+1)
   \   00000040   0x....             LDR.N    R0,??DataTable6_16
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF510 0x7F96      CMN      R0,#+300
   \   00000048   0xDA03             BGE.N    ??Speed_Control_2
   \   0000004A   0x....             LDR.N    R0,??DataTable6_18  ;; 0xfffffed4
   \   0000004C   0x....             LDR.N    R1,??DataTable6_16
   \   0000004E   0x6008             STR      R0,[R1, #+0]
   \   00000050   0xE003             B.N      ??Speed_Control_1
   \                     ??Speed_Control_2: (+1)
   \   00000052   0x....             LDR.N    R0,??DataTable6_16
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x....             LDR.N    R1,??DataTable6_16
   \   00000058   0x6008             STR      R0,[R1, #+0]
    280          
    281              SpeedInt += SpeedEss[0];
   \                     ??Speed_Control_1: (+1)
   \   0000005A   0x....             LDR.N    R0,??DataTable6_19
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0x....             LDR.N    R1,??DataTable6_16
   \   00000060   0x6809             LDR      R1,[R1, #+0]
   \   00000062   0x1808             ADDS     R0,R1,R0
   \   00000064   0x....             LDR.N    R1,??DataTable6_19
   \   00000066   0x6008             STR      R0,[R1, #+0]
    282              SpeedInt=SpeedInt>2000?2000:(SpeedInt<-2000?-2000:SpeedInt);
   \   00000068   0x....             LDR.N    R0,??DataTable6_19
   \   0000006A   0x6800             LDR      R0,[R0, #+0]
   \   0000006C   0xF5B0 0x6FFA      CMP      R0,#+2000
   \   00000070   0xDD04             BLE.N    ??Speed_Control_3
   \   00000072   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000076   0x....             LDR.N    R1,??DataTable6_19
   \   00000078   0x6008             STR      R0,[R1, #+0]
   \   0000007A   0xE00C             B.N      ??Speed_Control_4
   \                     ??Speed_Control_3: (+1)
   \   0000007C   0x....             LDR.N    R0,??DataTable6_19
   \   0000007E   0x6800             LDR      R0,[R0, #+0]
   \   00000080   0xF510 0x6FFA      CMN      R0,#+2000
   \   00000084   0xDA03             BGE.N    ??Speed_Control_5
   \   00000086   0x....             LDR.N    R0,??DataTable6_20  ;; 0xfffff830
   \   00000088   0x....             LDR.N    R1,??DataTable6_19
   \   0000008A   0x6008             STR      R0,[R1, #+0]
   \   0000008C   0xE003             B.N      ??Speed_Control_4
   \                     ??Speed_Control_5: (+1)
   \   0000008E   0x....             LDR.N    R0,??DataTable6_19
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0x....             LDR.N    R1,??DataTable6_19
   \   00000094   0x6008             STR      R0,[R1, #+0]
    283              
    284              SpeedUp = (int)(Speed_Kp * SpeedEss[0]);
   \                     ??Speed_Control_4: (+1)
   \   00000096   0x....             LDR.N    R0,??DataTable6_21
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0x....             LDR.N    R1,??DataTable6_16
   \   0000009C   0x6809             LDR      R1,[R1, #+0]
   \   0000009E   0x4348             MULS     R0,R1,R0
   \   000000A0   0x....             LDR.N    R1,??DataTable6_22
   \   000000A2   0x6008             STR      R0,[R1, #+0]
    285              SpeedUi = (int)(Speed_Ki * SpeedInt/10);
   \   000000A4   0x....             LDR.N    R0,??DataTable6_23
   \   000000A6   0x6800             LDR      R0,[R0, #+0]
   \   000000A8   0x....             LDR.N    R1,??DataTable6_19
   \   000000AA   0x6809             LDR      R1,[R1, #+0]
   \   000000AC   0x4348             MULS     R0,R1,R0
   \   000000AE   0x210A             MOVS     R1,#+10
   \   000000B0   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   000000B4   0x....             LDR.N    R1,??DataTable6_24
   \   000000B6   0x6008             STR      R0,[R1, #+0]
    286              SpeedUd = (int)(Speed_Kd*(SpeedEss[0]-SpeedEss[1]));
   \   000000B8   0x....             LDR.N    R0,??DataTable6_25
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0x....             LDR.N    R1,??DataTable6_16
   \   000000BE   0x6809             LDR      R1,[R1, #+0]
   \   000000C0   0x....             LDR.N    R2,??DataTable6_16
   \   000000C2   0x6852             LDR      R2,[R2, #+4]
   \   000000C4   0x1A89             SUBS     R1,R1,R2
   \   000000C6   0x4348             MULS     R0,R1,R0
   \   000000C8   0x....             LDR.N    R1,??DataTable6_26
   \   000000CA   0x6008             STR      R0,[R1, #+0]
    287           
    288              Speed_Set_R = SpeedUp + SpeedUi + SpeedUd;
   \   000000CC   0x....             LDR.N    R0,??DataTable6_22
   \   000000CE   0x6800             LDR      R0,[R0, #+0]
   \   000000D0   0x....             LDR.N    R1,??DataTable6_24
   \   000000D2   0x6809             LDR      R1,[R1, #+0]
   \   000000D4   0x1808             ADDS     R0,R1,R0
   \   000000D6   0x....             LDR.N    R1,??DataTable6_26
   \   000000D8   0x6809             LDR      R1,[R1, #+0]
   \   000000DA   0x1808             ADDS     R0,R1,R0
   \   000000DC   0x....             LDR.N    R1,??DataTable6_27
   \   000000DE   0x6008             STR      R0,[R1, #+0]
    289          }
   \   000000E0   0x4770             BX       LR               ;; return

   \                                 In section .bss, align 4
    290          int s[5]={0,0};
   \                     s:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
    291          int SpeedWant1=0;
   \                     SpeedWant1:
   \   00000000                      DS8 4
    292          

   \                                 In section .text, align 4, keep-with-next
    293          void main(void) 
    294          {
   \                     main: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    295           
    296            
    297          
    298          
    299          DisableInterrupts; 
   \   00000002   0xB672             CPSID i
    300          
    301          WatchdogDisable();  
   \   00000004   0x.... 0x....      BL       WatchdogDisable
    302          
    303          
    304          VECTableInit();
   \   00000008   0x.... 0x....      BL       VECTableInit
    305          
    306          
    307          
    308          
    309          SIM_SCGC5 |= (SIM_SCGC5_PORTA_MASK
    310          			  | SIM_SCGC5_PORTB_MASK
    311          			  | SIM_SCGC5_PORTC_MASK
    312          			  | SIM_SCGC5_PORTD_MASK
    313          			  | SIM_SCGC5_PORTE_MASK );
   \   0000000C   0x....             LDR.N    R0,??DataTable6_28  ;; 0x40048038
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0xF450 0x5078      ORRS     R0,R0,#0x3E00
   \   00000014   0x....             LDR.N    R1,??DataTable6_28  ;; 0x40048038
   \   00000016   0x6008             STR      R0,[R1, #+0]
    314          
    315          pll_init(PLL150);
   \   00000018   0x2096             MOVS     R0,#+150
   \   0000001A   0x.... 0x....      BL       pll_init
    316          Timer0_Init();
   \   0000001E   0x.... 0x....      BL       Timer0_Init
    317          Timer1_Init();
   \   00000022   0x.... 0x....      BL       Timer1_Init
    318          PWM_Init();
   \   00000026   0x.... 0x....      BL       PWM_Init
    319          FTM_QUAD_init();
   \   0000002A   0x.... 0x....      BL       FTM_QUAD_init
    320          EnableInterrupts;
   \   0000002E   0xB662             CPSIE i
    321          
    322          ///FTM_QUAD_init();
    323          //LCD_Init_Oled();
    324          //EnableTimer0();                 //PIT0      使能
    325          //EnableTimer1(); 
    326          //PORTC_PCR14=PORT_PCR_MUX(1)|PORT_PCR_IRQC(10);
    327          
    328           //GPIO_Init(PORT_E,26,GPI_UP,LVL_H);               //按键
    329          
    330          //enable_irq(89);
    331          
    332          FTM0_C7V=4000;
   \   00000030   0xF44F 0x607A      MOV      R0,#+4000
   \   00000034   0x....             LDR.N    R1,??DataTable6_1  ;; 0x40038048
   \   00000036   0x6008             STR      R0,[R1, #+0]
    333          
    334          while(1)
    335          {
    336           testpwm3=QUADRead(1);
   \                     ??main_0: (+1)
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0x.... 0x....      BL       QUADRead
   \   0000003E   0x....             LDR.N    R1,??DataTable6_29
   \   00000040   0x6008             STR      R0,[R1, #+0]
    337           testpwm4=QUADRead(0);
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      BL       QUADRead
   \   00000048   0x....             LDR.N    R1,??DataTable6_30
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    338          // FTM0_C7V=testpwm1;//abc
    339          // FTM0_C6V=testpwm2;
    340           Delay_ccd(1000);
   \   0000004C   0xF44F 0x707A      MOV      R0,#+1000
   \   00000050   0x.... 0x....      BL       Delay_ccd
   \   00000054   0xE7F0             B.N      ??main_0
    341          //   if(GPIO_GetBit(PORT_C,4)==0)
    342          // { Delay_ccd(100);
    343          //  FTM0_C7V=6000;
    344          //  abc=6000;
    345          //  if(zhengfanzhuan==1){zhengzhuan();
    346          //  goto knot1;}
    347          //  else{fanzhuan();
    348          //  goto knot1;}
    349          // }
    350          //knot1:
    351          //  if(GPIO_GetBit(PORT_C,6)==0)
    352          // { Delay_ccd(100);
    353          //  FTM0_C7V+=500;
    354          // }
    355          // if(GPIO_GetBit(PORT_C,8)==0)
    356          // { 
    357          //   Delay_ccd(100);
    358          //   FTM0_C7V-=500;
    359          //}
    360          // 
    361           
    362           
    363          }
    364          
    365                                     
    366          
    367          
    368          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     abc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x40038048         DC32     0x40038048

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x40038040         DC32     0x40038040

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     zhengfanzhuan

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     ircode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     disp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     irwork_ok

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     key_num_COUNT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     key_num

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     key_num_change

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x........         DC32     key_num_end

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_11:
   \   00000000   0x........         DC32     irdata

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_12:
   \   00000000   0x........         DC32     irpros_ok

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_13:
   \   00000000   0x400B8010         DC32     0x400b8010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_14:
   \   00000000   0x400B8018         DC32     0x400b8018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_15:
   \   00000000   0x........         DC32     R_Motor_Speed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_16:
   \   00000000   0x........         DC32     SpeedEss

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_17:
   \   00000000   0x........         DC32     SpeedWant

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_18:
   \   00000000   0xFFFFFED4         DC32     0xfffffed4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_19:
   \   00000000   0x........         DC32     SpeedInt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_20:
   \   00000000   0xFFFFF830         DC32     0xfffff830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_21:
   \   00000000   0x........         DC32     Speed_Kp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_22:
   \   00000000   0x........         DC32     SpeedUp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_23:
   \   00000000   0x........         DC32     Speed_Ki

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_24:
   \   00000000   0x........         DC32     SpeedUi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_25:
   \   00000000   0x........         DC32     Speed_Kd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_26:
   \   00000000   0x........         DC32     SpeedUd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_27:
   \   00000000   0x........         DC32     Speed_Set_R

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_28:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_29:
   \   00000000   0x........         DC32     testpwm3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_30:
   \   00000000   0x........         DC32     testpwm4
    369          
    370          
    371          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Delay_ccd
       8   IO_init
         8   -> GPIO_Init
       0   Speed_Control
       8   fanzhuan
         8   -> Delay_ccd
       4   irpros
       0   irwork
       0   key_code
       8   main
         8   -> Delay_ccd
         8   -> FTM_QUAD_init
         8   -> PWM_Init
         8   -> QUADRead
         8   -> Timer0_Init
         8   -> Timer1_Init
         8   -> VECTableInit
         8   -> WatchdogDisable
         8   -> pll_init
       8   zhengzhuan
         8   -> Delay_ccd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_11
       4  ??DataTable6_12
       4  ??DataTable6_13
       4  ??DataTable6_14
       4  ??DataTable6_15
       4  ??DataTable6_16
       4  ??DataTable6_17
       4  ??DataTable6_18
       4  ??DataTable6_19
       4  ??DataTable6_2
       4  ??DataTable6_20
       4  ??DataTable6_21
       4  ??DataTable6_22
       4  ??DataTable6_23
       4  ??DataTable6_24
       4  ??DataTable6_25
       4  ??DataTable6_26
       4  ??DataTable6_27
       4  ??DataTable6_28
       4  ??DataTable6_29
       4  ??DataTable6_3
       4  ??DataTable6_30
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
       4  AngleACC
       1  BmaCnt
      52  Delay_ccd
       4  H
     220  IO_init
       1  Key_H
       1  Key_Q
       4  Middlel
       4  Middler
       1  Pit0_cnt
       4  QUAD_Left
       4  QUAD_Left_Cnt
       4  QUAD_Right
       4  QUAD_Right_Cnt
       4  SPEED
      40  Singleflag
       1  SpeedCnt
       4  SpeedOUT
       4  SpeedWant1
     226  Speed_Control
       4  Speed_Set_R
       4  Start
       4  SteerEssOld
       4  SteerEssmax
       4  SteerOUT
       4  StopFlag
       4  Stopflag
     480  THreshold
       1  TurnCnt
       4  TurnGyro_offset
       4  White_mark
       4  White_markL
       4  White_markR
       4  abc
      16  accangle
       4  angleInit
       4  count
       8  disp
       4  distance
      38  fanzhuan
    8192  g_aucImageTable
       4  ircode
      64  irpros
       4  irpros_ok
     170  irwork
       4  irwork_ok
       4  jibu
     348  key_code
       4  key_num
       4  key_num_COUNT
       4  key_num_change
       4  key_num_end
      86  main
       4  midline
       4  midlineH
      20  s
       4  speed
       4  start
       1  status
       4  testpwm
       4  testpwm1
       4  testpwm2
       4  testpwm3
       4  testpwm4
     160  txbuf
       4  white_mark
       4  white_markL
       4  white_markR
       4  x
       4  zhengfanzhuan
       4  zhengfanzhuan2
      38  zhengzhuan

 
 8 631 bytes in section .bss
   488 bytes in section .data
 1 366 bytes in section .text
 
 1 366 bytes of CODE memory
 9 119 bytes of DATA memory

Errors: none
Warnings: none
