###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.30.1.53127/W32 for ARM     13/Mar/2015  12:44:29 #
# Copyright 1999-2011 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\Administrator\Desktop\3.11换结构BLOCK nd        #
#                    black\common\sccb.c                                      #
#    Command line =  "C:\Users\Administrator\Desktop\3.11换结构BLOCK nd       #
#                    black\common\sccb.c" -D DEBUG -lCN                       #
#                    "C:\Users\Administrator\Desktop\3.11换结构BLOCK nd       #
#                    black\Debug\List\" -lB "C:\Users\Administrator\Desktop\3 #
#                    .11换结构BLOCK nd  black\Debug\List\" -o                 #
#                    "C:\Users\Administrator\Desktop\3.11换结构BLOCK nd       #
#                    black\Debug\Obj\" --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M4  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.0\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -Ol --use_c++_inline                              #
#    List file    =  C:\Users\Administrator\Desktop\3.11换结构BLOCK nd        #
#                    black\Debug\List\sccb.lst                                #
#    Object file  =  C:\Users\Administrator\Desktop\3.11换结构BLOCK nd        #
#                    black\Debug\Obj\sccb.o                                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\3.11换结构BLOCK nd  black\common\sccb.c
      1          #include "sccb.h"
      2          
      3          

   \                                 In section .text, align 2, keep-with-next
      4          void delay_sccb(unsigned long i)//34us 1000,34ms 1000000
      5          {     
      6              while( i--)
   \                     delay_sccb:
   \                     ??delay_sccb_0:
   \   00000000   0x0001             MOVS     R1,R0
   \   00000002   0x1E48             SUBS     R0,R1,#+1
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD1FB             BNE.N    ??delay_sccb_0
      7              {	
      8                    
      9              }
     10          }
   \   00000008   0x4770             BX       LR               ;; return
     11          
     12          /*-----------------------------------------------
     13             功能: start命令,SCCB的起始信号
     14             参数: 无
     15           返回值: 无
     16          -----------------------------------------------
     17          */

   \                                 In section .text, align 2, keep-with-next
     18          void startSCCB(void)
     19          {
   \                     startSCCB:
   \   00000000   0xB580             PUSH     {R7,LR}
     20              SCCB_SID_H();     //数据线高电平
   \   00000002   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff084
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000000A   0x....             LDR.N    R1,??DataTable4  ;; 0x400ff084
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     21              delay_sccb(SCCB_TIME);
   \   0000000E   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000012   0x.... 0x....      BL       delay_sccb
     22          
     23              SCCB_SIC_H();	   //在时钟线高的时候数据线由高至低
   \   00000016   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff084
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF44F 0x7100      MOV      R1,#+512
   \   0000001E   0x4308             ORRS     R0,R1,R0
   \   00000020   0x....             LDR.N    R1,??DataTable4  ;; 0x400ff084
   \   00000022   0x6008             STR      R0,[R1, #+0]
     24              delay_sccb(SCCB_TIME);
   \   00000024   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000028   0x.... 0x....      BL       delay_sccb
     25           
     26              SCCB_SID_L();
   \   0000002C   0x....             LDR.N    R0,??DataTable4_1  ;; 0x400ff088
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000034   0x....             LDR.N    R1,??DataTable4_1  ;; 0x400ff088
   \   00000036   0x6008             STR      R0,[R1, #+0]
     27              delay_sccb(SCCB_TIME);
   \   00000038   0xF240 0x50DC      MOVW     R0,#+1500
   \   0000003C   0x.... 0x....      BL       delay_sccb
     28          
     29              SCCB_SIC_L();	 //数据线恢复低电平，单操作函数必要
   \   00000040   0x....             LDR.N    R0,??DataTable4_1  ;; 0x400ff088
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0xF44F 0x7100      MOV      R1,#+512
   \   00000048   0x4308             ORRS     R0,R1,R0
   \   0000004A   0x....             LDR.N    R1,??DataTable4_1  ;; 0x400ff088
   \   0000004C   0x6008             STR      R0,[R1, #+0]
     30              delay_sccb(SCCB_TIME);
   \   0000004E   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000052   0x.... 0x....      BL       delay_sccb
     31          
     32          
     33          }
   \   00000056   0xBD01             POP      {R0,PC}          ;; return
     34          
     35          
     36          
     37          
     38          /*
     39          -----------------------------------------------
     40             功能: stop命令,SCCB的停止信号
     41             参数: 无
     42           返回值: 无
     43          -----------------------------------------------
     44          */

   \                                 In section .text, align 2, keep-with-next
     45          void stopSCCB(void)
     46          {
   \                     stopSCCB:
   \   00000000   0xB580             PUSH     {R7,LR}
     47              SCCB_SID_L();
   \   00000002   0x....             LDR.N    R0,??DataTable4_1  ;; 0x400ff088
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000000A   0x....             LDR.N    R1,??DataTable4_1  ;; 0x400ff088
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     48              delay_sccb(SCCB_TIME);
   \   0000000E   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000012   0x.... 0x....      BL       delay_sccb
     49           
     50              SCCB_SIC_H();	
   \   00000016   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff084
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF44F 0x7100      MOV      R1,#+512
   \   0000001E   0x4308             ORRS     R0,R1,R0
   \   00000020   0x....             LDR.N    R1,??DataTable4  ;; 0x400ff084
   \   00000022   0x6008             STR      R0,[R1, #+0]
     51              delay_sccb(SCCB_TIME);
   \   00000024   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000028   0x.... 0x....      BL       delay_sccb
     52            
     53          
     54              SCCB_SID_H();	
   \   0000002C   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff084
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000034   0x....             LDR.N    R1,??DataTable4  ;; 0x400ff084
   \   00000036   0x6008             STR      R0,[R1, #+0]
     55              delay_sccb(SCCB_TIME);
   \   00000038   0xF240 0x50DC      MOVW     R0,#+1500
   \   0000003C   0x.... 0x....      BL       delay_sccb
     56             
     57              ///////////////////////
     58             // SCCB_SIC_L();	
     59              //delay_us(SCCB_TIME);
     60              //////////////////////
     61          }
   \   00000040   0xBD01             POP      {R0,PC}          ;; return
     62          
     63          
     64          
     65          
     66          /*
     67          -----------------------------------------------
     68             功能: noAck,用于连续读取中的最后一个结束周期
     69             参数: 无
     70           返回值: 无
     71          -----------------------------------------------
     72          */

   \                                 In section .text, align 2, keep-with-next
     73          void noAck(void)
     74          {
   \                     noAck:
   \   00000000   0xB580             PUSH     {R7,LR}
     75          	
     76          	SCCB_SID_H();	
   \   00000002   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff084
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000000A   0x....             LDR.N    R1,??DataTable4  ;; 0x400ff084
   \   0000000C   0x6008             STR      R0,[R1, #+0]
     77          	delay_sccb(SCCB_TIME);
   \   0000000E   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000012   0x.... 0x....      BL       delay_sccb
     78          	
     79          	SCCB_SIC_H();	
   \   00000016   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff084
   \   00000018   0x6800             LDR      R0,[R0, #+0]
   \   0000001A   0xF44F 0x7100      MOV      R1,#+512
   \   0000001E   0x4308             ORRS     R0,R1,R0
   \   00000020   0x....             LDR.N    R1,??DataTable4  ;; 0x400ff084
   \   00000022   0x6008             STR      R0,[R1, #+0]
     80          	delay_sccb(SCCB_TIME);
   \   00000024   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000028   0x.... 0x....      BL       delay_sccb
     81          	
     82          	SCCB_SIC_L();	
   \   0000002C   0x....             LDR.N    R0,??DataTable4_1  ;; 0x400ff088
   \   0000002E   0x6800             LDR      R0,[R0, #+0]
   \   00000030   0xF44F 0x7100      MOV      R1,#+512
   \   00000034   0x4308             ORRS     R0,R1,R0
   \   00000036   0x....             LDR.N    R1,??DataTable4_1  ;; 0x400ff088
   \   00000038   0x6008             STR      R0,[R1, #+0]
     83          	delay_sccb(SCCB_TIME);
   \   0000003A   0xF240 0x50DC      MOVW     R0,#+1500
   \   0000003E   0x.... 0x....      BL       delay_sccb
     84          	
     85          	SCCB_SID_L();	
   \   00000042   0x....             LDR.N    R0,??DataTable4_1  ;; 0x400ff088
   \   00000044   0x6800             LDR      R0,[R0, #+0]
   \   00000046   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000004A   0x....             LDR.N    R1,??DataTable4_1  ;; 0x400ff088
   \   0000004C   0x6008             STR      R0,[R1, #+0]
     86          	delay_sccb(SCCB_TIME);
   \   0000004E   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000052   0x.... 0x....      BL       delay_sccb
     87          
     88          }
   \   00000056   0xBD01             POP      {R0,PC}          ;; return
     89          
     90          
     91          
     92          
     93          /*
     94          -----------------------------------------------
     95             功能: 写入一个字节的数据到SCCB
     96             参数: 写入数据
     97           返回值: 发送成功返回1，发送失败返回0
     98          -----------------------------------------------
     99          */

   \                                 In section .text, align 2, keep-with-next
    100          unsigned char SCCBwriteByte(unsigned char m_data)
    101          {
   \                     SCCBwriteByte:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
    102          	unsigned char j,tem;
    103              
    104          	SCCB_SID_OUT;//设置SDA为输出
   \   00000004   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff094
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000000C   0x....             LDR.N    R1,??DataTable4_2  ;; 0x400ff094
   \   0000000E   0x6008             STR      R0,[R1, #+0]
    105          	for(j=0;j<8;j++) //循环8次发送数据
   \   00000010   0x2500             MOVS     R5,#+0
   \   00000012   0xE020             B.N      ??SCCBwriteByte_0
    106          	{
    107          		if((m_data<<j)&0x80)
    108          		{
    109          			SCCB_SID_H();	
    110          		}
    111          		else
    112          		{
    113          			SCCB_SID_L();	
   \                     ??SCCBwriteByte_1:
   \   00000014   0x....             LDR.N    R0,??DataTable4_1  ;; 0x400ff088
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000001C   0x....             LDR.N    R1,??DataTable4_1  ;; 0x400ff088
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    114          		}
    115          		delay_sccb(SCCB_TIME);
   \                     ??SCCBwriteByte_2:
   \   00000020   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000024   0x.... 0x....      BL       delay_sccb
    116          		SCCB_SIC_H();	
   \   00000028   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff084
   \   0000002A   0x6800             LDR      R0,[R0, #+0]
   \   0000002C   0xF44F 0x7100      MOV      R1,#+512
   \   00000030   0x4308             ORRS     R0,R1,R0
   \   00000032   0x....             LDR.N    R1,??DataTable4  ;; 0x400ff084
   \   00000034   0x6008             STR      R0,[R1, #+0]
    117          		delay_sccb(SCCB_TIME);
   \   00000036   0xF240 0x50DC      MOVW     R0,#+1500
   \   0000003A   0x.... 0x....      BL       delay_sccb
    118          		SCCB_SIC_L();	
   \   0000003E   0x....             LDR.N    R0,??DataTable4_1  ;; 0x400ff088
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF44F 0x7100      MOV      R1,#+512
   \   00000046   0x4308             ORRS     R0,R1,R0
   \   00000048   0x....             LDR.N    R1,??DataTable4_1  ;; 0x400ff088
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    119          		delay_sccb(SCCB_TIME);
   \   0000004C   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000050   0x.... 0x....      BL       delay_sccb
   \   00000054   0x1C6D             ADDS     R5,R5,#+1
   \                     ??SCCBwriteByte_0:
   \   00000056   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000058   0x2D08             CMP      R5,#+8
   \   0000005A   0xD20B             BCS.N    ??SCCBwriteByte_3
   \   0000005C   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   0000005E   0xFA14 0xF005      LSLS     R0,R4,R5
   \   00000062   0x0600             LSLS     R0,R0,#+24
   \   00000064   0xD5D6             BPL.N    ??SCCBwriteByte_1
   \   00000066   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff084
   \   00000068   0x6800             LDR      R0,[R0, #+0]
   \   0000006A   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   0000006E   0x....             LDR.N    R1,??DataTable4  ;; 0x400ff084
   \   00000070   0x6008             STR      R0,[R1, #+0]
   \   00000072   0xE7D5             B.N      ??SCCBwriteByte_2
    120          
    121          	}
    122          	delay_sccb(TIME1);
   \                     ??SCCBwriteByte_3:
   \   00000074   0xF44F 0x6096      MOV      R0,#+1200
   \   00000078   0x.... 0x....      BL       delay_sccb
    123          	SCCB_SID_IN;//设置SDA为输入/
   \   0000007C   0x2303             MOVS     R3,#+3
   \   0000007E   0x2203             MOVS     R2,#+3
   \   00000080   0x210B             MOVS     R1,#+11
   \   00000082   0x2002             MOVS     R0,#+2
   \   00000084   0x.... 0x....      BL       GPIO_Init
    124          	delay_sccb(SCCB_TIME);
   \   00000088   0xF240 0x50DC      MOVW     R0,#+1500
   \   0000008C   0x.... 0x....      BL       delay_sccb
    125          	SCCB_SIC_H();	
   \   00000090   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff084
   \   00000092   0x6800             LDR      R0,[R0, #+0]
   \   00000094   0xF44F 0x7100      MOV      R1,#+512
   \   00000098   0x4308             ORRS     R0,R1,R0
   \   0000009A   0x....             LDR.N    R1,??DataTable4  ;; 0x400ff084
   \   0000009C   0x6008             STR      R0,[R1, #+0]
    126          	delay_sccb(TIME1);
   \   0000009E   0xF44F 0x6096      MOV      R0,#+1200
   \   000000A2   0x.... 0x....      BL       delay_sccb
    127          	
    128          	if(GPIO_PIN_GET(SCCB_SID_PORT,SCCB_SID_PIN))
   \   000000A6   0x....             LDR.N    R0,??DataTable4_3  ;; 0x400ff090
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0x0500             LSLS     R0,R0,#+20
   \   000000AC   0xD501             BPL.N    ??SCCBwriteByte_4
    129          	{
    130          		tem=0;
   \   000000AE   0x2400             MOVS     R4,#+0
   \   000000B0   0xE000             B.N      ??SCCBwriteByte_5
    131          	}   //SDA=1发送失败，返回0}
    132          	else 
    133          	{
    134          		tem=1;
   \                     ??SCCBwriteByte_4:
   \   000000B2   0x2401             MOVS     R4,#+1
    135          	}   //SDA=0发送成功，返回1
    136          	SCCB_SIC_L();	
   \                     ??SCCBwriteByte_5:
   \   000000B4   0x....             LDR.N    R0,??DataTable4_1  ;; 0x400ff088
   \   000000B6   0x6800             LDR      R0,[R0, #+0]
   \   000000B8   0xF44F 0x7100      MOV      R1,#+512
   \   000000BC   0x4308             ORRS     R0,R1,R0
   \   000000BE   0x....             LDR.N    R1,??DataTable4_1  ;; 0x400ff088
   \   000000C0   0x6008             STR      R0,[R1, #+0]
    137          	delay_sccb(SCCB_TIME);	
   \   000000C2   0xF240 0x50DC      MOVW     R0,#+1500
   \   000000C6   0x.... 0x....      BL       delay_sccb
    138              SCCB_SID_OUT;//设置SDA为输出
   \   000000CA   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff094
   \   000000CC   0x6800             LDR      R0,[R0, #+0]
   \   000000CE   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   000000D2   0x....             LDR.N    R1,??DataTable4_2  ;; 0x400ff094
   \   000000D4   0x6008             STR      R0,[R1, #+0]
    139          
    140          	return (tem);  
   \   000000D6   0x0020             MOVS     R0,R4
   \   000000D8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000DA   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    141          }
    142          
    143          
    144          
    145          
    146          /*
    147          -----------------------------------------------
    148             功能: 一个字节数据读取并且返回
    149             参数: 无
    150           返回值: 读取到的数据
    151          -----------------------------------------------
    152          */

   \                                 In section .text, align 2, keep-with-next
    153          unsigned char SCCBreadByte(void)
    154          {
   \                     SCCBreadByte:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    155          	unsigned char read,j;
    156          
    157          	read=0x00;
   \   00000002   0x2500             MOVS     R5,#+0
    158          	
    159          	SCCB_SID_IN;//设置SDA为输入//
   \   00000004   0x2303             MOVS     R3,#+3
   \   00000006   0x2203             MOVS     R2,#+3
   \   00000008   0x210B             MOVS     R1,#+11
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x.... 0x....      BL       GPIO_Init
    160          	
    161          	for(j=0;j<8;j++) //循环8次接收数据
   \   00000010   0x2400             MOVS     R4,#+0
   \   00000012   0xE020             B.N      ??SCCBreadByte_0
    162          	{		     
    163          		delay_sccb(SCCB_TIME);
   \                     ??SCCBreadByte_1:
   \   00000014   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000018   0x.... 0x....      BL       delay_sccb
    164          		SCCB_SIC_H();
   \   0000001C   0x....             LDR.N    R0,??DataTable4  ;; 0x400ff084
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF44F 0x7100      MOV      R1,#+512
   \   00000024   0x4308             ORRS     R0,R1,R0
   \   00000026   0x....             LDR.N    R1,??DataTable4  ;; 0x400ff084
   \   00000028   0x6008             STR      R0,[R1, #+0]
    165          		delay_sccb(SCCB_TIME);
   \   0000002A   0xF240 0x50DC      MOVW     R0,#+1500
   \   0000002E   0x.... 0x....      BL       delay_sccb
    166          		
    167          		read=read<<1;
   \   00000032   0x006D             LSLS     R5,R5,#+1
    168          		
    169          		if(GPIO_PIN_GET(SCCB_SID_PORT,SCCB_SID_PIN)) 
   \   00000034   0x....             LDR.N    R0,??DataTable4_3  ;; 0x400ff090
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x0500             LSLS     R0,R0,#+20
   \   0000003A   0xD500             BPL.N    ??SCCBreadByte_2
    170          		{
    171          			read=read+1;
   \   0000003C   0x1C6D             ADDS     R5,R5,#+1
    172          		}
    173          		SCCB_SIC_L();
   \                     ??SCCBreadByte_2:
   \   0000003E   0x....             LDR.N    R0,??DataTable4_1  ;; 0x400ff088
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0xF44F 0x7100      MOV      R1,#+512
   \   00000046   0x4308             ORRS     R0,R1,R0
   \   00000048   0x....             LDR.N    R1,??DataTable4_1  ;; 0x400ff088
   \   0000004A   0x6008             STR      R0,[R1, #+0]
    174          		delay_sccb(SCCB_TIME);
   \   0000004C   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000050   0x.... 0x....      BL       delay_sccb
    175          	}	
   \   00000054   0x1C64             ADDS     R4,R4,#+1
   \                     ??SCCBreadByte_0:
   \   00000056   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000058   0x2C08             CMP      R4,#+8
   \   0000005A   0xD3DB             BCC.N    ??SCCBreadByte_1
    176              SCCB_SID_OUT;//设置SDA为输出//
   \   0000005C   0x....             LDR.N    R0,??DataTable4_2  ;; 0x400ff094
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0xF450 0x6000      ORRS     R0,R0,#0x800
   \   00000064   0x....             LDR.N    R1,??DataTable4_2  ;; 0x400ff094
   \   00000066   0x6008             STR      R0,[R1, #+0]
    177          	return(read);
   \   00000068   0x0028             MOVS     R0,R5
   \   0000006A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    178          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x400FF084         DC32     0x400ff084

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x400FF088         DC32     0x400ff088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x400FF094         DC32     0x400ff094

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x400FF090         DC32     0x400ff090

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       16  SCCBreadByte
             16 -> GPIO_Init
             16 -> delay_sccb
       16  SCCBwriteByte
             16 -> GPIO_Init
             16 -> delay_sccb
        0  delay_sccb
        8  noAck
              8 -> delay_sccb
        8  startSCCB
              8 -> delay_sccb
        8  stopSCCB
              8 -> delay_sccb


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
     110  SCCBreadByte
     220  SCCBwriteByte
      10  delay_sccb
      88  noAck
      88  startSCCB
      66  stopSCCB

 
 598 bytes in section .text
 
 598 bytes of CODE memory

Errors: none
Warnings: none
